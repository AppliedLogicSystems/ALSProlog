<HTML>
<HEAD>
<TITLE>setof/3</TITLE>
</HEAD><BODY>
<A NAME="4227eaf9"></A><B>setof/3
<P></P>
<A NAME="4227eaff"></A><A NAME="43fe9abb"></A></B>setof/3 –  all unique solutions for a goal, sorted
<P></P>
<A NAME="43fe9abc"></A><A NAME="42318a44"></A>bagof/3 –  all solutions for a goal, not sorted
<P></P>
<A NAME="42318a70"></A><A NAME="43fe9abd"></A>findall/3 –  all solutions for a goal, not sorted
<P></P>
<A NAME="43fe9abe"></A><A NAME="42318a67"></A>b_findall/4 –  bound list of solutions for a goal, not sorted
<P></P>
<A NAME="43fe9abf"></A><B>FORMS
<P></P>
<A NAME="43fe9aeb"></A></B>setof(Template,Goal,Collection) 
<P></P>
<A NAME="43fe9ae2"></A>bagof(Template,Goal,Collection) 
<P></P>
<A NAME="43fe9b10"></A>findall(Template,Goal,Collection) <A NAME="43fe9ae3"></A> <A NAME="43fe9ae4"></A><A NAME="43fe9ae4"></A> <A NAME="43fe9ae5"></A> <A NAME="43fe9ae6"></A> <A NAME="43fe9ae7"></A><A NAME="43fe9ae7"></A> <A NAME="43fe9ae8"></A><A NAME="43fe9ae8"></A> <A NAME="43fe9ae9"></A> <A NAME="43fe9aea"></A><A NAME="43fe9aea"></A> <A NAME="43fe9b16"></A> <A NAME="43fe9b0d"></A> <A NAME="43fe9b0e"></A><A NAME="43fe9b0e"></A> <A NAME="43fe9b0f"></A><A NAME="43fe9b0f"></A> 
<P></P>
<A NAME="43fe9b11"></A>b_findall(Template,Goal,Collection, Bound)
<P></P>
<A NAME="43fe9b12"></A><B>DESCRIPTION  
<P></P>
<A NAME="43fe9b13"></A></B>These predicates collect in the list Collection, the set of all instances of Template such that the goal, Goal, is provable. Template is a term that usually shares variables with Goal. 
<P></P>
<A NAME="43fe9b14"></A>setof/3 produces a Collection which is sorted according to the standard order with all duplicate elements
removed. Both bagof/3 and findall/3 produce Collections that are not sorted. 
<P></P>
<A NAME="43fe9b15"></A>If there are no solutions to Goal, then setof/3 and bagof/3 will fail, whereas, findall/3 unifies Collection with [].  
<P></P>
<A NAME="43fe9b41"></A>Variables that occur in Goal and not within Template are known as <B><I>free variables</I></B>. setof/3 and bagof/3 will generate alternative bindings for free variables upon backtracking. 
<P></P>
<A NAME="43fe9b38"></A>Within a call to setof/3 or bagof/3, free variables can be existentially quantified in Goal by using the notation Variable^Query. This means that there exists a Variable such that Query is true. 
<P></P>
<A NAME="43fe9b39"></A>The collection to be enumerated should be finite, and should be enumerable by
Prolog in finite time. It is possible for the provable instances of Template to contain variables, but in this case Collection will only provide an imperfect representation of what is actually an infinite
collection. 
<P></P>
<A NAME="43fe9b3a"></A>setof/3 calls upon sort/2 to eliminate duplicate solutions from Collection, which seriously impacts its efficiency. In addition, even though bagof/3 leaves duplicate solutions, it still calls keysort/2. 
<P></P>
<A NAME="43fe9b3b"></A>findall/3 neither removes duplicates nor generates alternative bindings for free
variables—it assumes that all variables occurring within Goal are existentially quantified.  As a result, findall/3 is much more efficient than either setof/3 or bagof/3. 
<P></P>
<A NAME="43fe9b3c"></A>When Bound is a positive integer, b_findall/4 operates similarly to findall/3, except that it returns at most Bound number of solutions on the list Collection.  It fails if  Bound is anything other than a positive integer.
<P></P>
<A NAME="43fe9b3d"></A><B>EXAMPLES  
<P></P>
<A NAME="43fe9b3e"></A></B>?- listing. 
<P></P>
<A NAME="43fe9b3f"></A>% user:likes/2 
<P></P>
<A NAME="43fe9b40"></A>likes(kev,running). 
<P></P>
<A NAME="43fe9b6c"></A>likes(kev,lifting). 
<P></P>
<A NAME="43fe9b63"></A>likes(keith,running). 
<P></P>
<A NAME="43fe9b64"></A>likes(keith,lifting). 
<P></P>
<A NAME="43fe9b65"></A>likes(ken,swimming). 
<P></P>
<A NAME="43fe9b66"></A>likes(sally,swimming). 
<P></P>
<A NAME="43fe9b67"></A>likes(andy,bicycling). 
<P></P>
<A NAME="43fe9b68"></A>likes(chris,lifting). 
<P></P>
<A NAME="43fe9b69"></A>likes(chris,running).
<P></P>
<A NAME="43fe9b6a"></A>         
<P></P>
<A NAME="43fe9b6b"></A>yes. 
<P></P>
<A NAME="43fe9b97"></A>?- setof(Person, likes(Person, Sport), SetOfPeople). 
<P></P>
<A NAME="43fe9b8e"></A>Person = _1 
<P></P>
<A NAME="43fe9b8f"></A>Sport = bicycling 
<P></P>
<A NAME="43fe9b90"></A>SetOfPeople = [andy]; 
<P></P>
<A NAME="43fe9b91"></A>Person = _1 
<P></P>
<A NAME="43fe9b92"></A>Sport = lifting 
<P></P>
<A NAME="43fe9b93"></A>SetOfPeople = [chris,keith,kev]; 
<P></P>
<A NAME="43fe9b94"></A>Person = _1 
<P></P>
<A NAME="43fe9b95"></A>Sport = running 
<P></P>
<A NAME="43fe9b96"></A>SetOfPeople = [chris,keith,kev]; 
<P></P>
<A NAME="43fe9bc2"></A>         
<P></P>
<A NAME="43fe9bb9"></A>Person = _1 
<P></P>
<A NAME="43fe9bba"></A>Sport = swimming 
<P></P>
<A NAME="43fe9bbb"></A>SetOfPeople = [sally,ken];
<P></P>
<A NAME="43fe9bbc"></A>
<P></P>
<A NAME="43fe9bbd"></A>no. 
<P></P>
<A NAME="43fe9bbe"></A>?- setof((Sport,People), 
<P></P>
<A NAME="43fe9bbf"></A>         setof(Person, likes(Person, Sport), People), 
<P></P>
<A NAME="43fe9bc0"></A>         Set). 
<P></P>
<A NAME="43fe9bc1"></A>Sport = _1 
<P></P>
<A NAME="43fea326"></A>People = _2 
<P></P>
<A NAME="43fea31d"></A>Person = _4 
<P></P>
<A NAME="43fea31e"></A>Set = [(bicycling,[andy]),(lifting,[chris,keith,kev]), 
<P></P>
<A NAME="43fea31f"></A>       (running,[chris,keith,kev]),(swimming,[sally,ken])]
<P></P>
<A NAME="43fea320"></A>
<P></P>
<A NAME="43fea321"></A>yes. 
<P></P>
<A NAME="43fea322"></A>?- setof(Person, Sport^(Person likes Sport), SetOfPeople). 
<P></P>
<A NAME="43fea323"></A>Person = _1 
<P></P>
<A NAME="43fea324"></A>Sport = _2 
<P></P>
<A NAME="43fea325"></A>SetOfPeople = [andy,chris,sally,keith,ken,kev] 
<P></P>
<A NAME="43fea1a3"></A>
<P></P>
<A NAME="43fea19a"></A>yes. 
<P></P>
<A NAME="43fea19b"></A><B>SEE ALSO  
<P></P>
<A NAME="43fea19c"></A></B>[Bowen 91, 7.5], [Clocksin 81, 7.8], [Bratko 86, 7.6], [Sterling 86, 17.1]. 
<P></P>
</BODY>
</HTML>