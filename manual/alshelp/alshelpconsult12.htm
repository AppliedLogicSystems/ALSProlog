<HTML>
<HEAD>
<TITLE>consult/[1,2]</TITLE>
</HEAD><BODY>
<A NAME="5a876aa9"></A><B>consult/\[1,2\]
<P></P>
<A NAME="00e76789"></A><A NAME="69ad0273"></A></B>consult/1 –  load a Prolog file
<P></P>
<A NAME="02c06607"></A>consult/2 –  load a Prolog file, with options
<P></P>
<A NAME="69ad029f"></A><A NAME="00e50750"></A>consultq/1 –  load a Prolog file, without messages
<P></P>
<A NAME="69ad0296"></A><A NAME="00e50751"></A>reconsult/1 –  load a Prolog file, updating database
<P></P>
<A NAME="69ad029a"></A><B>FORMS
<P></P>
<A NAME="69ad029b"></A></B>consult(FileSpec) 
<P></P>
<A NAME="02c06631"></A>consult(FileSpec, Options) 
<P></P>
<A NAME="69ad029c"></A>[File|Files] 
<P></P>
<A NAME="69ad029d"></A>consultq(File) 
<P></P>
<A NAME="69ad029e"></A>reconsult(File) 
<P></P>
<A NAME="69ad02ca"></A>[-File|Files] 
<P></P>
<A NAME="69ad02c5"></A><B>DESCRIPTION  
<P></P>
<A NAME="69ad02c6"></A></B>FileSpec should be instantiated either to an atom that is the name of a file, or to a
list of atoms which are names of files. For each File occurring on FileSpec,  File is opened and read,  any clauses currently in memory which were read and
asserted previously from this same File are erased, and the clauses occurring in File are asserted into the database, and the  directives occurring in File are executed immediately when it is encountered.
<P></P>
<A NAME="69ad02c7"></A>consultq/1 behaves exactly like consult/1, except that printing of normal messages on the terminal is suppressed.
[Note, however, that if the File does not exist, an error message will still be printed.] 
<P></P>
<A NAME="69ad02c8"></A>reconsult/1 is identical to consult/1 except in the file in question makes it possible to amend a program without
having to restart from scratch and consult all the files which make up the
program.  Both are included for historical reasons, but the former behavior of consult/1 (asserting clauses read with no erasures) can only be obtained by using
options in consult/2.
<P></P>
<A NAME="02c066dc"></A>consult/1, reconsult/1, and consultq/1 are defined by:
<P></P>
 <A NAME="02c06706"></A>consult(File) :- consult(File, []).
<P></P>
 <A NAME="02c06707"></A>reconsult(File :- consult(File, []).
<P></P>
 <A NAME="02c06708"></A>consultq(File) :- consult(File, 
<P></P>
       <A NAME="00e50755"></A>  [verbosity(quiet)]).
<P></P>
<A NAME="02c06738"></A>If File is the atom user, then clauses and commands will be read in from the keyboard until an end of
file is read.
<P></P>
<A NAME="02c06d95"></A>The Options argument of consult/2 is a list of <I>consult options,</I> and their effects, are as follows:
<P></P>
<A NAME="02c06d96"></A><UL><LI>erbosity(Value) 
<P></P>
<A NAME="02c06dee"></A></UL>Value = quiet/noisy; turns on/off the printing of messages during consulting.
<P></P>
<A NAME="02c06dc5"></A>tgtmod(TgtMod)
<P></P>
<A NAME="02c06def"></A>Any clauses in File which are not explicitly enclosed in module begin/end directives will be
asserted to module TgtMod.  The default value of TgtMod is user.
<P></P>
<A NAME="02c06d97"></A>search_path(DirPathList) 
<P></P>
<A NAME="02c06e1b"></A>DirPathList is a list of directory path names.  The File(s) to be consulted  are searched for on this path.  If the current directory
is not listed on DirPathList, it is added at the beginning. 
<P></P>
<A NAME="02c06dbe"></A>strict_search_path(DirPathList)
<P></P>
<A NAME="02c06e18"></A>Like search_path(DirPathList), but the current directory is not added even if not present on DirPathList.
<P></P>
<A NAME="02c06dc4"></A>consult(Value)
<P></P>
<A NAME="02c06e40"></A>Value = true / false.  If Value = true,  previous clauses from the File being consulted are <I>not</I> erased, so that the net effect is additive.
<P></P>
<A NAME="02c06dbf"></A>ensure_loaded(Value)
<P></P>
<A NAME="02c06de8"></A>Value = true / false. This option has effect only when operating under one of the ALS development
shells (the ALS IDE, or the old TTY shell).   If Value = true,  and if File has previously been consulted, no action is taken for File.  If Value = false, File is consulted.
<P></P>
<A NAME="69ad02f2"></A><B>EXAMPLES
<P></P>
<A NAME="69ad02f3"></A></B>The following example illustrates the practice of putting calls to consult/1 inside of files to be (re)consulted.  We have the three files with contents
as follows:
<P></P>
<A NAME="69ad0320"></A>letters.pro
<P></P>
  <A NAME="00e50853"></A>symbol(a).
<P></P>
  <A NAME="00e50854"></A>symbol(b).
<P></P>
  <A NAME="00e50855"></A>symbol(c).
<P></P>
<A NAME="69ad0317"></A>numbers.pro
<P></P>
  <A NAME="00e50883"></A>symbol('1').
<P></P>
  <A NAME="00e508af"></A>symbol('2').
<P></P>
  <A NAME="00e508a6"></A>symbol('3').
<P></P>
<A NAME="69ad0318"></A>topfile.pro
<P></P>
  <A NAME="69ad0348"></A>symbol(x).
<P></P>
  <A NAME="69ad0349"></A>symbol(y).
<P></P>
  <A NAME="69ad034a"></A>symbol(z).
<P></P>
  <A NAME="69ad0376"></A>:- consult(letters).
<P></P>
  <A NAME="69ad036d"></A>:- consult(numbers).
<P></P>
<A NAME="69ad036e"></A>
<P></P>
<A NAME="69ad036f"></A>The following conversation illustrates the effects of consult and reconsult.
<P></P>
<A NAME="69ad0370"></A>
<P></P>
<A NAME="69ad0371"></A>?- consult(letters).
<P></P>
<A NAME="69ad0372"></A>Consulting letters ...letters consulted
<P></P>
<A NAME="69ad0374"></A>
<P></P>
<A NAME="69ad0375"></A>yes.
<P></P>
<A NAME="69ad03a1"></A>?- listing.
<P></P>
<A NAME="69ad0398"></A>
<P></P>
<A NAME="69ad0399"></A>% user:symbol/1
<P></P>
<A NAME="69ad039a"></A>symbol(a).
<P></P>
<A NAME="69ad039b"></A>symbol(b).
<P></P>
<A NAME="69ad039c"></A>symbol(c).
<P></P>
<A NAME="69ad039d"></A>
<P></P>
<A NAME="69ad039e"></A>yes.
<P></P>
<A NAME="69ad039f"></A>?- reconsult(topfile).
<P></P>
<A NAME="69ad03a0"></A>Reconsulting topfile ...
<P></P>
<A NAME="69ad03cc"></A>Consulting letters ...consulted
<P></P>
<A NAME="69ad03c4"></A>Consulting numbers ...consulted
<P></P>
<A NAME="69ad03c6"></A>consulted
<P></P>
<A NAME="69ad03c7"></A>
<P></P>
<A NAME="69ad03c8"></A>yes.
<P></P>
<A NAME="69ad03c9"></A>?- listing.
<P></P>
<A NAME="69ad03ca"></A>
<P></P>
<A NAME="69ad03cb"></A>% user:symbol/1
<P></P>
<A NAME="02c5743e"></A>symbol(a).
<P></P>
<A NAME="02c57435"></A>symbol(b).
<P></P>
<A NAME="02c57436"></A>symbol(c).
<P></P>
<A NAME="02c57437"></A>symbol(x).
<P></P>
<A NAME="02c57438"></A>symbol(y).
<P></P>
<A NAME="02c57439"></A>symbol(z).
<P></P>
<A NAME="02c5743a"></A>symbol('1').
<P></P>
<A NAME="02c5743b"></A>symbol('2').
<P></P>
<A NAME="02c5743c"></A>symbol('3').
<P></P>
<A NAME="02c5743d"></A>
<P></P>
<A NAME="02c5735f"></A>    <A NAME="02c57335"></A>      <A NAME="02c57336"></A><A NAME="02c57336"></A>       <A NAME="02c57337"></A><A NAME="02c57337"></A>       <A NAME="02c57338"></A><A NAME="02c57338"></A>                  <A NAME="02c5733b"></A><A NAME="02c5733b"></A>      <A NAME="02c57367"></A><A NAME="02c57367"></A>        
<P></P>
<A NAME="02c57360"></A><B>NOTES
<P></P>
<A NAME="02c57361"></A></B>reconsult/1 is not compatible with the DEC-10 notion of reconsult.  DEC-10 reconsult would, upon seeing a procedure not already seen in a file,
wipe out or abolish all clauses for that predicate before adding the new
clause in question.  
<P></P>
<A NAME="02c57362"></A>The present semantics of reconsult/1 are that all clauses which were previously defined in a file are wiped out
with new clauses replacing (positionally in the procedure) any old clauses. 
Thus, a procedure that is defined by several files will not be entirely wiped out
when reconsult/1 is invoked on just one of the files – only those clauses defined by the one
file are wiped out and subsequently replaced.
<P></P>
<A NAME="02c57363"></A>The file <I>user</I> is special.  When <I>user</I> is consulted or reconsulted, the input clauses will be taken from the user’s
terminal.   The end-of-file character (often Control-D or Contol-Z) should be
used to terminate the consultation and return to the shell.
<P></P>
<A NAME="02c57364"></A><B>SEE ALSO  
<P></P>
<A NAME="02c57365"></A></B>[Bratko 86, 6.5], [Clocksin 81, 6.1] 
<P></P>
</BODY>
</HTML>