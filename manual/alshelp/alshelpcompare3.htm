<HTML>
<HEAD>
<TITLE>compare/3</TITLE>
</HEAD><BODY>
<A NAME="82df55d4"></A><B>compare/3
<P></P>
<A NAME="82df55fb"></A><A NAME="a247a4ba"></A></B>compare/3 –  compares two terms in the standard order
<P></P>
<A NAME="a247a4bb"></A><B>FORMS
<P></P>
<A NAME="a247a4eb"></A></B>compare(Relation,TermL,TermR) <A NAME="a247a4bc"></A> <A NAME="a247a4bd"></A> <A NAME="a247a4be"></A> <A NAME="a247a4bf"></A> 
<P></P>
<A NAME="a247a4e2"></A><B>DESCRIPTION
<P></P>
<A NAME="a247a4e3"></A></B>TermL and TermR are compared according to the <B><I>standard order </I></B>defined below.  Relation is unified with an atom representing the result of the comparison.  Relation is unified with:
<P></P>
<A NAME="a247a4e4"></A>= when TermL is identical to TermR
<P></P>
<A NAME="a247a4e5"></A>&lt; when TermL is before TermR
<P></P>
<A NAME="a247a4e6"></A>&gt; when TermL is after TermR
<P></P>
<A NAME="a247a4e8"></A>The <A NAME="a247a4e7"></A><A NAME="39277c79"></A><B><I>standard order</I></B> provides a means to compare and sort general Prolog terms. The order is
somewhat arbitrary in how it sorts terms of different types. For example, an atom is
always “less than” a structure. Here’s the entire order:
<P></P>
<A NAME="a247a4e9"></A>          Variables &lt; Numbers &lt; Atoms &lt; Structured Terms
<P></P>
<A NAME="a247a4ea"></A><B><I>Variables</I></B> are compared according to their relative locations in the Prolog data areas.
Usually a recently created variable will be greater than an older variable. 
However, the apparent age of a variable can change without notice during a
computation.
<P></P>
<A NAME="a247a516"></A><B><I>Numbers</I></B> are ordered according to their signed magnitude.  Integers and floating point
values are ordered correctly, so compare/3 can be used to sort numbers.
<P></P>
<A NAME="a247a50d"></A><B><I>Atoms</I></B> are sorted by the ASCII order of their print names. If one atom is an initial
substring of another, the longer atom will appear later in the standard order.
<P></P>
<A NAME="a247a50e"></A><B><I>Structured terms</I></B> are ordered first by arity, then by the ASCII order of their principal
functor.  If two terms have the same functor and arity, then compare/3 will recursively compare their arguments to determine the order of the two.  
<P></P>
<A NAME="a247a50f"></A>More precisely, if TermL and TermR are structured terms, then
<P></P>
  <A NAME="a247a510"></A>TermL @&lt; TermR    holds if and only if:
<P></P>
<A NAME="a247a511"></A>
<P></P>
<A NAME="a247a512"></A>the arity of TermL is less than the arity of TermR,  or
<P></P>
  <A NAME="a247a513"></A>TermL and TermR have the same arity, and the functor name of TermL preceeds 
<P></P>
  <A NAME="a247a514"></A>the functor name of TermR in the standard order, or
<P></P>
   <A NAME="a247a515"></A>TermL and TermR have the same arity and functor name, and there is an integer N 
<P></P>
   <A NAME="a247a541"></A>less than or equal to the arity of TermL such that for all i less than N, 
<P></P>
    <A NAME="a247a538"></A>the ith arguments of TermL and TermR are identical, and
<P></P>
    <A NAME="a247a539"></A>the Nth argument of TermL preceeds the Nth argument of TermR 
<P></P>
    <A NAME="a247a53a"></A>in the standard order.
<P></P>
<A NAME="a247a53b"></A><B>EXAMPLES  
<P></P>
<A NAME="a247a53c"></A></B>The following examples show the use of compare/3 :
<P></P>
<A NAME="a247a53d"></A>?- Myself = I, compare(=, Myself, I). 
<P></P>
<A NAME="a247a53e"></A>Myself = _4 
<P></P>
<A NAME="a247a53f"></A>I = _4 
<P></P>
<A NAME="a247a540"></A>
<P></P>
<A NAME="a247a56c"></A>yes. 
<P></P>
<A NAME="a247a563"></A>?- compare(&gt;, 100, 99). 
<P></P>
<A NAME="a247a564"></A>
<P></P>
<A NAME="a247a565"></A>yes. 
<P></P>
<A NAME="a247a566"></A>?- compare(&lt;, boy, big(boy)). 
<P></P>
<A NAME="a247a567"></A>
<P></P>
<A NAME="a247a568"></A>yes. 
<P></P>
<A NAME="a247a569"></A>The following example shows the way structures are compared:
<P></P>
<A NAME="a247a56a"></A>?- compare(Order,and(a,b,c),and(a,b,a,b)). 
<P></P>
<A NAME="a247a56b"></A>Order = ’&lt;’ 
<P></P>
<A NAME="a247a597"></A> 
<P></P>
<A NAME="a247a58e"></A>yes. 
<P></P>
<A NAME="a247a58f"></A>This says that the structure
<P></P>
<A NAME="a247a590"></A>    and(a,b,c) 
<P></P>
<A NAME="a247a591"></A>comes after the structure
<P></P>
<A NAME="a247a592"></A>    and(a,b,a,b) 
<P></P>
<A NAME="a247a593"></A>in the standard order, because the second structure has a greater arity than
the first.
<P></P>
<A NAME="a247a594"></A><B>SEE ALSO  
<P></P>
<A NAME="a247a595"></A></B>==/2, @&lt;/2, sort/2, 
<P></P>
<A NAME="a247a596"></A>[Bowen 91, 7.4]. 
<P></P>
</BODY>
</HTML>