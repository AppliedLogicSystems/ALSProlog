<HTML>
<HEAD>
<TITLE>!/0 (cut)</TITLE>
</HEAD><BODY>
<A NAME="4226b56f"></A><B>!/0 (cut)
<P></P>
<A NAME="4226b596"></A><A NAME="23bf047b"></A></B>'!/0 (cut)' –  removes choice points
<P></P>
<A NAME="23bf047c"></A><B>FORMS
<P></P>
<A NAME="23bf047d"></A></B>FirstGoal, !, SecondGoal 
<P></P>
<A NAME="23bf04a9"></A>FirstGoal, !; SecondGoal 
<P></P>
<A NAME="23bf04a6"></A><B>DESCRIPTION</B>  <A NAME="23bf04a0"></A>    <A NAME="23bf04a1"></A><A NAME="23bf04a1"></A>    <A NAME="23bf04a2"></A><A NAME="23bf04a2"></A>    <A NAME="23bf04a3"></A>    <A NAME="23bf04a4"></A><A NAME="23bf04a4"></A>    <A NAME="23bf04a5"></A><A NAME="23bf04a5"></A><B> 
<P></P>
<A NAME="23bf04a7"></A></B>Discards all choice points made since the parent goal started execution,
including the choice points, if any, created by calling the parent goal. In the
following two cases, a cut in Condition will remove all choice points created by the Condition, any subgoals to the left of the Condition, and the choice point for the parent goal.
<P></P>
<A NAME="23bf04a8"></A>
<P></P>
<A NAME="23bf04d4"></A>Condition = (Things, !, MoreThings) 
<P></P>
<A NAME="23bf04cb"></A>
<P></P>
<A NAME="23bf04cc"></A>Condition-&gt;TrueGoal; FalseGoal 
<P></P>
<A NAME="23bf04cd"></A>call(Condition) 
<P></P>
<A NAME="23bf04ce"></A>In other words,
<P></P>
<A NAME="23bf04cf"></A>-&gt; 
<P></P>
<A NAME="23bf04d0"></A>call/1
<P></P>
<A NAME="23bf04d1"></A>;
<P></P>
<A NAME="23bf04d2"></A>:
<P></P>
<A NAME="23bf04d3"></A>,
<P></P>
<A NAME="23bf04ff"></A>are transparent to cut. The ISO Prolog Standard requires that call/1 be opaque to cut.  At this time, ALS Prolog deviates from the standard.
<P></P>
<A NAME="23bf04f6"></A><B>EXAMPLES  
<P></P>
<A NAME="23bf04f7"></A></B>In the following example, the solution eats(chris,pizza)causes a cut to be executed. This removes the choice point for the goal eats/2.  As a result, the solution eats(mick,pizza) is not found, even though Mick will eat anything.
<P></P>
<A NAME="23bf04f8"></A>
<P></P>
<A NAME="23bf04f9"></A>?- [user]. 
<P></P>
<A NAME="23bf04fa"></A>Consulting user. 
<P></P>
<A NAME="23bf04fb"></A>  eats(chris,pizza) :- !. 
<P></P>
<A NAME="23bf04fc"></A>  eats(mick,Anything). 
<P></P>
<A NAME="23bf04fd"></A>  user consulted. 
<P></P>
<A NAME="23bf04fe"></A>
<P></P>
<A NAME="23bf052a"></A>yes. 
<P></P>
<A NAME="23bf0521"></A>?- eats(Person,pizza).      
<P></P>
<A NAME="23bf0522"></A>Person = chris; 
<P></P>
<A NAME="23bf0523"></A>
<P></P>
<A NAME="23bf0524"></A>no. 
<P></P>
<A NAME="23bf0525"></A>The next example shows that not/1 is opaque to cut. This means that a ‘!’ inside the call to not/1 will not cut out the choicepoint for not/2, or any other choicepoints created by goals to the left of not/2.
<P></P>
<A NAME="23bf0526"></A>
<P></P>
<A NAME="23bf0527"></A>?- not((!,fail)). 
<P></P>
<A NAME="23bf0528"></A>
<P></P>
<A NAME="23bf0529"></A>yes. 
<P></P>
<A NAME="23bf0555"></A>
<P></P>
<A NAME="23bf054c"></A>Notice the extra pair of parentheses above. This is to prevent the parser from
creating a goal to not/2 instead of not/1.  In the next example, the transparency of call/1 with respect to cut is shown:
<P></P>
<A NAME="23bf054d"></A>     
<P></P>
<A NAME="23bf054e"></A>?- [user]. 
<P></P>
<A NAME="23bf054f"></A>Consulting user. 
<P></P>
<A NAME="23bf0550"></A>  cool(peewee) :- call((!,fail)). 
<P></P>
<A NAME="23bf0551"></A>  cool(X). 
<P></P>
<A NAME="23bf0552"></A>  user consulted. 
<P></P>
<A NAME="23bf0553"></A>
<P></P>
<A NAME="23bf0554"></A>yes. 
<P></P>
<A NAME="23bf0580"></A>?- cool(peewee). 
<P></P>
<A NAME="23bf0577"></A>
<P></P>
<A NAME="23bf0578"></A>no. 
<P></P>
<A NAME="23bf0579"></A>?- cool(bugsbunny). 
<P></P>
<A NAME="23bf057a"></A>
<P></P>
<A NAME="23bf057b"></A>yes. 
<P></P>
<A NAME="23bf057c"></A>
<P></P>
<A NAME="23bf057d"></A>peewee is not cool because the ‘!’ removed the choicepoint for cool/1. The fail after the ‘!’ prevented cool/1 from succeeding. The rationale for having cut behave this way is so that:
<P></P>
<A NAME="23bf057e"></A>
<P></P>
<A NAME="23bf057f"></A>cool(peewee) :- call((!,fail)). 
<P></P>
<A NAME="23bf05ab"></A>will be equivalent to
<P></P>
<A NAME="23bf05a2"></A>
<P></P>
<A NAME="23bf05a3"></A>cool(peewee) :- !,fail. 
<P></P>
<A NAME="23bf05a4"></A>The next example shows the transparency of -&gt; with respect to cut.
<P></P>
<A NAME="23bf05a5"></A>
<P></P>
<A NAME="23bf05a6"></A>?- [-user]. 
<P></P>
<A NAME="23bf05a7"></A>Reconsulting user. 
<P></P>
<A NAME="23bf05a8"></A>  cool(X) :- (X=peewee,!) -&gt; fail. 
<P></P>
<A NAME="23bf05a9"></A>  cool(X). 
<P></P>
<A NAME="23bf05aa"></A>  user reconsulted. 
<P></P>
<A NAME="23bf05d6"></A>
<P></P>
<A NAME="23bf05cd"></A>yes. 
<P></P>
<A NAME="23bf05ce"></A>?- cool(peewee). 
<P></P>
<A NAME="23bf05cf"></A>
<P></P>
<A NAME="23bf05d0"></A>no.
<P></P>
<A NAME="23bf05d1"></A> 
<P></P>
<A NAME="23bf05d2"></A>Again, peewee is not considered cool.  In the goal
<P></P>
<A NAME="23bf05d3"></A>
<P></P>
<A NAME="23bf05d4"></A>?- cool(peewee). 
<P></P>
<A NAME="23bf05d5"></A>the ‘!’ after X=peewee cuts the choicepoint for cool/1. The condition succeeds, causing fail to be executed.  However, the second clause is never reached because the
choicepoint has been cut away. Consequently, the goal fails. The goal
<P></P>
<A NAME="23bf0d3a"></A>     
<P></P>
<A NAME="23bf0d31"></A>?- cool(daffyduck). 
<P></P>
<A NAME="23bf0d32"></A>succeeds because the ‘!’ is never reached in the condition of -&gt;.  The -&gt; fails because there is no else subgoal.  This causes the next clause for cool/1 to be executed.  This clause always succeeds, therefore daffyduck is considered cool. 
<P></P>
<A NAME="23bf0d33"></A><B>SEE ALSO  
<P></P>
<A NAME="23bf0d34"></A></B>-&gt;/2, not/1, 
<P></P>
<A NAME="23bf0d35"></A>[Bowen 91, 7.1], [Sterling 86, 11], [Bratko 86, 5.1], [Clocksin 81, 4.2]. 
<P></P>
</BODY>
</HTML>
