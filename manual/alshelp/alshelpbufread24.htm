<HTML>
<HEAD>
<TITLE>bufread/[2,4]</TITLE>
</HEAD><BODY>
<A NAME="00e75f24"></A><B>bufread/[2,4]
<P></P>
<A NAME="69acd870"></A><A NAME="00e75f4b"></A></B>bufread/2 - runs the Prolog parser on a string of text
<P></P>
<A NAME="69acd871"></A>bufread/4 - similiar to bufread/2, giving additional information
<P></P>
<A NAME="69acd872"></A><B>FORMS
<P></P>
<A NAME="69acd873"></A></B>bufread(Buffer,[Structure|Vars]) 
<P></P>
<A NAME="69acd874"></A>bufread(Buffer,[Structure|Vars],FullStop,LeftOver) 
<P></P>
<A NAME="69acd875"></A><B>DESCRIPTION
<P></P>
<A NAME="69acdfda"></A></B>bufread/2 takes a Prolog string, Buffer, and attempts to transform it into a Prolog term. It does this by:
<P></P>
<A NAME="69acdfd1"></A><IMG SRC="images/Bullet.gif" ALT="Bullet.gif" BORDER=0 WIDTH=3 HEIGHT=7> Reading the first term out of Buffer (trailing characters from Buffer are ignored) and unifying it with Structure.
<P></P>
<A NAME="69acdfd2"></A><IMG SRC="images/Bullet.gif" ALT="Bullet.gif" BORDER=0 WIDTH=3 HEIGHT=7> Returning in Vars a list of the quoted variable names occurring in the term
read.
<P></P>
<A NAME="69acdfd3"></A>If an error has occured, the head will be an error message (a Prolog string),
and the tail will be the column number where the error is suspected to have
occurred. bufread/4 is the same as bufread/2, except that more information is provided. FullStop is a flag indicating whether a full stop has been typed. Its value is 1 if
there was a full stop, and 0 if there was not. LeftOver is the text that is not transformed yet. Although, bufread/4 only transforms one term at a time, it returns the text it has not
transformed yet in the LeftOver argument. This text can then be transformed by issuing another bufread call, with LeftOver given as the Buffer. 
<P></P>
<A NAME="69acdfd4"></A><B>EXAMPLES 
<P></P>
<A NAME="69acdfd5"></A></B>The following example converts the buffer:
<P></P>
<A NAME="69acdfd6"></A>
<P></P>
<A NAME="69acdfd7"></A>    &quot;f(abc, Bob) some stuff&quot; 
<P></P>
<A NAME="69acdfd8"></A>to the term f(abc,_53).
<P></P>
<A NAME="69acdfd9"></A>    ?- bufread(&quot;f(abc, Bob) some stuff&quot;, [T | Vars]). 
<P></P>
<A NAME="69acde57"></A>    T = f(abc,_53) 
<P></P>
<A NAME="69acde4e"></A>    Vars = [’Bob’] 
<P></P>
<A NAME="69acde4f"></A>    yes. 
<P></P>
<A NAME="69acde50"></A>Observe that the characters &quot;some stuff&quot; are discarded by bufread/2. This next examples demonstrates how error messages are returned:
<P></P>
<A NAME="69acde51"></A>?- bufread(&quot;hello(&quot;,[Message|Column]), 
<P></P>
<A NAME="69acde52"></A>printf(&quot;\nMessage: %s\nColumn: %d\n&quot;,[Message,Column]). 
<P></P>
<A NAME="69acde53"></A>Message: Non-empty term expected. 
<P></P>
<A NAME="69acde54"></A>Column: 6 
<P></P>
<A NAME="69acde55"></A>Message = [78,111,110,45,101,109,112,116,121,32,116,101,
<P></P>
<A NAME="69acde56"></A>114,109,32,101,120,112,101,99,116,101,100,46] 
<P></P>
<A NAME="69acde82"></A>Column = 6 
<P></P>
<A NAME="69acde79"></A>yes.
<P></P>
<A NAME="69acde7a"></A>bufread/2 can be used to convert strings to integers in the following manner:
<P></P>
<A NAME="69acde7b"></A>    ?- bufread(&quot;123&quot;,[Int|_]). 
<P></P>
<A NAME="69acde7c"></A>    Int = 123 
<P></P>
<A NAME="69acde7d"></A>    yes. 
<P></P>
<A NAME="69acde7e"></A>In the following example, the term inside(Where) was not terminated with a full stop, so FullStop is bound to 0. There is no leftover text to run, so LeftOver is bound to the empty list.
<P></P>
<A NAME="69acde7f"></A>?- bufread(&quot;inside(Where)&quot;,[Term|Vars],FullStop,LeftOver). 
<P></P>
<A NAME="69acde80"></A>Term = inside(_38) 
<P></P>
<A NAME="69acde81"></A>Vars = [’Where’] 
<P></P>
<A NAME="69acdead"></A>FullStop = 0 
<P></P>
<A NAME="69acdea4"></A>LeftOver = [] 
<P></P>
<A NAME="69acdea5"></A>yes. 
<P></P>
<A NAME="69acdea6"></A>If you are writing a shell in Prolog using bufread/4, you could write a continuation prompt to tell the user of your shell that
they must terminate the term with a full stop. In the next example, the term food(tai) was terminated by a full stop, so FullStop is bound to 1. This time, there is some leftover text that can be processed, so LeftOver is bound to the remaining Prolog string:
<P></P>
<A NAME="69acdea7"></A>    &quot; food(indian). food(chinese). &quot; 
<P></P>
<A NAME="69acdea8"></A>
<P></P>
<A NAME="69acdea9"></A>?- bufread(&quot;food(tai). food(indian). food(chinese). &quot;, 
<P></P>
<A NAME="69acdeaa"></A>        [Term|Vars],FullStop,Rest), 
<P></P>
  <A NAME="69acdeab"></A>printf(&quot;Rest = %s\n&quot;,[LeftOver]). 
<P></P>
<A NAME="69acdeac"></A>LeftOver =  food(indian). food(chinese). 
<P></P>
<A NAME="69acded8"></A>Term = food(tai) 
<P></P>
<A NAME="69acdecf"></A>Vars = [] 
<P></P>
<A NAME="69acded0"></A>FullStop = 1 
<P></P>
<A NAME="69acded1"></A>LeftOver = [32,102,111,111,100,40,105,110,100,105,97,110,41,46,32, 
<P></P>
<A NAME="69acded2"></A>102,111,111,100,40,99,104,105,110,101,115,101,41,46,32] 
<P></P>
<A NAME="69acded3"></A>yes. 
<P></P>
<A NAME="69acded4"></A>If you are writing a shell such as mentioned above, you can use use the LeftOver argument to allow multiple goals per line. You do this by continually calling bufread/4 and checking whether you still have further input to process in LeftOver. 
<P></P>
</BODY>
</HTML>
