<HTML>
<HEAD>
<TITLE>get_code/[1,2]</TITLE>
</HEAD><BODY>
<A NAME="00e76dc5"></A>get_code/\[1,2\]
<P></P>
<A NAME="02c555d2"></A><A NAME="00e76dc1"></A>get_code/1 –  read a character code from current input stream
<P></P>
<A NAME="02c555d3"></A>get_code/2 –  read character code from a specific stream
<P></P>
<A NAME="02c555d4"></A><B>FORMS
<P></P>
<A NAME="02c555d5"></A></B>get_code(Code) 
<P></P>
<A NAME="02c555f9"></A>get_code(Stream_or_Alias,Code) <A NAME="02c555d6"></A>   <A NAME="02c55602"></A>   
<P></P>
<A NAME="02c555fa"></A><B>DESCRIPTION
<P></P>
<A NAME="02c555fb"></A></B>get_code/1 will retrieve a character code from the current input stream and unify it
with Code.
<P></P>
<A NAME="02c555fc"></A>get_code/2 will retrieve a character code from the input stream associated with Stream_or_Alias and unify it with Code.
<P></P>
<A NAME="02c555fd"></A>If there are no more data left in the stream to be read and if the stream has
the property eof_action(eof_code), then Code will be unified with -1.
<P></P>
<A NAME="02c555fe"></A><B>EXAMPLES
<P></P>
<A NAME="02c555ff"></A></B>?- get_code(C1), get_code(C2), get_ccode(C3), get_code(C4).
<P></P>
<A NAME="02c55600"></A>test
<P></P>
<A NAME="02c55601"></A>
<P></P>
<A NAME="02c5562d"></A>C1 = 116
<P></P>
<A NAME="02c55624"></A>C2 = 101
<P></P>
<A NAME="02c55625"></A>C3 = 115
<P></P>
<A NAME="02c55626"></A>C4 = 116
<P></P>
<A NAME="02c55627"></A><B>ERRORS
<P></P>
<A NAME="02c55628"></A></B>Stream_or_Alias is a variable
<P></P>
<A NAME="02c55629"></A>––––&gt;  instantiation_error.
<P></P>
<A NAME="02c5562a"></A>Stream_or_Alias is neither a variable nor a stream descriptor nor an alias
<P></P>
<A NAME="02c5562b"></A>––––&gt;  domain_error(stream_or_alias,Stream_or_Alias).
<P></P>
<A NAME="02c5562c"></A>Stream_or_Alias is not associated with an open stream
<P></P>
<A NAME="02c55658"></A>––––&gt;  existence_error(stream,Stream_or_Alias).
<P></P>
<A NAME="02c5564f"></A>Stream_or_Alias is not an input stream
<P></P>
<A NAME="02c55650"></A>––––&gt;  permission_error(input,stream,Stream_or_Alias).
<P></P>
<A NAME="02c55651"></A>Code is neither a variable nor a character code
<P></P>
<A NAME="02c55652"></A>––––&gt;  type_error(integer,Code).
<P></P>
<A NAME="02c55653"></A>The stream associated with Stream_or_Alias is at the end of the stream and the stream has the property eof_action(error)
<P></P>
<A NAME="02c55654"></A>––––&gt;  existence_error(past_end_of_stream,Stream_or_Alias).
<P></P>
<A NAME="02c55655"></A>The stream associated with Stream_or_Alias has no input ready to be read and the stream has the property snr_action(error)
<P></P>
<A NAME="02c55656"></A>––––&gt;  existence_error(stream_not_ready,Stream_or_Alias).
<P></P>
<A NAME="02c55657"></A><B>NOTES
<P></P>
<A NAME="02c55683"></A></B>A character code is simply an integer restricted to a certain range of values.
<P></P>
<A NAME="02c5567a"></A><B>SEE ALSO
<P></P>
<A NAME="02c5567b"></A></B>put_code/2, get_char/2, open/4, close/1, char_code/2,
<P></P>
<A NAME="02c5567c"></A>User Guide (Prolog I/O),.
<P></P>
</BODY>
</HTML>