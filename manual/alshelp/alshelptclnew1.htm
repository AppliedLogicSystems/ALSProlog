<HTML>
<HEAD>
<TITLE>tcl_new/1</TITLE>
</HEAD><BODY>
<A NAME="d8e13334"></A><B>tcl_new/1
<P></P>
<A NAME="a43b539c"></A></B>tcl_new/1  - create a Tcl interpreter
<P></P>
<A NAME="d8e131af"></A><A NAME="d8e115d2"></A>tk_new/1  - create a Tcl interpreter initialized for Tk
<P></P>
<A NAME="d8e13234"></A><B>FORMS
<P></P>
<A NAME="d8e132b6"></A></B>tcl_new(X)
<P></P>
<A NAME="d8e132b2"></A>tcl_new(X)
<P></P>
<A NAME="d8e13287"></A><B>DESCRIPTION
<P></P>
<A NAME="a43b539d"></A></B>tcl_new/1 creates a new <A NAME="d8e115c9"></A><A NAME="d8e115c9"></A>Tcl interpreter. If the Interpreter argument is an uninstantiated (Prolog) variable,  then a unique name is
generated for the interpreter.  If Interpreter is a atom, the new Tcl interpreter is given that name.
<P></P>
<A NAME="a43b539e"></A>tk_new/1 functions in the same manner as tcl_new/1, except that the newly- created Tcl interpreter is initialized with theTk
package.
<P></P>
<A NAME="a43b539f"></A><B>EXAMPLES
<P></P>
<A NAME="a43b53a0"></A></B>?- tcl_new(i). 
<P></P>
<A NAME="d8e1330b"></A>Succeeds, creating a Tcl interpreter named i.
<P></P>
<A NAME="a43b53a1"></A>?- tcl_new(X). 
<P></P>
<A NAME="d8e0f232"></A>Succeeds, unifying X with the atom ‘interp1’.
<P></P>
<A NAME="a43b53cd"></A><B>ERRORS
<P></P>
<A NAME="a43b53c4"></A></B>Interpreter is not an atom or variable.
<P></P>
<A NAME="a43b53c5"></A>––––&gt;  type_error(atom_or_variable).
<P></P>
<A NAME="a43b53c6"></A>The atom Interpreter has already been use as the name of a Tcl interpreter.
<P></P>
<A NAME="a43b53c7"></A>––––&gt;  permission_error(create,tcl_interpreter,Interpreter)
<P></P>
<A NAME="a43b53c8"></A>Tcl is unable to create the interpreter.
<P></P>
<A NAME="a43b53c9"></A>––––   <A NAME="d8dd6324"></A>tcl_error(message)
<P></P>
</BODY>
</HTML>