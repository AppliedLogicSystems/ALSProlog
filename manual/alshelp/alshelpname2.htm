<HTML>
<HEAD>
<TITLE>name/2</TITLE>
</HEAD><BODY>
<A NAME="82df63f2"></A><B>name/2
<P></P>
<A NAME="82df6419"></A><A NAME="84b4ec68"></A></B>name/2 –  converts strings to atoms and atoms to strings
<P></P>
<A NAME="84b4ec94"></A><B>FORMS
<P></P>
<A NAME="84b4ec8f"></A></B>name(Constant,PrintName) <A NAME="84b4ec8b"></A> <A NAME="84b4ec8c"></A><A NAME="84b4ec8c"></A> <A NAME="84b4ec8d"></A> <A NAME="84b4ec8e"></A><A NAME="84b4ec8e"></A> 
<P></P>
<A NAME="84b4ec90"></A><B>DESCRIPTION  
<P></P>
<A NAME="84b4ec91"></A></B>When Constant is instantiated to an atom or a number, PrintName is unified with a list of ASCII codes that correspond to the printed
representation of Constant.  When PrintName is a list of ASCII codes, Constant will be unified with the atom or number whose printed representation is the
string PrintName.  
<P></P>
<A NAME="84b4ec92"></A>?- name(Symbol, [0’a,0’l,0’i,0’e,0’n,0’s]). 
<P></P>
<A NAME="84b4ec93"></A>Symbol = aliens 
<P></P>
<A NAME="84b62a8b"></A>yes. 
<P></P>
<A NAME="84b62a82"></A>?- name(aliens, &quot;aliens&quot;).
<P></P>
<A NAME="84b62a83"></A>
<P></P>
<A NAME="84b62a84"></A>yes. 
<P></P>
<A NAME="84b62a85"></A>?- name([], &quot;[]&quot;). 
<P></P>
<A NAME="84b62a86"></A>
<P></P>
<A NAME="84b62a87"></A>yes. 
<P></P>
<A NAME="84b62a88"></A>?- name(2018, X). 
<P></P>
<A NAME="84b62a89"></A>X = [50,48,49,56] 
<P></P>
<A NAME="84b62a8a"></A>yes. 
<P></P>
<A NAME="84b62908"></A>?- name(X, &quot;2018&quot;). 
<P></P>
<A NAME="84b628ff"></A>X = 2018           % 2018 is an integer, not a symbol 
<P></P>
<A NAME="84b62900"></A>yes. 
<P></P>
<A NAME="84b62901"></A><B>NOTES
<P></P>
<A NAME="84b62902"></A></B>We recommend the use of atom_chars/2 and number_chars/2 over name/2.
<P></P>
<A NAME="84b62903"></A><B>SEE ALSO  
<P></P>
<A NAME="84b62904"></A></B>atom_chars/2, atom_codes/2, number_chars/2, number_codes/2, term_chars/2,
term_codes/2, <I>User Guide (Syntax of ALS Prolog),, [Bowen 91, 7.8], [Clocksin 81, 6.5],
[Bratko 86, 6.4], [Sterling 86, 12.1].</I> 
<P></P>
</BODY>
</HTML>