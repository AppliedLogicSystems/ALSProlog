<HTML>
<HEAD>
<TITLE>,/2 (comma)</TITLE>
</HEAD><BODY>
<A NAME="158bf4cb"></A>,/2 (comma)
<P></P>
<A NAME="4226bb7c"></A><A NAME="23bf0bb1"></A>,/2 –  conjunction of two goals
<P></P>
<A NAME="23bf0bb2"></A><B>FORMS
<P></P>
<A NAME="23bf0bb3"></A></B>FirstGoal,SecondGoal 
<P></P>
<A NAME="23bf0bb6"></A><B>DESCRIPTION         <A NAME="23bf0bb5"></A>
<P></P>
<A NAME="23bf0be2"></A></B>The first argument is called as a goal. If it succeeds, then the SecondGoal will be run. If either goal fails, the most recent alternative will be
attempted after backtracking. 
<P></P>
<A NAME="23bf0bd9"></A><B>EXAMPLES  
<P></P>
<A NAME="23bf0bda"></A></B>The following example shows the use of the ‘,’ connector:
<P></P>
<A NAME="23bf0bdb"></A>     
<P></P>
<A NAME="23bf0bdc"></A>?- [user]. 
<P></P>
<A NAME="23bf0bdd"></A>Consulting user. 
<P></P>
<A NAME="23bf0bde"></A>  lucky(mick,love). 
<P></P>
<A NAME="23bf0bdf"></A>  boss(mick,jerri). 
<P></P>
<A NAME="23bf0be0"></A>  user consulted. 
<P></P>
<A NAME="23bf0be1"></A>
<P></P>
<A NAME="23bf0c0d"></A>yes. 
<P></P>
<A NAME="23bf0c04"></A>?- lucky(Who,What), boss(Who,Boss). 
<P></P>
<A NAME="23bf0c05"></A>      
<P></P>
<A NAME="23bf0c06"></A>Who = mick 
<P></P>
<A NAME="23bf0c07"></A>What = love 
<P></P>
<A NAME="23bf0c08"></A>Boss = jerri 
<P></P>
<A NAME="23bf0c09"></A>
<P></P>
<A NAME="23bf0c0a"></A>yes. 
<P></P>
<A NAME="23bf0c0b"></A>
<P></P>
<A NAME="23bf0c0c"></A>The goal submitted to the Prolog shell consists of two subgoals
<P></P>
<A NAME="23bf0c38"></A><IMG SRC="Bullet.gif" ALT="Bullet.gif" BORDER=0 WIDTH=3 HEIGHT=7> lucky(Who,What)
<P></P>
<A NAME="23bf0c2f"></A><IMG SRC="Bullet.gif" ALT="Bullet.gif" BORDER=0 WIDTH=3 HEIGHT=7> boss(Who,Boss)
<P></P>
<A NAME="23bf0c30"></A>The subgoals are connected together by using the ‘,’ predicate.  In the next example, the first subgoal fails, so the second
subgoal is not executed:
<P></P>
<A NAME="23bf0c31"></A>
<P></P>
<A NAME="23bf0c32"></A>?- fail, write(’Help, I’’m stuck in an example’), nl. 
<P></P>
<A NAME="23bf0c33"></A>
<P></P>
<A NAME="23bf0c34"></A>no. 
<P></P>
<A NAME="23bf0c35"></A>The following shows that ‘,’ works the same in call/1:
<P></P>
<A NAME="23bf0c36"></A>
<P></P>
<A NAME="23bf0c37"></A>?- call((fail, write(’Help, I’’m stuck in an example’), nl)). 
<P></P>
<A NAME="23bf0c63"></A>
<P></P>
<A NAME="23bf0c5a"></A>no. 
<P></P>
<A NAME="23bf0c5b"></A>Note that the parentheses around the argument to call/1 are to keep the parser from creating a call to call/3. 
<P></P>
<A NAME="23bf0c5c"></A><B>SEE ALSO  
<P></P>
<A NAME="23bf0c5d"></A></B>call/1, :/2, ;/2,
<P></P>
<A NAME="23bf0c5e"></A>[Bratko 86, 2.3], [Clocksin 81, 6.7]. 
<P></P>
</BODY>
</HTML>