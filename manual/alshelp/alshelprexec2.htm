<HTML>
<HEAD>
<TITLE>rexec/2</TITLE>
</HEAD><BODY>
<A NAME="2e647133"></A><B>rexec/2
<P></P>
<A NAME="43fe8514"></A><A NAME="4227e4c5"></A></B>rexec/2 –  Execute an operating system command, possibly remotely. 
<P></P>
<A NAME="43fe8540"></A><B>FORMS
<P></P>
<A NAME="43fe8537"></A></B>rexec(Command,Options)
<P></P>
<A NAME="43fe8538"></A><B>DESCRIPTION
<P></P>
<A NAME="43fe8539"></A></B>rexec/2 is an interface to the rexec system call which may be used to run commands on
remote machines.  When remote execution is not desired, fork and exec (Unix system calls) are used to run the command on the local machine. 
Command should be an atom representing the command to run.  Options is a list
containing zero or more of the following forms:
<P></P>
<A NAME="43fe853a"></A>host(HostName) –  execute the command on the machine named by HostName.
<P></P>
<A NAME="43fe853b"></A>username(User) –  run the command as user User.
<P></P>
<A NAME="43fe853c"></A>password(Password) –  provides the password for authentication purposes.  If no password is
supplied, you will be prompted for one (by the rexec daemon).
<P></P>
<A NAME="43fe853d"></A>rstream(Stream,OpenOpts) – designates the input stream to read the output of the command from.  This
stream will be connected to the standard output of the command.  Stream will be bound to a stream descriptor. OpenOpts is a list containing options suitable for a call to open/4.
<P></P>
<A NAME="43fe853e"></A>wstream(Stream,OpenOpts) –  designates the output stream to write to.  This output stream will be
connected to standard input of the command.
<P></P>
<A NAME="43fe853f"></A>estream(Stream,OpenOpts) –  designates the input stream for use in obtaining error messages from the
command.  This stream will be connected to standard error for the command.
<P></P>
<A NAME="43fe856b"></A>If any of host, username, or password are specified, rexec/2 will attempt to contact the rexec daemon to remotely run the command on the specified machine.  The remote
execution daemon, rexecd, requires authentication.  This means that either a username and password
must be supplied in the program (with the username/1 and password/1 forms), interactively, or via the .netrc file.  Not all remote execution daemons support authentication via the .netrc file.  See your local system documentation for information about the .netrc file.
<P></P>
<A NAME="43fe8562"></A>If none of host, username, or password are specified, then rexec/2 will use the traditional fork and exec mechanism to run the command on the local machine.  If remote execution is
still desired, but the rexec daemon's authentication mechanisms deemed too odious, then rsh (running on the local machine) may be used to run a command on a remote
machine.
<P></P>
<A NAME="43fe8563"></A><B>EXAMPLES
<P></P>
<A NAME="43fe8564"></A></B>The following procedure will call the unix word count program, wc, to determine the length of an atom.
<P></P>
<A NAME="43fe8565"></A>slow_atom_length(A,Len) :-
<P></P>
  <A NAME="43fe8566"></A>rexec('wc -c',
<P></P>
   <A NAME="43fe8567"></A>  [rstream(RS,[]),wstream(WS,[])]),
<P></P>
  <A NAME="43fe8568"></A>write(WS,A),
<P></P>
  <A NAME="43fe8569"></A>close(WS),
<P></P>
  <A NAME="43fe856a"></A>read_term(RS,Len,[attach_fullstop(true)]),
<P></P>
  <A NAME="43fe8596"></A>close(RS).
<P></P>
<A NAME="43fe858d"></A>
<P></P>
 <A NAME="43fe858e"></A>?- slow_atom_length('The rain in Spain', Len).
<P></P>
<A NAME="43fe858f"></A>
<P></P>
 <A NAME="43fe8590"></A>Len = 17
<P></P>
<A NAME="43fe8591"></A>
<P></P>
 <A NAME="43fe8592"></A>yes.
<P></P>
<A NAME="43fe8593"></A>
<P></P>
<A NAME="43fe8594"></A>The version of slow_atom_length/2 above assumes one is running on a Unix machine and calls wc running on the
same machine.  The version  below, slow_atom_length/3 ,  will work on any system which supports sockets (Unix workstations, Windows
95 with WinSock, Macintosh):
<P></P>
<A NAME="43fe8595"></A>rstrlen(Host,A,Len) :-
<P></P>
<A NAME="43fe85c1"></A>    rexec(‘wc -c’,
<P></P>
   <A NAME="43fe85b8"></A>[host(Host),rstream(RS,[]),
<P></P>
    <A NAME="43fe85b9"></A>wstream(WS,[])]),
<P></P>
<A NAME="43fe85ba"></A>    write(WS,A),
<P></P>
<A NAME="43fe85bb"></A>    close(WS),
<P></P>
<A NAME="43fe85bc"></A>    read_term(RS,Len,[attach_fullstop(true)]),
<P></P>
<A NAME="43fe85bd"></A>    close(RS).
<P></P>
<A NAME="43fe85be"></A>Here is an interaction running over the internet:
<P></P>
<A NAME="43fe85bf"></A>
<P></P>
<A NAME="43fe85c0"></A>?- rstrlen(‘bongo.cs.anywhere.edu’,’abcdef’,X).
<P></P>
<A NAME="43fe85ec"></A>Name (bongo.cs.anywhere.edu:ken): mylogin
<P></P>
<A NAME="43fe85e3"></A>Password (bongo.cs.anywhere.edu:ken): &lt;mypasswd&gt;
<P></P>
<A NAME="43fe85e4"></A> 
<P></P>
<A NAME="43fe85e5"></A>X = 6
<P></P>
<A NAME="43fe85e6"></A>
<P></P>
<A NAME="43fe85e7"></A><B>NOTES
<P></P>
<A NAME="43fe85e8"></A></B>This function is not yet very consistent with regards to error handling.  Some
errors will be thrown, while others will print a diagnostic.  Other errors
will cause failure.  This functionality will be cleaned up in a later release.
<P></P>
<A NAME="43fe85e9"></A><B>SEE ALSO
<P></P>
<A NAME="43fe85ea"></A></B>open/[3,4].
<P></P>
</BODY>
</HTML>