<HTML>
<HEAD>
<TITLE>stream_property/2</TITLE>
</HEAD><BODY>
<A NAME="fcbd7d40"></A>stream_property/2
<P></P>
<A NAME="02bcedcc"></A><A NAME="00e879ad"></A>stream_property/2 –  retrieve streams and their properties
<P></P>
<A NAME="02bcedcd"></A><B>FORMS  
<P></P>
<A NAME="02bcedf8"></A></B>stream_property(Stream,Property)  <A NAME="02bcedce"></A>   <A NAME="02bcedcf"></A>   <A NAME="02bcedd0"></A>   <A NAME="02bcedd1"></A>   <A NAME="02bcedd2"></A>   <A NAME="02bcedfe"></A>   <A NAME="02bcedf5"></A>   <A NAME="02bcedf6"></A>   <A NAME="02bcedf7"></A>   
<P></P>
<A NAME="02bcedf9"></A><B>DESCRIPTION
<P></P>
<A NAME="02bcedfa"></A></B>stream_property/2 is used to retrieve information on a particular stream.  It may also be used
to find those streams satisfying a particular property.
<P></P>
<A NAME="02bcedfb"></A>Stream may be either an input or output argument.  If used as an input argument it
should be bound to either a stream descriptor as returned by open/4 or an alias established in a call to open/4.  If used as an output argument, Stream will only be bound to stream descriptors.  This predicate may be used to
retrieve those streams whose handles were &quot;lost&quot; for some reason.<B> 
<P></P>
<A NAME="02bcedfc"></A></B>Property is a term which may take any of the following forms:
<P></P>
<A NAME="02bcedfd"></A>file_name(F) – When the stream is connected to a source/sink  which is a file, F will be
the name of that file.
<P></P>
<A NAME="02bcee29"></A>stream_name(N) – N is unified with the name of the source/sink regardless of whether the stream
is connected to a file or not.
<P></P>
<A NAME="02bcee20"></A>mode(M) – M is unified with the I/O mode which was specified at the time the stream
was opened.
<P></P>
<A NAME="02bcee21"></A>input – The stream is connected to a source.
<P></P>
<A NAME="02bcee22"></A>output – The stream is connected to a sink.  It is possible for a stream to have
both input    and output properties.
<P></P>
<A NAME="02bcee23"></A>alias(A) – If the stream has an alias, A will be unified with that alias.
<P></P>
<A NAME="02bcee24"></A>position(P) – If the stream is repositionable, P will be unified with the current
position in the stream.
<P></P>
<A NAME="02bcee25"></A>end_of_stream(E) – If the stream position is located at the end of the stream, then E is unified with 'at'.  If the stream position is past the end of stream, then E is unified with 'past'.  Otherwise, E is unified with 'no'.  In the current implementation of ALS Prolog, querying about the end_of_stream property may cause an I/O operation to result which may block.
<P></P>
<A NAME="02bcee26"></A>eof_action(A) – If the stream option eof_action(Action) was specified in the options list when the stream was opened, then A will be unified with this action.  Otherwise, A will be unified with the default action appropriate for the stream.
<P></P>
<A NAME="02bcee27"></A>snr_action(A) – If the stream option snr_action(Action) was specified in the options list when the stream was opened, then A will be unified with this action.  Otherwise, A will be unified with the default action appropriate for the stream.
<P></P>
<A NAME="02bcee28"></A>reposition(R) – If positioning is possible on this stream then R is unified with true;  if not R is unified with false.
<P></P>
<A NAME="02bcee54"></A>type(T) – T will be unified with either text or binary, indicating the type of stream.
<P></P>
<A NAME="02bcee4b"></A>maxdepth(D) – D will be unified with the default depth with which terms are written to.
<P></P>
<A NAME="02bcee4c"></A>depth_computation(DC) – DC will be unified with the atom indicating the method of depth computation when
writing out terms.
<P></P>
<A NAME="02bcee4d"></A>line_length(L) – L will be unified to the default line length parameter which is used for
determining where line breaks should be placed when writing terms.
<P></P>
<A NAME="02bcee4e"></A><B>EXAMPLES
<P></P>
<A NAME="02bcee4f"></A></B>Open 'foo' for write, but &quot;lose&quot; the stream descriptor.
<P></P>
<A NAME="02bcee50"></A>
<P></P>
<A NAME="02bcee51"></A>?- open(foo,write,_).
<P></P>
<A NAME="02bcee52"></A>
<P></P>
<A NAME="02bcee53"></A>Use stream_property to retrieve the stream descriptor and close it.
<P></P>
<A NAME="02bcee7f"></A>
<P></P>
<A NAME="02bcee76"></A>?- stream_property(S,file_name(foo)), close(S).
<P></P>
<A NAME="02bcee77"></A>
<P></P>
<A NAME="02bcee78"></A>S =  stream_descriptor('',closed,file,foo,[noinput|output],true,
<P></P>
<A NAME="02bcee79"></A>          1,0,0,0,0,true,0,wt_opts(78,40000,flat),[],true,text,
<P></P>
<A NAME="02bcee7a"></A>          eof_code,0,0)
<P></P>
<A NAME="02bcee7b"></A>
<P></P>
<A NAME="02bcee7c"></A>Open 'foo' for read with an alias.
<P></P>
<A NAME="02bcee7d"></A>
<P></P>
<A NAME="02bcee7e"></A>?- open(foo,read,_,[alias(foo_alias)]).
<P></P>
<A NAME="02bceeaa"></A>
<P></P>
<A NAME="02bceea1"></A>Call stream_property to find out where end-of-stream is.  Note that foo was
created as the empty file above.
<P></P>
<A NAME="02bceea2"></A>
<P></P>
<A NAME="02bceea3"></A>?- stream_property(foo_alias,end_of_stream(Where)).
<P></P>
<A NAME="02bceea4"></A>
<P></P>
<A NAME="02bceea5"></A>Where = at
<P></P>
<A NAME="02bceea6"></A>
<P></P>
<A NAME="02bceea7"></A>Call stream_property again to find out about the end-of-stream.
<P></P>
<A NAME="02bceea8"></A>
<P></P>
<A NAME="02bceea9"></A>?- stream_property(foo_alias,end_of_stream(Where)).
<P></P>
<A NAME="02bceed5"></A>
<P></P>
<A NAME="02bceecc"></A>Where = past
<P></P>
<A NAME="02bceecd"></A>
<P></P>
<A NAME="02bceece"></A>Call stream_property to find out the name of the file associated with the
alias.
<P></P>
<A NAME="02bceecf"></A>
<P></P>
<A NAME="02bceed0"></A>?- stream_property(foo_alias,file_name(Name)).
<P></P>
<A NAME="02bceed1"></A>
<P></P>
<A NAME="02bceed2"></A>Name = foo
<P></P>
<A NAME="02bceed3"></A>
<P></P>
<A NAME="02bceed4"></A>Get all of the names attached to streams.
<P></P>
<A NAME="02be2ccc"></A>
<P></P>
<A NAME="02be2cc3"></A>?- setof(N,S^stream_property(S,stream_name(N)),L).
<P></P>
<A NAME="02be2cc4"></A>
<P></P>
<A NAME="02be2cc5"></A>N = N
<P></P>
<A NAME="02be2cc6"></A>S = S
<P></P>
<A NAME="02be2cc7"></A>L = ['$stderr','$stdin','$stdout',foo]
<P></P>
<A NAME="02be2cc8"></A><B>SEE ALSO
<P></P>
<A NAME="02be2cc9"></A></B>open/4, close/1, set_stream_position/2, at_end_of_stream/1,
<P></P>
<A NAME="02c08417"></A>set_line_length/2, <I>User Guide (Prolog I/O)</I>.
<P></P>
</BODY>
</HTML>