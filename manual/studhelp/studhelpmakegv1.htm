<HTML>
<HEAD>
<TITLE>make_gv/1</TITLE>
</HEAD><BODY>
<A NAME="4e2215a7"></A>make_gv/1
<P></P>
<A NAME="4227d654"></A><A NAME="43fc52b1"></A>make_gv/1 –  create named global variable and access method
<P></P>
<A NAME="423189ed"></A><A NAME="43fc52b2"></A>make_det_gv/1 –  create named global variable and access methods which preserves
instantiations of structures
<P></P>
<A NAME="43fc52b3"></A><A NAME="423189ee"></A>free_gv/1 –  release store associated with named global variable
<P></P>
<A NAME="43fc52b4"></A><B>FORMS
<P></P>
<A NAME="43fc52b5"></A></B>make_gv(Name)
<P></P>
<A NAME="43fc52b6"></A>make_det_gv(Name)
<P></P>
<A NAME="43fc52b8"></A>free_gv(Name) <A NAME="43fc52b7"></A><A NAME="43fc52b7"></A>   
<P></P>
<A NAME="43fc11e3"></A><B>DESCRIPTION
<P></P>
<A NAME="43fc11da"></A></B>make_gv/1 allocates an internal global variable and creates two access predicates
called setNAME/1 and getNAME/1 where NAME is the atom Name.  These access predicates are installed in the module from which make_gv/1 is called.  
<P></P>
<A NAME="43fc11db"></A>The setNAME/1 predicate is used to set the allocated global variable to the term given to setNAME as its only argument.  This operation is safe in that the contents of the
global variable will survive backtracking without any dangling references.  Care
should be taken when using these global variables with backtracking as it is
easy to create a ground structure in which &quot;holes&quot; will appear upon backtracking. 
These holes are uninstantiated variables where there used to be a term.  They
are caused by some bit of non-determinism when creating the term.  If the
non-determinism is removed via cut prior to a global variable operation, these
&quot;holes&quot; will often not show up upon backtracking.  If the non-determinism is removed
after the global variable operation takes place, these holes will very likely
show up.  The reason that this is so is because the global variable mechanism
will (as a consequence of making the structure safe to backtrack over) eliminate
the ability of cut to discriminate among those trail entries which may be
safely cut and those which are needed in the event of failure.
<P></P>
<A NAME="43fc11dc"></A>In situations where this is a problem, a call to copy_term/2 may be used to create a copy of the term prior to setting the global
variable.  The instantiation of the term that exists at the time of the copy will be
the instantiation of the term which survives backtracking over the copy
operation. 
<P></P>
<A NAME="43fc11dd"></A>Also of interest is the time complexity of the set operation. So long as the
argument to setNAME/1 is a non-pointer type, that is a suitably small integer or certain types of
atoms (the non-UIA variety), the set operation is a constant time operation. 
Otherwise it requires time linearly proportional to the current depth of the
choice point stack.
<P></P>
<A NAME="43fc11de"></A>The getNAME/1 predicate created by make_gv/1 is used to get the contents of one of these global variables.  The contents
of the global variable is unified with the single parameter passed to getNAME/1.
<P></P>
<A NAME="43fc11df"></A>make_det_gv/1 creates access methods just like make_gv/1 but the setNAME/1 method avoids the problems referred to above concerning certain
instantiations in structure becoming undone. It does this by making a copy of the term prior
to setting the global variable.  Making a copy of the term has the
disadvantage of the increased space and time requirements associated with making copies.  
<P></P>
<A NAME="43fc11e0"></A>free_gv/1 removes access methods created by make_gv/1 and frees up the global variable.
<P></P>
<A NAME="43fc11e1"></A><B>EXAMPLES
<P></P>
<A NAME="43fc1059"></A></B>:- make_gv('_demo').%% Create get_demo/1 and set_demo/1.
<P></P>
<A NAME="43fc105a"></A>
<P></P>
<A NAME="43fc105b"></A>print_demo(N) :- get_demo(X), printf('demo%d: %t\n',[N,X]).
<P></P>
<A NAME="43fc105c"></A>
<P></P>
<A NAME="43fc105d"></A>demo1 :- demo1(_).
<P></P>
<A NAME="43fc105e"></A>demo1 :- print_demo(1).
<P></P>
<A NAME="43fc105f"></A>demo1(_) :- X=f(Y), (Y=i ; Y=j), set_demo(X), print_demo(1), fail.
<P></P>
<A NAME="43fc108b"></A>
<P></P>
<A NAME="43fc1082"></A>demo2 :- demo2(_).
<P></P>
<A NAME="43fc1083"></A>demo2 :- print_demo(2).
<P></P>
<A NAME="43fc1084"></A>demo2(_) :- X=f(Y), (Y=i ; Y=j),!,set_demo(X), print_demo(2), fail.
<P></P>
<A NAME="43fc1085"></A>
<P></P>
<A NAME="43fc1086"></A>demo3 :- demo3(_).
<P></P>
<A NAME="43fc1087"></A>demo3 :- print_demo(3).
<P></P>
<A NAME="43fc1088"></A>demo3(_) :- X=f(Y), (Y=i ; Y=j), set_demo(X),!,print_demo(3), fail.
<P></P>
<A NAME="43fc1089"></A>
<P></P>
<A NAME="43fc108a"></A>demo4 :- demo4(_).
<P></P>
<A NAME="43fc10b6"></A>demo4 :- print_demo(4).
<P></P>
<A NAME="43fc10ad"></A>demo4(Y) :- X=f(Y), (Y=i ; Y=j),!,set_demo(X), print_demo(4), fail.
<P></P>
<A NAME="43fc10ae"></A>
<P></P>
<A NAME="43fc10af"></A>demo5 :- _=f(Y), set_demo([a]), demo5(Y).
<P></P>
<A NAME="43fc10b0"></A>demo5 :- print_demo(5).
<P></P>
<A NAME="43fc10b1"></A>demo5(Y) :- X=f(Y), (Y=i ; Y=j),!,set_demo(X), print_demo(5), fail.
<P></P>
<A NAME="43fc10b2"></A>
<P></P>
<A NAME="43fc10b3"></A>demo6 :- set_demo([a]), _=f(Y), demo6(Y).
<P></P>
<A NAME="43fc10b4"></A>demo6 :- print_demo(6).
<P></P>
<A NAME="43fc10b5"></A>demo6(Y) :- X=f(Y), (Y=i ; Y=j),!,set_demo(X), print_demo(6), fail.
<P></P>
<A NAME="43fc10e1"></A>
<P></P>
<A NAME="43fc10d8"></A>demo7 :- demo7(_).
<P></P>
<A NAME="43fc10d9"></A>demo7 :- print_demo(7).
<P></P>
<A NAME="43fc10da"></A>demo7(_) :- X=f(Y), (Y=i ; Y=j), copy_term(X,Z), 
<P></P>
<A NAME="43fc10db"></A>            set_demo(Z), !, print_demo(7), fail.
<P></P>
<A NAME="43fc10dc"></A>
<P></P>
<A NAME="43fc10dd"></A>demo :- demo1, nl, demo2, nl, demo3, nl,
<P></P>
  <A NAME="43fc10de"></A>    demo4, nl, demo5, nl, demo6, nl,
<P></P>
  <A NAME="43fc10df"></A>    demo7.
<P></P>
<A NAME="43fc110c"></A>The above program demonstrates the subtelties of combining global variables
with backtracking.  Here is a sample run of this program:
<P></P>
<A NAME="43fc1103"></A>
<P></P>
<A NAME="43fc1104"></A>?- demo.
<P></P>
<A NAME="43fc1105"></A>demo1: f(i)
<P></P>
<A NAME="43fc1106"></A>demo1: f(j)
<P></P>
<A NAME="43fc1107"></A>demo1: f(_A)
<P></P>
<A NAME="43fc1108"></A>
<P></P>
<A NAME="43fc1109"></A>demo2: f(i)
<P></P>
<A NAME="43fc110a"></A>demo2: f(i)
<P></P>
<A NAME="43fc110b"></A>
<P></P>
<A NAME="43fc1137"></A>demo3: f(i)
<P></P>
<A NAME="43fc112e"></A>demo3: f(_A)
<P></P>
<A NAME="43fc112f"></A>
<P></P>
<A NAME="43fc1130"></A>demo4: f(i)
<P></P>
<A NAME="43fc1131"></A>demo4: f(i)
<P></P>
<A NAME="43fc1132"></A>
<P></P>
<A NAME="43fc1133"></A>demo5: f(i)
<P></P>
<A NAME="43fc1134"></A>demo5: f(_A)
<P></P>
<A NAME="43fc1135"></A>
<P></P>
<A NAME="43fc1136"></A>demo6: f(i)
<P></P>
<A NAME="43fc1162"></A>demo6: f(i)
<P></P>
<A NAME="43fc1159"></A>
<P></P>
<A NAME="43fc115a"></A>demo7: f(i)
<P></P>
<A NAME="43fc115b"></A>demo7: f(i)
<P></P>
<A NAME="43fc115c"></A>
<P></P>
<A NAME="43fc115d"></A>In each of these seven different tests, some non-determinism is introduced
through the use of ;/2.
<P></P>
<A NAME="43fc115e"></A>demo1 makes no attempt eliminate this non-determinism.  Yet the results might be
somewhat surprising. set_demo/1 is called twice; once with X instantiated to f(i), the second time with X instantiatedto f(j).  Yet when we fail out of demo1/1, print_demo/1 reports the &quot;demo&quot; variable to have an uninstantiated portion. 
<P></P>
<A NAME="43fc115f"></A>demo2 eliminates the non-determinism in a straightforward fashion through the use
of a cut.  Here the f(i) is made to &quot;stick&quot;.
<P></P>
<A NAME="43fc1160"></A>demo3 is a slight variation on demo2.  It shows that eliminating determinism after setting the global variable is
too late to make the instantiations &quot;stick&quot;.
<P></P>
<A NAME="43fc1161"></A>demo4 is similar to demo3, but shows that it is alright for Y to be &quot;older&quot; than the structure containing it.
<P></P>
<A NAME="43fc118d"></A>demo5 shows that an intervening global variable operation may screw things up by
making Y live in a portion of the heap which must be trailed when Y is bound.  The cut prior to setting the global variable is not permitted to
remove the trail entry which eventually causes Y to lose its instantiation.
<P></P>
<A NAME="43fc1184"></A>demo6 shows that creating the variable after the global variable operation has the
same effect as demo4.
<P></P>
<A NAME="43fc1185"></A>demo7 demonstrates a technique that may be used to always make instantiations
&quot;stick&quot;.  It creates a new copy of the term and calls set_demo/1 with this new copy.
<P></P>
<A NAME="43fc1186"></A>If the call to make_gv/1 at the top of the file were replaced with a call to make_det_gv/1, then all of the instantiations would &quot;stick&quot; as make_det_gv/1 automatically makes a copy of the term thus doing implicitly what demo7 does explicitly.
<P></P>
<A NAME="43fc1187"></A><B>BUGS
<P></P>
<A NAME="43fc1188"></A></B>free_gv/1 does not work for access methods created by make_det_gv/1.
<P></P>
<A NAME="43fc1189"></A><B>SEE ALSO
<P></P>
<A NAME="43fc118a"></A></B>make_hash_table/1, copy_term/2, mangle/3.
<P></P>
</BODY>
</HTML>