<HTML>
<HEAD>
<TITLE>close/[1,2]</TITLE>
</HEAD><BODY>
<A NAME="f2b391a1"></A>close/[1,2]
<P></P>
<A NAME="69acf4ab"></A><A NAME="00e75ff8"></A>close/1 –  close an open stream
<P></P>
<A NAME="69acf4ac"></A>close/2 –  close an open stream with options
<P></P>
<A NAME="69acf4ad"></A><B>FORMS
<P></P>
<A NAME="69acf4d9"></A></B>close(Stream_or_Alias) 
<P></P>
<A NAME="69acf4d4"></A>close(Stream_or_Alias,CloseOptions) <A NAME="69acf4d0"></A><A NAME="69acf4d0"></A>   <A NAME="69acf4d1"></A>   <A NAME="69acf4d2"></A>   <A NAME="69acf4d3"></A>
<P></P>
<A NAME="69acf4d5"></A><B>DESCRIPTION
<P></P>
<A NAME="69acf4d6"></A></B>close/1 and close/2 close a stream previously opened with open/3 or open/4.  Closing a stream consists of flushing the buffer associated with the stream
and freeing resources associated with maintaining an open stream.  If there is
an alias associated with the stream, this alias is disassociated and freed up
for potential use by some other stream.  If the stream to be closed is the
current input stream, then the current input stream is set to the stream associated
with the alias user_input.  If the stream to be closed is associated with the current output stream,
then the current output stream is set to the stream associated with the alias user_output.
<P></P>
<A NAME="69acf4d7"></A>Certain types of streams may have other actions performed.  Atom streams
opened for write will have the stream contents unified with the atom A which appeared in the sink specificat
<P></P>
<A NAME="69acf4d8"></A>ion in the call to open.
<P></P>
<A NAME="69acf504"></A>Stream_or_Alias is either a stream descriptor or an alias established via a call to open/3 or open/4.        
<P></P>
<A NAME="69acf4fb"></A>CloseOptions is a list consisting of  options to close/2.  The close options are:
<P></P>
<A NAME="69acf4fc"></A>force(false) – This is the default.  A system error or resource error which occurs while
closing the stream may prevent the stream from being closed.
<P></P>
<A NAME="69acf4fd"></A>force(true) – Errors occuring while closing the stream are ignored and resources
associated with the stream are freed anyway.
<P></P>
<A NAME="69acf4fe"></A><B>ERRORS
<P></P>
<A NAME="69acf4ff"></A></B>Stream_or_Alias is a variable
<P></P>
<A NAME="69acf500"></A>––––&gt;  instantiation_error.
<P></P>
<A NAME="69acf501"></A>Stream_or_Alias is neither a variable nor a stream identifier or alias
<P></P>
<A NAME="69acf502"></A>––––&gt;  domain_error(stream_or_alias,Stream_or_Alias)
<P></P>
<A NAME="69acf503"></A>CloseOptions is a variable
<P></P>
<A NAME="69acf52f"></A>––––&gt;  instantiation_error.
<P></P>
<A NAME="69acf526"></A>CloseOptions is neither variable nor list
<P></P>
<A NAME="69acf527"></A>––––&gt;  type_error(list,CloseOptions).
<P></P>
<A NAME="69acf528"></A>CloseOptions is a list which contains a variable element
<P></P>
<A NAME="69acf529"></A>––––&gt;  instantiation_error.
<P></P>
<A NAME="69acf52a"></A>CloseOptions is a list which contains an element E which is neither a variable nor a valid
close option
<P></P>
<A NAME="69acf52b"></A>––––&gt;  domain_error(close_option, E).
<P></P>
<A NAME="69acf52c"></A><B>NOTES
<P></P>
<A NAME="69acf52d"></A></B>Certain streams which are opened at system startup time can not be closed. 
Among these streams are user_input and user_output.  Calling close on these aliases will neither throw an error nor really close
the stream.
<P></P>
<A NAME="69acf52e"></A><B>SEE ALSO
<P></P>
<A NAME="69acf55a"></A></B>open/4, current_input/1, flush_output/1, <I>User Guide (Prolog I/O).
<P></P>
</I></BODY>
</HTML>