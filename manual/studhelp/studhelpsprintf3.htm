<HTML>
<HEAD>
<TITLE>sprintf/3</TITLE>
</HEAD><BODY>
<A NAME="00e878fd"></A><B>sprintf/3
<P></P>
<A NAME="02bce7c0"></A><A NAME="00e87924"></A></B>sprintf/3 - formatted write to atoms and strings
<P></P>
<A NAME="02bce7c1"></A><A NAME="00e4ce5f"></A>bufwrite/2 - formatted write to strings
<P></P>
<A NAME="02bce7c2"></A><A NAME="00e4ce60"></A>bufwriteq/2 - formatted write to strings with quoting
<P></P>
<A NAME="02bce7c3"></A><B>FORMS
<P></P>
<A NAME="02bce7c4"></A></B>sprintf(Target, Format, Args),
<P></P>
<A NAME="02bce7c5"></A>bufwrite(String,Term) 
<P></P>
<A NAME="02bce63f"></A>bufwriteq(String,Term) <A NAME="02bce7c6"></A><A NAME="02bce7c6"></A> <A NAME="02bce644"></A> <A NAME="02bce63b"></A> <A NAME="02bce63c"></A><A NAME="02bce63c"></A> <A NAME="02bce63d"></A><A NAME="02bce63d"></A> <A NAME="02bce63e"></A><A NAME="02bce63e"></A> 
<P></P>
<A NAME="02bce640"></A><B>DESCRIPTION
<P></P>
<A NAME="02bce641"></A></B>sprintf/3 is very similar to printf/3, except that instead of writing the formatted out
put to a stream, sprintf/3 writes the output to either a Prolog atom or string.  The Format and Args arguments are identical to the corresponding arguments for printf/3.  The Target argument can be an uninstatiated variable, or can be of one of the forms atom(A), string(S), or list(S).  In case Target is an uninstatiated variable, on success, Target is a Prolog double-quoted string containing the formatted output.  Similarly,
if Target is string(S) or list(S), on success, S is a Prolog double-quoted string containing the formatted output.  And if Target is atom(A), on success A is an atom containing the formatted output.
<P></P>
<A NAME="02bce642"></A>bufwrite/2 creates a printed representation of the Term using the operator declaration as write/1 would.  However, instead of writing the result to the current output stream, bufwrite/2 converts the printed representation into a list of ASCII codes.  bufwriteq/2 behaves similarly to bufwrite/2, but quotes items exactly the way writeq/2 would. 
<P></P>
<A NAME="02bce643"></A><B>EXAMPLES  
<P></P>
<A NAME="02bce66f"></A></B>?- sprintf(X, ’Contents: %t, Amount: %t’, [pocket(keys),1]).
<P></P>
<A NAME="02bce666"></A>X = &quot;Contents: pocket(keys), Amount: 1&quot;
<P></P>
<A NAME="02bce667"></A>
<P></P>
<A NAME="02bce668"></A>?- sprintf(string(X), ’Contents: %t, Amount: %t’,
<P></P>
     <A NAME="02bce669"></A>[pocket(keys),1]).
<P></P>
<A NAME="02bce66a"></A>X = &quot;Contents: pocket(keys), Amount: 1&quot;
<P></P>
<A NAME="02bce66b"></A>
<P></P>
<A NAME="02bce66c"></A>?- sprintf(atom(X), ’Contents: %t, Amount: %t’,[pocket(keys),1]).
<P></P>
<A NAME="02bce66d"></A>X = ’Contents: pocket(keys), Amount: 1’
<P></P>
<A NAME="02bce66e"></A>
<P></P>
<A NAME="02bce69a"></A>?- bufwrite(&quot;jack+f(tom)&quot;, +(jack, f(tom))). 
<P></P>
<A NAME="02bce691"></A>yes. 
<P></P>
<A NAME="02bce692"></A>?- bufwrite(S, ’Enterprise’). 
<P></P>
<A NAME="02bce693"></A>S = [69,110,116,101,114,112,114,105,115,101] 
<P></P>
<A NAME="02bce694"></A>yes. 
<P></P>
<A NAME="02bce695"></A><B>SEE ALSO  
<P></P>
<A NAME="02bce696"></A></B>printf/[2,3,4],  write/1,   op/3,  writeq/1 
<P></P>
</BODY>
</HTML>