<HTML>
<HEAD>
<TITLE>current_prolog_flag/2</TITLE>
</HEAD><BODY>
<A NAME="4227c6e1"></A><B>current_prolog_flag/2
<P></P>
<A NAME="440702c4"></A><A NAME="4227c708"></A></B>current_prolog_flag/2 –  retrieve value(s) of prolog flag(s) 
<P></P>
<A NAME="4405f0a1"></A><A NAME="4405f0cc"></A>set_prolog_flag/2 –  set value of a Prolog flag 
<P></P>
<A NAME="440702bb"></A><B>FORMS
<P></P>
<A NAME="440702bc"></A></B>current_prolog_flag(Flag,Value)<A NAME="423183b1"></A>   <A NAME="423183b2"></A>
<P></P>
<A NAME="4405f0c7"></A><A NAME="4405f0c7"></A>set_prolog_flag(Flag,Value)
<P></P>
<A NAME="440702bd"></A><B>DESCRIPTION
<P></P>
<A NAME="440702be"></A></B>current_prolog_flag/2 is re-executable. It unifies Flag and Value with the current instantiations of the flag/value pairs supported by ALS Prolog.     If Flag and Value are appropriately instantiated,
<P></P>
 <A NAME="4405f11f"></A>set_prolog_flag(Flag,Value)
<P></P>
<A NAME="4405f150"></A>changes the present value associated with Flag to become Value.
<P></P>
<A NAME="440702bf"></A>The flags supported by ALS-Prolog are:<B> 
<P></P>
<A NAME="4405f177"></A></B><I>ISO Standard Flags</I> (ISO Standard references are given in parentheses):
<P></P>
<A NAME="4228fea1"></A><A NAME="4405f7ad"></A>bounded (7.11.1.1)
<P></P>
<A NAME="4405f7ae"></A>Values:  true, false
<P></P>
<A NAME="4405f7af"></A>Default = true
<P></P>
<A NAME="4405f7b0"></A>Changeable: no
<P></P>
<A NAME="4405f7dd"></A><A NAME="423183b4"></A>max_integer  (7.11.1.2)
<P></P>
<A NAME="4405f7d4"></A>Default = Value
<P></P>
<A NAME="4405f7d5"></A>Changeable: no
<P></P>
<A NAME="4405f7d7"></A><A NAME="423183b5"></A>min_integer  (7.11.1.3)
<P></P>
<A NAME="4405f7d8"></A>Default = Value
<P></P>
<A NAME="4405f7d9"></A>Changeable: no
<P></P>
<A NAME="423183b6"></A><A NAME="4405f7db"></A>integer_rounding_function  (7.11.1.4)
<P></P>
<A NAME="4405f7dc"></A>Values:  down  toward_zero
<P></P>
<A NAME="4405f808"></A>Default = toward_zero
<P></P>
<A NAME="4405f7ff"></A>Changeable: no
<P></P>
<A NAME="4405f801"></A><A NAME="423183b7"></A>char_conversion  (7.11.2.1)
<P></P>
<A NAME="4405f802"></A>Values:  on  off  
<P></P>
<A NAME="4405f803"></A>Default = off
<P></P>
<A NAME="4405f804"></A>Changeable: yes
<P></P>
<A NAME="4405f806"></A><A NAME="423183e3"></A>debug (7.11.2.2)
<P></P>
<A NAME="4405f807"></A>Values:  off  on  
<P></P>
<A NAME="4405f833"></A>Default =off
<P></P>
<A NAME="4405f82a"></A>Changeable: yes
<P></P>
<A NAME="423183da"></A><A NAME="4405f82c"></A>max_arity (7.11.2.3)
<P></P>
<A NAME="4405f82d"></A>Default = Value  (= max_integer)
<P></P>
<A NAME="4405f82e"></A>Changeable: no
<P></P>
<A NAME="4405f830"></A><A NAME="423183db"></A>unknown  (7.11.2.4)
<P></P>
<A NAME="4405f831"></A>Values:  error fail warning break
<P></P>
<A NAME="4405f832"></A>Default = error
<P></P>
<A NAME="4405f85e"></A>Changeable: yes
<P></P>
<A NAME="44060015"></A>Describes the course of action to take when an undefined predicate is called. 
The associated value (action) may be one of the following:
<P></P>
 <A NAME="44060016"></A>error   -<B> </B> force an existence error when an undefined predicate is called.
<P></P>
 <A NAME="44060017"></A>fail    -<B>  </B>fail when an undefined predicate is called.
<P></P>
 <A NAME="4231bdd6"></A>warning -<B> </B> warn the user when an undefined predicate is called.
<P></P>
 <A NAME="44060013"></A>break   -<B>  </B>enter the break handler when an undefined predicate is called.
<P></P>
<A NAME="4405f857"></A><A NAME="423183dc"></A>double_quotes (7.11.2.5)
<P></P>
<A NAME="4405f858"></A>Values:  chars codes atom
<P></P>
<A NAME="4405f859"></A>Default = codes
<P></P>
<A NAME="4405f85a"></A>Changeable: yes
<P></P>
<A NAME="4405f1a0"></A><I>ALS Extension Flags:<A NAME="423183dd"></A>
<P></P>
<A NAME="423183de"></A><A NAME="4231bccb"></A><A NAME="4231bccb"></A></I>undefined_predicate    synonymous with: unknown
<P></P>
<A NAME="423183df"></A><A NAME="4231bcf8"></A>windows_system
<P></P>
<A NAME="4231bcf9"></A>Values:  nowins  tcltk
<P></P>
<A NAME="4231bcfa"></A>Default = Value
<P></P>
<A NAME="4231bcfb"></A>Changeable: no
<P></P>
<A NAME="42317bf5"></A>Takes value &quot;nowins&quot; if no windowing system extension is present; otherwise is
the identifier of the windowing  extension (at present, only “tcltk”).
<P></P>
<A NAME="423183e0"></A><A NAME="4231bcfd"></A>anonymous_solutions  ( reporting )
<P></P>
<A NAME="4231bcfe"></A>Values:  true  false
<P></P>
<A NAME="4231bd2a"></A>Default = false
<P></P>
<A NAME="4231bd21"></A>Changeable: yes
<P></P>
<A NAME="423183e1"></A><A NAME="4231bd23"></A>syntax_errors ( behavior on syntax errors ) 
<P></P>
<A NAME="4231bd24"></A>Values:  fail  error  quiet  dec10
<P></P>
<A NAME="4231bd25"></A>Default = error
<P></P>
<A NAME="4231bd26"></A>Changeable: yes
<P></P>
<A NAME="4231bd28"></A><A NAME="42318b3e"></A>obp_location (location of generated obp files )
<P></P>
<A NAME="4231bd29"></A>Values:  <A NAME="42318b3f"></A>gic  <A NAME="42318b40"></A>gis  <A NAME="42318b41"></A>giac  <A NAME="42318b42"></A>gias
<P></P>
<A NAME="4231bd55"></A>Default = gias
<P></P>
<A NAME="4231bd4c"></A>Changeable: yes
<P></P>
<A NAME="42318b43"></A><A NAME="4231bd4e"></A>freeze  (whether freeze is available)
<P></P>
<A NAME="4231bd4f"></A>Values:  true  false
<P></P>
<A NAME="4231bd50"></A>Default = Value
<P></P>
<A NAME="4231bd51"></A>Changeable: no
<P></P>
<A NAME="4231bd53"></A><A NAME="42318b44"></A>constraints (whether constraints are available)
<P></P>
<A NAME="4231bd54"></A>Values:  true  false
<P></P>
<A NAME="4231bd80"></A>Default = Value
<P></P>
<A NAME="4231bd77"></A>Changeable: no
<P></P>
<A NAME="4231bda6"></A><A NAME="42318b45"></A>iters_max_exceeded (only when constraints = true)
<P></P>
<A NAME="4231bda7"></A>Values:  succeed  fail  warning  exception
<P></P>
<A NAME="4231bda8"></A>Default = succeed
<P></P>
<A NAME="4231bda9"></A>Changeable: yes
<P></P>
<A NAME="423182ae"></A>For <A NAME="423189bd"></A>CLP(BNR), the iters_max_exceeded flag controls the behavior when then maximum number of constraint narrowing
iterations is exceeded, as follows:
<P></P>
<A NAME="423182b0"></A>
<P></P>
<A NAME="423182b1"></A>     -- succeed   (leaves network in place)
<P></P>
<A NAME="423182b2"></A>     -- fail   (quiet; backtracking resets net)
<P></P>
<A NAME="423182b3"></A>     -- warning  (fails &amp; issues warning;  backtracking resets net)
<P></P>
<A NAME="423182b5"></A>     -- exception  (backtracking resets net)
<P></P>
<A NAME="4231838c"></A>Settings for prolog flags can be placed in the <A NAME="423189be"></A><A NAME="423189be"></A>startup file (alspro.pro or .alspro).
<P></P>
<A NAME="440702e7"></A><B>ERRORS
<P></P>
<A NAME="440702e8"></A></B>Flag is a variable  (set_prolog_flag <I>only</I>)
<P></P>
<A NAME="440702e9"></A>––––&gt; instantiation_error.
<P></P>
<A NAME="440702ea"></A>Value is a variable (set_prolog_flag <I>only</I>)
<P></P>
<A NAME="440702eb"></A>––––&gt; instantiation_error.
<P></P>
<A NAME="440702ec"></A>Flag is neither a variable nor an atom
<P></P>
<A NAME="440702ed"></A>––––&gt; type_error(atom,Flag).
<P></P>
<A NAME="440702ee"></A>Value is inappropriate for Flag
<P></P>
<A NAME="4407031a"></A>––––&gt; domain_error(flag_value, Flag + Value)
<P></P>
<A NAME="44070311"></A><B>NOTES
<P></P>
<A NAME="4405f078"></A>EXAMPLES
<P></P>
<A NAME="423189bf"></A></B>?- current_prolog_flag(unknown, V).
<P></P>
<A NAME="423189c3"></A>V = error
<P></P>
<A NAME="4405f0a4"></A>?- set_prolog_flag(undefined_predicate,fail).
<P></P>
</BODY>
</HTML>