<HTML>
<HEAD>
<TITLE>;/2 (semi-colon)</TITLE>
</HEAD><BODY>
<A NAME="4226bca3"></A>;/2 (semi-colon)
<P></P>
<A NAME="23bf1318"></A><A NAME="4226bca9"></A>;/2 –  disjunction of two goals
<P></P>
<A NAME="23bf1319"></A><B>FORMS
<P></P>
<A NAME="23bf133e"></A></B>FirstGoal ; SecondGoal <A NAME="23bf131a"></A><A NAME="23bf133d"></A><A NAME="23bf1346"></A><A NAME="23bf1346"></A>    
<P></P>
<A NAME="23bf133f"></A><B>DESCRIPTION 
<P></P>
<A NAME="23bf1340"></A></B>The FirstGoal is called.  Later, upon backtracking, SecondGoal will be called.  Cuts appearing in either FirstGoal or SecondGoal will cut back to the head of the clause which contained the call to ;/2. <A NAME="23bf1341"></A>   
<P></P>
<A NAME="23bf1342"></A><B>EXAMPLES 
<P></P>
<A NAME="23bf1343"></A></B>The following example shows the use of ‘;’ as the boolean or connective:
<P></P>
<A NAME="23bf1344"></A>
<P></P>
<A NAME="23bf1345"></A>?- [user]. 
<P></P>
<A NAME="23bf1371"></A>Consulting user. 
<P></P>
<A NAME="23bf1368"></A>  language(postscript). 
<P></P>
<A NAME="23bf1369"></A>  language(pascal). 
<P></P>
<A NAME="23bf136a"></A>  food(burrito). 
<P></P>
<A NAME="23bf136b"></A>  food(crab). 
<P></P>
<A NAME="23bf136c"></A>  food(steak). 
<P></P>
<A NAME="23bf136d"></A>  user consulted. 
<P></P>
<A NAME="23bf136e"></A>
<P></P>
<A NAME="23bf136f"></A>yes. 
<P></P>
<A NAME="23bf1370"></A>?- language(postscript) ; food(postscript).
<P></P>
<A NAME="23bf139c"></A> 
<P></P>
<A NAME="23bf1393"></A>yes. 
<P></P>
<A NAME="23bf1394"></A>
<P></P>
<A NAME="23bf1395"></A>Notice that although postscript isn’t a food, the goal succeeds. This is because only one of the two subgoals
has to succeed for ‘;’ to succeed.  In the next example, we add a few more facts to the database.
This example shows that ‘;’ goal also succeeds if both of its arguments can succeed.
<P></P>
<A NAME="23bf1396"></A>
<P></P>
<A NAME="23bf1397"></A>?- [user]. 
<P></P>
<A NAME="23bf1398"></A>Consulting user. 
<P></P>
<A NAME="23bf1399"></A>  food(prolog). 
<P></P>
<A NAME="23bf139a"></A>  language(prolog). 
<P></P>
<A NAME="23bf139b"></A>  user consulted. 
<P></P>
<A NAME="23bf13c7"></A>
<P></P>
<A NAME="23bf13be"></A>yes. 
<P></P>
<A NAME="23bf13bf"></A>?- language(prolog) ; food(prolog).
<P></P>
<A NAME="23bf13c0"></A> 
<P></P>
<A NAME="23bf13c1"></A>yes. 
<P></P>
<A NAME="23bf13c2"></A>Note that the food(prolog)goal is never run, even though it is true. The next example shows that ‘;’ will fail if neither of the subgoals succeed.
<P></P>
<A NAME="23bf13c3"></A>
<P></P>
<A NAME="23bf13c4"></A>?- language(fortran) ; food(fortran). 
<P></P>
<A NAME="23bf13c5"></A>
<P></P>
<A NAME="23bf13c6"></A>no. 
<P></P>
<A NAME="23bf13f2"></A>
<P></P>
<A NAME="23bf13e9"></A>The next example illustrates the behavior of ‘;’ upon backtracking. The semicolons after the shown answers are typed in by
the user interactively:
<P></P>
<A NAME="23bf13ea"></A>
<P></P>
<A NAME="23bf13eb"></A>?- language(X) ; food(X). 
<P></P>
<A NAME="23bf13ec"></A>
<P></P>
<A NAME="23bf13ed"></A>X = postscript; 
<P></P>
<A NAME="23bf13ee"></A>X = pascal; 
<P></P>
<A NAME="23bf13ef"></A>X = prolog; 
<P></P>
<A NAME="23bf13f0"></A>X = burrito; 
<P></P>
<A NAME="23bf13f1"></A>X = crab; 
<P></P>
<A NAME="23bf141d"></A>X = steak; 
<P></P>
<A NAME="23bf1414"></A>X = prolog; 
<P></P>
<A NAME="23bf1415"></A>
<P></P>
<A NAME="23bf1416"></A>no. 
<P></P>
<A NAME="23bf1417"></A><B>SEE ALSO  
<P></P>
<A NAME="23bf1418"></A></B>!/0, -&gt;/2,  
<P></P>
<A NAME="23bf1419"></A>[Bowen 91, 7.1], [Sterling 86, 10.4], [Bratko 86, 2.3], [Clocksin 81, 6.7]. 
<P></P>
</BODY>
</HTML>