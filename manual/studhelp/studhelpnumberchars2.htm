<HTML>
<HEAD>
<TITLE>number_chars/2</TITLE>
</HEAD><BODY>
<A NAME="10c76319"></A>number_chars/2
<P></P>
<A NAME="84b62a5c"></A><A NAME="82df6473"></A>number_chars/2 –  convert between a number and the list of characters which represent the
number
<P></P>
<A NAME="84be9899"></A>number_codes/2 –  convert between a number and the list of character codes which represent
the number
<P></P>
<A NAME="84b62a5e"></A><B>FORMS
<P></P>
<A NAME="84b62a5f"></A></B>number_chars(Number,CharList) 
<P></P>
<A NAME="84b5e982"></A>number_codes(Number,CodeList) <A NAME="84b5e98a"></A><A NAME="84b5e98a"></A>   <A NAME="84b5e981"></A><A NAME="84b5e981"></A>   
<P></P>
<A NAME="84b5e983"></A><B>DESCRIPTION
<P></P>
<A NAME="84b5e984"></A></B>If CharList is bound to a list of characters then it is parsed according to the syntax
rules for numbers.  Should the parse be successful, the resulting value is
unified with Number in a call to number_chars/2.
<P></P>
<A NAME="84b5e985"></A>If CodeList is bound to a list of character codes then it is is parsed according to the
syntax rules for numbers.  Should the parse be successful, the resulting value
is unified with Number in a call to number_codes/2.
<P></P>
<A NAME="84b5e986"></A>In Number is bound to a number in either number_chars/2 (or number_codes/2), after first  ascertaining that CharList (or CodeList) is bound to a ground list, then CharList (or CodeList) will be bound to a list of characters (character codes) that would result as
output from write_canonical(Number).
<P></P>
<A NAME="84b5e987"></A><B>EXAMPLES
<P></P>
<A NAME="84b5e988"></A></B>?- number_chars(-2.3,L).
<P></P>
<A NAME="84b5e989"></A>
<P></P>
<A NAME="84b5e807"></A>L = [-,'2',.,'3']
<P></P>
<A NAME="84b5e7fe"></A>
<P></P>
<A NAME="84b5e7ff"></A>yes.
<P></P>
<A NAME="84b5e800"></A>?- number_codes(N,&quot;123&quot;).        
<P></P>
<A NAME="84b5e801"></A>
<P></P>
<A NAME="84b5e802"></A>N = 123
<P></P>
<A NAME="84b5e803"></A>
<P></P>
<A NAME="84b5e804"></A>yes.
<P></P>
<A NAME="84b5e805"></A>?- number_codes(N,&quot;   123.40000000000000&quot;).
<P></P>
<A NAME="84b5e806"></A>
<P></P>
<A NAME="84b5e832"></A>N = 123.4
<P></P>
<A NAME="84b5e829"></A>
<P></P>
<A NAME="84b5e82a"></A>yes.
<P></P>
<A NAME="84b5e82b"></A>?- number_chars(123.4,['1',A,B,.,C]).
<P></P>
<A NAME="84b5e82c"></A>
<P></P>
<A NAME="84b5e82d"></A>A = '2'
<P></P>
<A NAME="84b5e82e"></A>B = '3'
<P></P>
<A NAME="84b5e82f"></A>C = '4'
<P></P>
<A NAME="84b5e830"></A>
<P></P>
<A NAME="84b5e831"></A>yes.
<P></P>
<A NAME="84b5e85d"></A>?- number_codes(N,&quot;0xffe&quot;).
<P></P>
<A NAME="84b5e854"></A>
<P></P>
<A NAME="84b5e855"></A>N = 4094
<P></P>
<A NAME="84b5e856"></A>
<P></P>
<A NAME="84b5e857"></A>yes.
<P></P>
<A NAME="84b5e858"></A>?- number_codes(N,&quot;foobar&quot;).
<P></P>
<A NAME="84b5e859"></A>
<P></P>
<A NAME="84b5e85a"></A>Error: Syntax error.
<P></P>
<A NAME="84b5e85b"></A>- Goal:          builtins:number_codes(_A,&quot;foobar&quot;)
<P></P>
<A NAME="84b5e85c"></A>- Throw pattern: error(syntax_error,[builtins:number_codes(_A,*)])
<P></P>
<A NAME="84b5e888"></A><B>ERRORS
<P></P>
<A NAME="84b5e87f"></A></B>Number and CharList are variables (number_chars/3)
<P></P>
<A NAME="84b5e880"></A>––––&gt;  instantiation_error.
<P></P>
<A NAME="84b5e881"></A>Number and CodeList are variables (number_codes/3)
<P></P>
<A NAME="84b5e882"></A>––––&gt;  instantiation_error.
<P></P>
<A NAME="84b5e883"></A>Number is neither a number nor a variable
<P></P>
<A NAME="84b5e884"></A>––––&gt;  type_error(number,Number)
<P></P>
<A NAME="84b5e885"></A>CharList is neither a variable nor a list of characters
<P></P>
<A NAME="84b5e886"></A>––––&gt;  domain_error(character_list,List)
<P></P>
<A NAME="84b5e887"></A>CodeList is neither a variable nor a list of character codes
<P></P>
<A NAME="84b5e8b3"></A>––––&gt;  domain_error(character_code_list,List)
<P></P>
<A NAME="84b5e8aa"></A>CharList (or CodeList) is not parsable as a number
<P></P>
<A NAME="84b5e8ab"></A>––––&gt;  syntax_error
<P></P>
<A NAME="84b5e8ac"></A><B>SEE ALSO
<P></P>
<A NAME="84bae670"></A></B>read_term/3, write_canonical/2.
<P></P>
</BODY>
</HTML>