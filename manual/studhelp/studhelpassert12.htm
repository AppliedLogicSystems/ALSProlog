<HTML>
<HEAD>
<TITLE>assert/[1,2]</TITLE>
</HEAD><BODY>
<A NAME="4226cb69"></A><B>assert/[1,2]
<P></P>
<A NAME="23c06dee"></A><A NAME="4226cb6f"></A></B>assert/1 –  adds a clause to a procedure
<P></P>
<A NAME="42293f1f"></A>assert/2 –  adds a clause to a procedure
<P></P>
<A NAME="42293f20"></A><A NAME="42293f21"></A>asserta/1 –  adds a clause at the beginning of a procedure
<P></P>
<A NAME="42293f22"></A>asserta/2 –  adds a clause at the beginning of a procedure
<P></P>
<A NAME="4405e9eb"></A><A NAME="23c06df2"></A>assertz/1 –  adds a clause at the end of a procedure
<P></P>
<A NAME="23c06df3"></A>assertz/2 –  adds a clause at the end of a procedure
<P></P>
<A NAME="23c06df4"></A><B>FORMS
<P></P>
<A NAME="23c06df5"></A></B>assert(Clause) 
<P></P>
<A NAME="23c06e21"></A>assert(Clause,Ref) 
<P></P>
<A NAME="23c06e18"></A>asserta(Clause) 
<P></P>
<A NAME="23c06e19"></A>asserta(Clause,Ref) 
<P></P>
<A NAME="23c06e1a"></A>assertz(Clause) 
<P></P>
<A NAME="23c06e46"></A>assertz(Clause,Ref) <A NAME="23c06e1b"></A><A NAME="23c06e1b"></A> <A NAME="23c06e1c"></A><A NAME="23c06e1c"></A> <A NAME="23c06e1d"></A><A NAME="23c06e1d"></A> <A NAME="23c06e1e"></A><A NAME="23c06e1e"></A> <A NAME="23c06e1f"></A><A NAME="23c06e1f"></A> <A NAME="23c06e20"></A><A NAME="23c06e20"></A> <A NAME="23c06e4c"></A><A NAME="23c06e4c"></A> <A NAME="23c06e43"></A> <A NAME="23c06e44"></A><A NAME="23c06e44"></A> <A NAME="23c06e45"></A><A NAME="23c06e45"></A> 
<P></P>
<A NAME="23c06e47"></A><B>DESCRIPTION  
<P></P>
<A NAME="23c06e48"></A></B>The Clause is added to the procedure with the same name and arity in the module that assert is called from. All uninstantiated variables are re-quantified in the clause
before it is added to the database, thus breaking any connection between the
original variables and those occurring in the clause in the database. Because of
this behavior, the order of calls to assert is important. For example, assuming
no clauses already exist for p/1, the first one of the following goals will fail, while the second succeeds.
<P></P>
<A NAME="23c06e49"></A>
<P></P>
<A NAME="23c06e4a"></A>?- X = a, assert(p(X)), p(b). 
<P></P>
<A NAME="23c06e4b"></A>
<P></P>
<A NAME="23c06e77"></A>no. 
<P></P>
<A NAME="23c06e6e"></A>?- assert(p(X)), X = a, p(b). 
<P></P>
<A NAME="23c06e6f"></A>X = a 
<P></P>
<A NAME="23c06e70"></A>
<P></P>
<A NAME="23c06e71"></A>yes. 
<P></P>
<A NAME="23c06e72"></A>The placement of a clause by assert/1  is defined by the implementation. asserta/1 always adds its clause before any other clauses in the same procedure, while assertz/1 always adds its clause at the end.  Each form of assert can take an optional
second argument (normally an uninstantiated variable) which is the database
reference corresponding to the clause that was added. :/2 can be used to specify in which module the assert should take place. The
database reference argument is normally passed as an uninstantiated variable. 
<P></P>
<A NAME="23c06e73"></A><B>EXAMPLES  
<P></P>
<A NAME="23c06e74"></A></B>The following example shows how the different forms of assert work:
<P></P>
<A NAME="23c06e75"></A>
<P></P>
<A NAME="23c06e76"></A>?- assert(p(a)), asserta(p(c)), assertz(p(b)). 
<P></P>
<A NAME="23c06ea2"></A>
<P></P>
<A NAME="23c06e99"></A>yes. 
<P></P>
<A NAME="23c06e9a"></A>?- listing(p/1). 
<P></P>
<A NAME="23c06e9b"></A>% user:p/1 
<P></P>
<A NAME="23c06e9c"></A>p(c). 
<P></P>
<A NAME="23c06e9d"></A>p(a). 
<P></P>
<A NAME="23c06e9e"></A>p(b). 
<P></P>
<A NAME="23c06e9f"></A>
<P></P>
<A NAME="23c06ea0"></A>yes. 
<P></P>
<A NAME="23c06ea1"></A>Notice that the order of the clauses in the database is different than the
order in which they were asserted. This is because the second assert was done with asserta/1, and the third assert was done with assertz/1. The asserta/1 call put the p(c) clause ahead of p(a) in the database. The assertz/1 call put p(b)at the end of the p/1 procedure, which happens to be after the p(a) clause. The next example demonstrates the use of parentheses in asserting a
rule into the Prolog database:
<P></P>
<A NAME="23c06ecd"></A>
<P></P>
<A NAME="23c06ec4"></A>?- assertz((magic(X):- wizard(X); pointGuard(X,lakers))). 
<P></P>
<A NAME="23c06ec5"></A>X = _1 
<P></P>
<A NAME="23c06ec6"></A>
<P></P>
<A NAME="23c06ec7"></A>yes. 
<P></P>
<A NAME="23c06ec8"></A>?- listing(magic/1). 
<P></P>
<A NAME="23c06ec9"></A>% user:magic/1 
<P></P>
<A NAME="23c06eca"></A>magic(_24) :- 
<P></P>
<A NAME="23c06ecb"></A>     wizard(_24) 
<P></P>
<A NAME="23c06ecc"></A>  ;  pointGuard(_24,lakers). 
<P></P>
<A NAME="23c06ef8"></A>
<P></P>
<A NAME="23c06eef"></A>yes. 
<P></P>
<A NAME="23c06ef0"></A>If the extra parentheses were not present, the Prolog parser would print the
following error message:
<P></P>
<A NAME="23c06ef1"></A>     
<P></P>
<A NAME="23c06ef2"></A>assertz(magic(X) :- wizard(X) ; pointGuard(X,lakers)). 
<P></P>
<A NAME="23c06ef3"></A>                 ^ 
<P></P>
<A NAME="23c06ef4"></A>Syntax Error:Comma or right paren expected in argument list. 
<P></P>
<A NAME="23c06ef5"></A>
<P></P>
<A NAME="23c06ef6"></A>The next example shows how the assert predicates can be used with modules. The first goal fails because there is no
module named animals.  After the module is created, the assertion is successful as you can see by
looking at the listing of the animals module.
<P></P>
<A NAME="23c06ef7"></A>     
<P></P>
<A NAME="23c02e22"></A>?- animals:assert(beast(prolog)).
<P></P>
<A NAME="23c02e19"></A>
<P></P>
<A NAME="23c02e1a"></A>no. 
<P></P>
<A NAME="23c02e1b"></A>?- [user]. 
<P></P>
<A NAME="23c02e1c"></A>Consulting user. 
<P></P>
<A NAME="23c02e1d"></A>  module animals. 
<P></P>
<A NAME="23c02e1e"></A>  endmod. 
<P></P>
<A NAME="23c02e1f"></A>  user consulted. 
<P></P>
<A NAME="23c02e20"></A>
<P></P>
<A NAME="23c02e21"></A>yes. 
<P></P>
<A NAME="23c02c9f"></A>?- animals:assert(beast(prolog)). 
<P></P>
<A NAME="23c02c96"></A>
<P></P>
<A NAME="23c02c97"></A>yes. 
<P></P>
<A NAME="23c02c98"></A>?- listing(animals:_). 
<P></P>
<A NAME="23c02c99"></A>% animals:beast/1 
<P></P>
<A NAME="23c02c9a"></A>beast(prolog). 
<P></P>
<A NAME="23c02c9b"></A>
<P></P>
<A NAME="23c02c9c"></A>yes. 
<P></P>
<A NAME="23c02c9d"></A>The following example shows the effects of adding clauses to procedures which
are part of the current goal:
<P></P>
<A NAME="23c02c9e"></A>
<P></P>
<A NAME="23c02cca"></A>?- assert(movie(jaws)), movie(X), assert(movie(jaws2)). 
<P></P>
<A NAME="23c02cc1"></A>X = jaws; 
<P></P>
<A NAME="23c02cc2"></A>
<P></P>
<A NAME="23c02cc3"></A>no. 
<P></P>
<A NAME="23c02cc4"></A>The reason this didn’t work is an implementation issue. The following is the
sequence of events illustrating what happened:
<P></P>
<A NAME="23c02cc5"></A><IMG SRC="Bullet.gif" ALT="Bullet.gif" BORDER=0 WIDTH=3 HEIGHT=7> First the assert(movie(jaws)) subgoal was run, causing a new procedure to be placed in the Prolog database.
<P></P>
<A NAME="23c02cc6"></A><IMG SRC="Bullet.gif" ALT="Bullet.gif" BORDER=0 WIDTH=3 HEIGHT=7>When the subgoal movie(X) was run, no choice point was created because there
were no other clauses to try if failure occurred.
<P></P>
<A NAME="23c02cc7"></A><IMG SRC="Bullet.gif" ALT="Bullet.gif" BORDER=0 WIDTH=3 HEIGHT=7>After movie(X) succeeded, the second clause of movie/1 was asserted, and the
initial goal succeeded, binding X to jaws.
<P></P>
<A NAME="23c02cc8"></A><IMG SRC="Bullet.gif" ALT="Bullet.gif" BORDER=0 WIDTH=3 HEIGHT=7>Backtracking was initiated by the ‘;’ response to the solution, but no second
solution was found for movie/1, even though there was a solution to be found.
This was because there was no choice point to return to in movie/1.
<P></P>
<A NAME="23c02cc9"></A>One of the interesting (and possibly bad) parts to this phenomenon is that the
second time this goal is run it will backtrack through the clauses of movie/1. This is shown below:
<P></P>
<A NAME="23c02cf5"></A>     
<P></P>
<A NAME="23c02cec"></A>?- listing(movie/1). 
<P></P>
<A NAME="23c02ced"></A>% user:movie/1 
<P></P>
<A NAME="23c02cee"></A>movie(jaws). 
<P></P>
<A NAME="23c02cef"></A>movie(jaws2). 
<P></P>
<A NAME="23c02cf0"></A>
<P></P>
<A NAME="23c02cf1"></A>yes. 
<P></P>
<A NAME="23c02cf2"></A>?- assert(movie(jaws)), movie(X), assert(movie(jaws2)). 
<P></P>
<A NAME="23c02cf3"></A>X = jaws; 
<P></P>
<A NAME="23c02cf4"></A>X = jaws2; 
<P></P>
<A NAME="23c02d20"></A>X = jaws; 
<P></P>
<A NAME="23c02d17"></A>X = jaws2; 
<P></P>
<A NAME="23c02d18"></A>X = jaws2; 
<P></P>
<A NAME="23c02d19"></A>X = jaws2 
<P></P>
<A NAME="23c02d1a"></A>
<P></P>
<A NAME="23c02d1b"></A>yes. 
<P></P>
<A NAME="23c02d1c"></A>The reason for this, is that there was more than one clause for movie/1 in the database this time, so a choicepoint was created for the movie(X) subgoal.  Incidentally, this goal would continue finding the
<P></P>
<A NAME="23c02d1d"></A>     
<P></P>
<A NAME="23c02d1e"></A>X = jaws2 
<P></P>
<A NAME="23c02d1f"></A>solution.  This is because every time the movie(X) finds a new solution, it succeeds, thus causing the
<P></P>
<A NAME="23c02d4b"></A>
<P></P>
<A NAME="23c02d42"></A>assert(movie(jaws2)) 
<P></P>
<A NAME="23c02d43"></A>subgoal to run. This adds another clause to the database to be tried when the
user causes backtracking by pressing semicolon (;).  If you look at the
conversation with the Prolog shell shown above, you will notice that the last solution
was accepted because no ‘;’ was typed after it. 
<P></P>
<A NAME="23c02d44"></A><B>ERRORS  
<P></P>
<A NAME="23c02d45"></A></B>Clauses must be either structured terms or atoms.  If clause is a rule, with a
principal functor of    :-/2, then the head and all the subgoals of the clause must either be atoms or
structured terms. 
<P></P>
<A NAME="23c02d46"></A><B>NOTES
<P></P>
<A NAME="23c02d47"></A></B>ALS Prolog provides a global variable mechanism separate from the Prolog
database.  Using global variables is much more efficient than using assert and retract.
<P></P>
<A NAME="23c02d48"></A><B>SEE ALSO  
<P></P>
<A NAME="23c02d49"></A></B>:/2,
<P></P>
<A NAME="23c02d4a"></A>[Bowen 91, 7.3], [Clocksin 81, 6.4], [Bratko 86, 7.4], [Sterling 86, 12.2]. 
<P></P>
</BODY>
</HTML>