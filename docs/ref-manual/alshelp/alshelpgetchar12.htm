<HTML>
<HEAD>
<TITLE>get_char/[1,2]</TITLE>
</HEAD><BODY>
<A NAME="10f6a7ee"></A>get_char/[1,2]
<P></P>
<A NAME="02c54fa0"></A><A NAME="00e76d69"></A>get_char/1 –  read a character from current input stream
<P></P>
<A NAME="02c54f97"></A>get_char/2 –  read character from a specific stream
<P></P>
<A NAME="02c54f98"></A><B>FORMS
<P></P>
<A NAME="02c54f99"></A></B>get_char(Char) 
<P></P>
<A NAME="02c54f9c"></A>get_char(Stream_or_Alias,Char) <A NAME="02c54f9a"></A><A NAME="02c54f9a"></A>   <A NAME="02c54f9b"></A>   
<P></P>
<A NAME="02c54f9d"></A><B>DESCRIPTION
<P></P>
<A NAME="02c54f9e"></A></B>get_char/1 will retrieve a character from the current input stream and unify it with Char.
<P></P>
<A NAME="02c54f9f"></A>get_char/2 will retrieve a character from the input stream associated with Stream_or_Alias and unify it with Char.
<P></P>
<A NAME="02c54fcb"></A>If there are no more data left in the stream to be read and if the stream has
the property eof_action(eof_code), then Code will be unified with end_of_file.
<P></P>
<A NAME="02c54fc2"></A><B>EXAMPLES
<P></P>
<A NAME="02c54fc3"></A></B>?- get_char(C1), get_char(C2), get_char(C3), get_char(C4).
<P></P>
<A NAME="02c54fc4"></A>test
<P></P>
<A NAME="02c54fc5"></A>
<P></P>
<A NAME="02c54fc6"></A>C1 = t
<P></P>
<A NAME="02c54fc7"></A>C2 = e
<P></P>
<A NAME="02c54fc8"></A>C3 = s
<P></P>
<A NAME="02c54fc9"></A>C4 = t
<P></P>
<A NAME="02c54fca"></A><B>ERRORS
<P></P>
<A NAME="02c54ff6"></A></B>Stream_or_Alias is a variable
<P></P>
<A NAME="02c54fed"></A>––––&gt;  instantiation_error.
<P></P>
<A NAME="02c54fee"></A>Stream_or_Alias is neither a variable nor a stream descriptor nor an alias
<P></P>
<A NAME="02c54fef"></A>––––&gt;  domain_error(stream_or_alias, Stream_or_Alias).
<P></P>
<A NAME="02c54ff0"></A>Stream_or_Alias is not associated with an open stream
<P></P>
<A NAME="02c54ff1"></A>––––&gt;  existence_error(stream,Stream_or_Alias).
<P></P>
<A NAME="02c54ff2"></A>Stream_or_Alias is not an input stream
<P></P>
<A NAME="02c54ff3"></A>––––&gt;  permission_error(input,stream,Stream_or_Alias).
<P></P>
<A NAME="02c54ff4"></A>Char is neither a variable nor a character
<P></P>
<A NAME="02c54ff5"></A>––––&gt;  type_error(character,Char). [See notes below]
<P></P>
<A NAME="02c5575a"></A>The stream associated with Stream_or_Alias is at the end of the stream and the stream has the property eof_action(error)
<P></P>
<A NAME="02c55751"></A>––––&gt;  existence_error(past_end_of_stream,Stream_or_Alias).
<P></P>
<A NAME="02c55752"></A>The stream associated with Stream_or_Alias has no input ready to be read and the stream has the property snr_action(error)
<P></P>
<A NAME="02c55753"></A>––––&gt;  existence_error(stream_not_ready,Stream_or_Alias).
<P></P>
<A NAME="02c55754"></A><B>NOTES
<P></P>
<A NAME="02c55755"></A></B>A character is simply an atom with length 1.  get_code/[1,2] is used to retrieve a character code.
<P></P>
<A NAME="02c55756"></A>If get_char/[1,2] is called with Char instantiated to a term which is not a character, an error will be thrown. 
The error thrown  though will in all likelyhood be from char_code/2, not get_char/[1,2].
<P></P>
<A NAME="02c55757"></A><B>SEE ALSO
<P></P>
<A NAME="02c55758"></A></B>put_char/2, get_code/2, open/4, close/1, char_code/2,
<P></P>
<A NAME="02c55759"></A>User Guide (Prolog I/O).
<P></P>
</BODY>
</HTML>