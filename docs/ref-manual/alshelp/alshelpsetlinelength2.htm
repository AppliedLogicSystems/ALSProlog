<HTML>
<HEAD>
<TITLE>set_line_length/2</TITLE>
</HEAD><BODY>
<A NAME="114be92e"></A><B>set_line_length/2
<P></P>
<A NAME="00e8726e"></A><A NAME="02bcc9ad"></A>set_line_length/2  | - set length of line for output stream
<P></P>
<A NAME="02bcc9ae"></A><A NAME="00e4ce09"></A>set_max_depth/2   | - set maximum depth that terms will be written to
<P></P>
<A NAME="02bcc9af"></A><A NAME="00e4ce0a"></A>set_depth_computation/2 | -  set method of computing term depth
<P></P>
<A NAME="02bcc9b0"></A><B>FORMS
<P></P>
<A NAME="02bcc9b1"></A></B>set_line_length(Stream_or_Alias,Length)
<P></P>
<A NAME="02bcc9b2"></A>set_maxdepth(Stream_or_Alias, Depth)
<P></P>
<A NAME="02bcc9b3"></A>set_depth_computation(Stream_or_Alias,Flat_Nonflat) <A NAME="02bcc9b4"></A><A NAME="02bcc9b4"></A> <A NAME="02bcc9b5"></A><A NAME="02bcc9b5"></A> <A NAME="02bcc9e1"></A><A NAME="02bcc9e1"></A> 
<P></P>
<A NAME="02bcc9d8"></A><B>DESCRIPTION
<P></P>
<A NAME="02bcc9d9"></A></B>set_line_length/2 sets the default line length for the output stream associated with Stream_or_Alias to the integer value bound to Length.  The default line length is an integer parameter used by writeq/[1,2], write_canonical/[1,2], and write_term/[2,3] to determine where line breaks should occur when outputting a term.  A call
to write_term may temporarily overide this parameter by specifying the line_length option in the write options list.  The default line length may also be set at
the time the stream is opened by specifying the line_length option in the options list to open/[3,4].
<P></P>
<A NAME="02bcc9da"></A>set_maxdepth/2 sets the default depth limit to which terms are output for the output stream
associated with Stream_or_Alias to the integer value bound to Depth.  The default depth limit is used by the
term output predicates to determine the maximum depth to write to.  This
parameter may also be set at the time of an open with the appropriate open option and
may be overridden in calls to write_term/[3,4] with the appropriate write option.
<P></P>
<A NAME="02bcc9db"></A>set_depth_computation/2 sets the manner in which the depth of a term is computed for the output
stream associated with Stream_or_Alias to the atomic value bound to Flat_Nonflat.  As the name of the variable implies, Flat_Nonflat must be bound to one of the two atoms, flat or nonflat.  If the depth computation method is flat, all arguments in a structured term and all list elements are considered to
be at the same level.  If the method is nonflat, then each subsequent structure argument or list element is considered to be
at a depth one greater than the previous element.
<P></P>
<A NAME="02bcc9dc"></A><B>EXAMPLES  
<P></P>
<A NAME="02bcc9dd"></A></B>?- set_line_length(user_output,20),
<P></P>
<A NAME="02bcc9de"></A>?-_L=[a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z],
<P></P>
<A NAME="02bcc9df"></A>?-_write(L),nl.
<P></P>
<A NAME="02bcc9e0"></A>[a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z]
<P></P>
<A NAME="02bcca0c"></A>
<P></P>
<A NAME="02bcca03"></A>L = [a,b,c,d,e,f,g,
<P></P>
<A NAME="02bcca04"></A>        h,i,j,k,l,
<P></P>
<A NAME="02bcca05"></A>        m,n,o,p,q,
<P></P>
<A NAME="02bcca06"></A>        r,s,t,u,v,
<P></P>
<A NAME="02bcca07"></A>        w,x,y,z]
<P></P>
<A NAME="02bcca08"></A>         
<P></P>
<A NAME="02bcca09"></A>?- set_maxdepth(user_output,8),                                      
<P></P>
<A NAME="02bcca0a"></A>?-_set_depth_computation(user_output,nonflat),
<P></P>
<A NAME="02bcca0b"></A>?-_L=[a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z],
<P></P>
<A NAME="02bcca37"></A>?-_write(L),nl.
<P></P>
<A NAME="02bcca2e"></A>[a,b,c,d,e,f,g,h,...]
<P></P>
<A NAME="02bcca2f"></A>
<P></P>
<A NAME="02bcca30"></A>L = [a,b,c,d,e,f,
<P></P>
<A NAME="02bcca31"></A>          g,...]
<P></P>
<A NAME="02bcca32"></A><B>ERRORS
<P></P>
<A NAME="02bcca33"></A></B>Stream_or_Alias is a variable
<P></P>
<A NAME="02bcca34"></A>––––&gt;  instantiation_error.
<P></P>
<A NAME="02bcca35"></A>Stream_or_Alias is neither a variable nor a stream descriptor nor an alias
<P></P>
<A NAME="02bcca36"></A>––––&gt;  domain_error(stream_or_alias,Stream_or_Alias).
<P></P>
<A NAME="02bcca62"></A>Stream_or_Alias is not associated with an open stream
<P></P>
<A NAME="02bcca59"></A>––––&gt;  existence_error(stream,Stream_or_Alias).
<P></P>
<A NAME="02bcca5a"></A>Stream_or_Alias is not an output stream
<P></P>
<A NAME="02bcca5b"></A>––––&gt;  permission_error(output,stream,Stream_or_Alias).
<P></P>
<A NAME="02bcca5c"></A>Length, Depth, or Flat_or_Nonflat is a variable
<P></P>
<A NAME="02bcca5d"></A>––––&gt;  instantiation_error.
<P></P>
<A NAME="02bcca5e"></A>Length is not a variable or an integer
<P></P>
<A NAME="02bcca5f"></A>––––&gt;  type_error(integer,Length)
<P></P>
<A NAME="02bcca60"></A>Length is not an integer greater than four
<P></P>
<A NAME="02bcca61"></A>––––&gt;  domain_error(line_length,Length)
<P></P>
<A NAME="02bcca8d"></A>Depth is not a variable or an integer
<P></P>
<A NAME="02bcca84"></A>––––&gt;  type_error(integer,Depth)
<P></P>
<A NAME="02bcca85"></A>Depth is an integer, but not a positive integer
<P></P>
<A NAME="02bcca86"></A>––––&gt;  domain_error(positive_integer,Depth)
<P></P>
<A NAME="02bcca87"></A>Flat_or_Nonflat is neither a variable nor an atom
<P></P>
<A NAME="02bcca88"></A>––––&gt;  type_error(atom,Flat_or_nonflat)
<P></P>
<A NAME="02bcca89"></A>Flat_or_Nonflat is an atom, but is neither flat nor nonflat
<P></P>
<A NAME="02bcca8a"></A>––––&gt;  domain_error(depth_computation,Flat_or_nonflat)
<P></P>
<A NAME="02bcca8b"></A>
<P></P>
<A NAME="02bcca8c"></A><B>NOTES
<P></P>
<A NAME="02bccab8"></A></B>Note in the above examples that write/[1,2] does not pay attention to the line length.  It does however, observe the
default maximum depth and the method for computing the depth.
<P></P>
<A NAME="02bccaaf"></A><B>SEE ALSO  
<P></P>
<A NAME="02bccab0"></A></B>stream_property/2, open/4, write_term/3, <I>User Guide (Prolog I/O).</I> 
<P></P>
</BODY>
</HTML>
