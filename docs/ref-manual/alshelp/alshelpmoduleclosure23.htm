<HTML>
<HEAD>
<TITLE>module_closure/[2,3]</TITLE>
</HEAD><BODY>
<A NAME="4227dde1"></A><B>module_closure/[2,3]
<P></P>
<A NAME="43fc1f24"></A><A NAME="4227dde7"></A></B>module_closure/2 –  creates a module closure
<P></P>
<A NAME="43fc1f25"></A>module_closure/3 –  creates a module closure for the specified procedure
<P></P>
<A NAME="43fc1f26"></A><B>FORMS
<P></P>
<A NAME="43fc1f27"></A></B>:- module_closure(Name,Arity,Procedure). 
<P></P>
<A NAME="43fc1f53"></A>:- module_closure(Name,Arity). 
<P></P>
<A NAME="43fc1f4a"></A><B>DESCRIPTION  
<P></P>
<A NAME="43fc1f4b"></A></B>For some Prolog procedures, it is essential to know the module within which
they are invoked.  For example, setof/3 must invoke the goal in its second argument relative to the correct module.
The problem is that setof/3 is defined in module builtins, while it may invoked in some other module which is where the code defining
the goal in the second argument should be run.  In reality, setof/3 is defined as the module closure of another predicate setof/4 (whose definition appears in the builtins module). The extra argument to setof/4 is the module in which the goal in the second argument of setof/3 is to be run. Declaring setof/3 to be a module closure of setof/4 means that goals of the form
<P></P>
<A NAME="43fc1f4c"></A>    
<P></P>
<A NAME="43fc1f4d"></A>...,setof(X, G, L),... 
<P></P>
<A NAME="43fc1f4e"></A>are automatically expanded to goals of the form
<P></P>
<A NAME="43fc1f4f"></A>    
<P></P>
<A NAME="43fc1f50"></A>...,setof(M, X, G, L),... 
<P></P>
<A NAME="43fc1f51"></A>where M is the current module; i.e., the module in which the original call took
place. Thus setof/4 is supplied with the correct module M in which to run the goal in the second argument of the original call to setof/3. 
<P></P>
<A NAME="43fc1f52"></A>The actual predicate that you write should expect to receive the calling
module as its first argument. Then one ‘closes’ the predicate with a module closure
declaration which suppresses the first (module) argument. The arguments to module_closure/3 are as follows:
<P></P>
<A NAME="43fc1f7e"></A><IMG SRC="images/Bullet.gif" ALT="images/Bullet.gif" BORDER=0 WIDTH=3 HEIGHT=7> Name is the name of the procedure the user will call.
<P></P>
<A NAME="43fc1f75"></A><IMG SRC="images/Bullet.gif" ALT="images/Bullet.gif" BORDER=0 WIDTH=3 HEIGHT=7>Arity is the number of arguments of the user procedure; that is, the number of
arguments in the ‘closed’ procedure which the user procedure will call.
<P></P>
<A NAME="43fc1f76"></A><IMG SRC="images/Bullet.gif" ALT="images/Bullet.gif" BORDER=0 WIDTH=3 HEIGHT=7>Procedure is the name of the (unclosed) procedure to call with the additional
module argument. Note that Procedure can be different than Name, although they
are often the same.
<P></P>
<A NAME="43fc1f77"></A>The procedure that the user will call should be exported if it is contained
within a module. The actual (unclosed) procedure does not need to be exported.  module_closure/2 simply identifies the first and third arguments of module_closure/3.  That is, the command
<P></P>
<A NAME="43fc1f78"></A>
<P></P>
<A NAME="43fc1f79"></A>:- module_closure(foo,5). 
<P></P>
<A NAME="43fc1f7a"></A>is equivalent to
<P></P>
  <A NAME="43fc1f7b"></A>:- module_closure(foo,5,foo). 
<P></P>
<A NAME="43fc1f7c"></A><B>EXAMPLES  
<P></P>
<A NAME="43fc1f7d"></A></B>The following example illustrates the use of module_closure/3.  First assume that the following three modules have been created and loaded:
<P></P>
<A NAME="43fc1fa9"></A>module m1. 
<P></P>
<A NAME="43fc1fa0"></A>use m3. 
<P></P>
<A NAME="43fc1fa1"></A> 
<P></P>
<A NAME="43fc1fa2"></A>export testA/1. 
<P></P>
<A NAME="43fc1fa3"></A>testA(X) :- leading(X). 
<P></P>
<A NAME="43fc1fa4"></A>p(tom). 
<P></P>
<A NAME="43fc1fa5"></A>p(dick). 
<P></P>
<A NAME="43fc1fa6"></A>p(harry). 
<P></P>
<A NAME="43fc1fa7"></A>endmod. % m1
<P></P>
<A NAME="43fc1fa8"></A>
<P></P>
<A NAME="43fc1fd4"></A>module m2. 
<P></P>
<A NAME="43fc1fcb"></A>use m3. 
<P></P>
<A NAME="43fc1fcc"></A> 
<P></P>
<A NAME="43fc1fcd"></A>export testB/1. 
<P></P>
<A NAME="43fc1fce"></A>testB(X) :- leading(X). 
<P></P>
<A NAME="43fc1fcf"></A>p(sally). 
<P></P>
<A NAME="43fc1fd0"></A>p(jane). 
<P></P>
<A NAME="43fc1fd1"></A>p(martha). 
<P></P>
<A NAME="43fc1fd2"></A>endmod. % m2
<P></P>
<A NAME="43fc1fd3"></A>
<P></P>
<A NAME="43fc1fff"></A>module m3. 
<P></P>
<A NAME="43fc1ff6"></A>leading(X) :- p(X). 
<P></P>
<A NAME="43fc1ff7"></A>endmod. % m3
<P></P>
<A NAME="43fc1ff8"></A>Attempting to run either testA or testB fails:
<P></P>
<A NAME="43fc1ff9"></A>?- testA(X). 
<P></P>
<A NAME="43fc1ffa"></A>
<P></P>
<A NAME="43fc1ffb"></A>no. 
<P></P>
<A NAME="43fc1ffc"></A>?- testB(X). 
<P></P>
<A NAME="43fc1ffd"></A>
<P></P>
<A NAME="43fc1ffe"></A>no. 
<P></P>
<A NAME="43fc202a"></A>This is because the call to p(X) runs in module m3 which has no clauses defining p/1. Now let us change module m3 to read as follows:
<P></P>
<A NAME="43fc2021"></A>module m3. 
<P></P>
<A NAME="43fc2022"></A>first(M,X) :-  M:p(X). 
<P></P>
<A NAME="43fc2023"></A> 
<P></P>
<A NAME="43fc2024"></A>export leading/1. 
<P></P>
<A NAME="43fc2025"></A>:- module_closure(leading,1,first). 
<P></P>
<A NAME="43fc2026"></A>endmod. 
<P></P>
<A NAME="43fc2027"></A>We have defined a new predicate first/2 which carries a module as its first argument and which makes the call to p(X) in that module.  And we have specified that leading/1 is the module closure of first/2.  Now the calls succeed:
<P></P>
<A NAME="43fc2028"></A>?- testA(X). 
<P></P>
<A NAME="43fc2029"></A>X = tom 
<P></P>
<A NAME="43fc278e"></A>yes. 
<P></P>
<A NAME="43fc2785"></A>?- testB(X). 
<P></P>
<A NAME="43fc2786"></A>X = sally 
<P></P>
<A NAME="43fc2787"></A>yes. 
<P></P>
<A NAME="43fc2788"></A>Note that we exported leading/1 from module m3, and both module m1 and module m2 were declared to use module m3. 
<P></P>
<A NAME="43fc2789"></A><B>SEE ALSO  
<P></P>
<A NAME="43fc2604"></A></B>:/2, <I>User Guide (Modules)</I>.
<P></P>
</BODY>
</HTML>
