<HTML>
<HEAD>
<TITLE>recorda/3</TITLE>
</HEAD><BODY>
<A NAME="82df64c6"></A><B>recorda/3
<P></P>
<A NAME="84bae692"></A><A NAME="82df64f7"></A></B>recorda/3 –  records item in internal term database
<P></P>
<A NAME="82e06f5c"></A><A NAME="84bae693"></A>recordz/3 –  records item in internal term database
<P></P>
<A NAME="84b76013"></A><A NAME="82e06f88"></A>recorded/3 –  retrieves item from internal term database
<P></P>
<A NAME="84b76014"></A><B>FORMS
<P></P>
<A NAME="84b76015"></A></B>recorda(Key,Term,Ref) 
<P></P>
<A NAME="84b76016"></A>recordz(Key,Term,Ref) 
<P></P>
<A NAME="84b76018"></A>recorded(Key,Term,Ref) <A NAME="84b76017"></A><A NAME="84b76017"></A> 
<P></P>
<A NAME="84b76019"></A><B>DESCRIPTION  
<P></P>
<A NAME="84b7601a"></A></B>Key may be an atom or a compound term, but in the latter case, only its functor
is significant.  Both predicates will fail in all other cases of Key.  recorda(Key,Term,Ref) enters Term into the internal term database at the first item associated with Key, and returns a database reference Ref.   recordz(Key,Term,Ref) enters Term as the last item associated with Key.  
<P></P>
<A NAME="84b7601b"></A>recorded(Key,Term,Ref) searches the internal term database for an item Term associated with Key such that the associated database reference unifies with Ref. 
<P></P>
<A NAME="84b76047"></A><B>EXAMPLES  
<P></P>
<A NAME="84b7603e"></A></B>?-recordz(sing, slowly, _), 
<P></P>
<A NAME="84b7603f"></A>  recorda(sing, sweetly, _), 
<P></P>
<A NAME="84b76040"></A>  recorda(sing(along), loudly, _). 
<P></P>
<A NAME="84b76041"></A>yes. 
<P></P>
<A NAME="84b76042"></A>
<P></P>
<A NAME="84b76043"></A>?-recorded(sing, Term, _). 
<P></P>
<A NAME="84b76044"></A>Term = loudly; 
<P></P>
<A NAME="84b76045"></A>Term = sweetly; 
<P></P>
<A NAME="84b76046"></A>Term = slowly; 
<P></P>
<A NAME="84b76072"></A>no. 
<P></P>
<A NAME="84b76069"></A><B>NOTES  
<P></P>
<A NAME="84b7606a"></A></B> Provided for compatibility; these predicates are defined by:
<P></P>
<A NAME="84b7606b"></A>   recorda(Key,Term,Ref) :- 
<P></P>
<A NAME="84b7606c"></A>      rec_getkey(Key,KeyFuncotr), 
<P></P>
<A NAME="84b7606d"></A>      asserta(recorded(KeyFuncotr,Term),Ref). 
<P></P>
<A NAME="84b7606e"></A>   
<P></P>
<A NAME="84b7606f"></A>   recordz(Key,Term,Ref) :- 
<P></P>
<A NAME="84b76070"></A>      rec_getkey(Key,KeyFunctor), 
<P></P>
<A NAME="84b76071"></A>      assertz(recorded(KeyFunctor,Term),Ref). 
<P></P>
<A NAME="84b7609d"></A>   
<P></P>
<A NAME="84b76095"></A>   recorded(Key,Term,Ref) :- 
<P></P>
<A NAME="84b76096"></A>      rec_getkey(Key,KeyFunctor), 
<P></P>
<A NAME="84b76097"></A>      clause(recorded(KeyFunctor,Term), true, Ref). 
<P></P>
<A NAME="84b76098"></A>   
<P></P>
<A NAME="84b76099"></A>   rec_getkey(Key, Key) :- atomic(Key), !. 
<P></P>
<A NAME="84b7609a"></A>   rec_getkey(S,Key) :- functor(S,Key,_).  
<P></P>
</BODY>
</HTML>