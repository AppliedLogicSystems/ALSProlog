Files in this folder:
====================

About.txt     - this file
als_help.html - "open als_help.html" invokes the als help system in the default browser
alshelp/      - development folder containing the individual html pages for als help    
		    Also contains table of contents files:
			toc_core_prolog.html, toc_alsdev.html
		    Subdir: images
alshelp.css   - for als_help.html
checklist.txt - temp: used to manage the cleanup process
docsdb_alsdev.pro      - db for toc file generation; see doctools.pro: toc_from_docsdb/0
docsdb_core_prolog.pro - db for toc file generation; see doctools.pro: toc_from_docsdb/0
doctools.pro  - tools for working with alshelp; primary predicates:
                     toc_from_docsdb - write out tables of contents
                     new_page(Path)  - creates skeletal new *.md page
                     idx_page(Path)  - indexes (toc) a new *.md page
md_help/      - folder containing source *.md files which is converted 
		    during development to folder alshelp via sing2html.sh
		    Also contains sed-related files:
			fixup.sed - contains sed commands to apply (mostly deleting spaces)
			sedall.sh - applies fixup.sed to all *.md files
			1sed.sh   - applies fixup.sed to a single ($1) *.md file
missingOrBadDoc.txt    - Notes about problems
nnp.np        - bare empty skelton for a new *.md file; created by doctools.pro: mknnp/0.
np_for_curl.np    - Example: a fleshed out version of nnp.np for curl; 
                             for running doctools.pro:new_page/1 to generate curl123.md
package_nav.html  - for als_help.html
searchhelp.js     - for als_help.html
sing2html.sh      - (see internal doc) applies pandoc to map a md_help/$1.md to alshelp/$1.html

---------------
Possibly, when development is stable, these can be moved into ~alshelp:
    alshelp.css
    package_nav.html
    searchhelp.js
---------------
How to add a new alshelp *.md page:
1.  If nnp.np has been corrupted or deleted, run doctools.pro: mknnp/0 to write a new copy;
2.  Rename the empty nnp.np, and use an editor to insert all the necessary info (cf.np_for_curl.np);
3.  If <xx.yy> is the renamed and fleshed out nnp.np, run 
	doctools.pro: new_page(<xx.yy>)
    At this point, the partially skeletal *.md for <xx.yy> has been created, and all
    the appropriate info has been entered in the appropriate db: 
	docsdb_[core_prolog,alsdev].pro
4.  Then run 
	doctools.pro: idx_page(<xx.yy>)
    This enters <xx.yy> in the right toc index for its package.
---------------
Getting tables of documented/undocumented builtins, and library files:
1.  Execute exprtd_blts.sh 
2.  The various tables are in ResultDir:
Undocumented builtins predicates which are exported:
	undocd_exported_by_pred.txt
	undocd_exported_by_bi_file.txt
Documented builtins predicates which are exported:
	docd_blts_by_pred.txt           
	docd_blts_by_bi_file.txt        
	docd_blts_by_md_file.txt        
Documented vs Undocumented vs Inactive Library files:
	Library_Files_Status.txt        
---------------
How I've been working:
1. Open 1 terminal window(B) in ~src_help_md, and one(A) in ~src_help_md/md_help.
2. In B, execute: open als_help.html
3. Select a ~src_help_md/md_help/<Work>.md file to examine and fixup;
4. In A, I open <Work>.md in vi;
5. In B, execute sing2html.sh <Work> (no .md extension); this applies pandoc and now
	there will be a file ~src_help_md/alshelp/<Work>.html; 
	You don't have to look in ~alshelp though; 
	In the als_help.html window, select the right package at top, scroll the lower
	left pane until you see <Work> and just click on it;
6. Now I just cycle:
	(From step 4): in vi, make a change to <Work>.md
	(As in step 5): sing2html.sh <Work>
	Click on <Work> in the left side of the als_help.html window
	Etc. 
7. When <Work> is completely fixed, I check if off in checklist.txt.
---------------
Jekyll Workflow:
0. In terminal B, in docs dir, run: bundle exec jekyll serve
1. In terminal A, edit docs/src_help_md/md_help/<Work>.md, save.
2. In browser, examine <Work> page from http://127.0.0.1:4000/ref-manual/
3. Cycle back to 1
