NAME
	$uia_alloc/2 	-- 	Allocate an UIA

FORMS
	$uia_alloc(Size,UIA)

DESCRIPTION
	This predicate creates a new UIA on the heap and unifies that UIA
	with the second argument. The given size must be a positive non-zero
	integer and it must be less than the maximum UIA size (currently 1024).
	The actual size of the allocated UIA will be the number which is
	between Size+1 and Size+4 and divisible by four. The allocated UIA
	buffer will be filled with zeroes. 
	(The reason that we allocate one extra byte is that we still want
	to use UIAs as symbols. The last byte of an UIA is always zero.)

EXAMPLE
	The following goal will be allocate an UIA on the heap.

	?- $uia_allocate(5,X).

	The actual size of the allocated UIA will be 8.


     

NAME
	$uia_size/2 	-- 	Get the actual size of UIA

FORMS
	$uia_size(UIA,Size)

DESCRIPTION
	This predicate gets the actual size of the given UIA.




NAME
	$uia_clip/2 	-- 	Clip the given UIA

FORMS
	$uia_clip(UIA,Size)

DESCRIPTION
	This predicate clips the given UIA. The given clip size must be
	less than the actual size of the given UIA. This predicate is
	generally is used to shrink UIAs. 

EXAMPLE

	?- $uia_alloc(7,UIA), 
	   $uia_size(UIA,OriginalSize),
	   $uia_clip(X,3),
	   $uia_size(UIA,SizeAfterClip).
	
	UIA = ''
	OriginalSize = 8
	SizeAfterClip = 4 

	yes.




NAME
	$uia_peekb/3 	-- 	Peek a byte from the given UIA
	$uia_peekw/3 	-- 	Peek a word from the given UIA
	$uia_peekl/3 	-- 	Peek a long word from the given UIA
	$uia_peekd/3 	-- 	Peek a double from the given UIA

FORMS
	$uia_peekb(UIA,Offset,Value)
	$uia_peekw(UIA,Offset,Value)
	$uia_peekl(UIA,Offset,Value)
	$uia_peekd(UIA,Offset,Value)

DESCRIPTION
	These predicates peek a byte, a word, a long word and a double
	from given UIAs. You can peek any byte of an UIA including the
	last byte (which is always zero). Offset gives the byte offset
	of the item to be peeked and it must be between 0 and 
	Size-sizeof(item). (The offset of the first byte in an UIA
	is zero).




NAME
	$uia_pokeb/3 	-- 	Poke a byte into the given UIA
	$uia_pokew/3 	-- 	Poke a word into the given UIA
	$uia_pokel/3 	-- 	Poke a long word into the given UIA
	$uia_poked/3 	-- 	Poke a double into the given UIA

FORMS
	$uia_pokeb(UIA,Offset,Value)
	$uia_pokew(UIA,Offset,Value)
	$uia_pokel(UIA,Offset,Value)
	$uia_poked(UIA,Offset,Value)

DESCRIPTION
	These predicates poke a byte, a word, a long word and a double
	into given UIAs. You can poke any byte of an UIA except that
	the last byte. Offset gives the byte offset of the item to be poked
	and it must be between 0 and Size-sizeof(item)-1.




NAME
	$uia_peek/4 	-- 	Peek a region of the given UIA

FORMS
	$uia_peek(UIA,Offset,Size,Value)

DESCRIPTION
	This predicate peeks a region of the given UIA starting from
	the given 'Offset' with the given 'Size'. The peeked region
	will be returned as a new UIA. Of course, the region defined
	by 'Offset' and 'Size' must be in the given UIA.




NAME
	$uia_poke/4 	-- 	Poke a region of the given UIA

FORMS
	$uia_poke(UIA,Offset,Size,Value)

DESCRIPTION
	This predicate pokes the region of the given UIA defined by
	'Offset' and 'Size' by copying characters from the given
	UIA (or symbol). The region must be in the given UIA and cannot 
	contain the last byte of the UIA. The size of the atom or UIA
	in the last argument must be at least equal to 'Size'. The region
	copied from 'Value' is defined by offset 0 and 'Size'.




NAME
	$uia_peeks/3 	-- 	Peek a string from the given UIA
	$uia_peeks/4 	-- 	Peek a string from the given UIA
	
FORMS
	$uia_peeks(UIA,Offset,Symbol)
	$uia_peeks(UIA,Offset,Size,Symbol)

DESCRIPTION
	These predicates peek a symbol from given UIAs. The 3-argument
	version of this predicate peeks the symbol starting from 'Offset'
	in the given UIA. The 4-argument version guarantees that the size
	the peeked symbol won't be more than 'Size'.




NAME
	$uia_pokes/3 	-- 	Poke the given string into the given UAI

FORMS
	$uia_pokes(UIA,Offset,Symbol)

DESCRIPTION
	This predicate pokes the given symbol pokes the given symbol
	into the given UIA starting from 'Offset'.




NAME
	$strlen/2 	-- 	String length

FORMS
	$strlen(Symbol,Size)

DESCRIPTION
	This predicate gets the string length of the given symbol.
	(Not including zero at the endo string).


