%
% This file gives a technical description of the disassembler written
% for the packaging system.
%
% Author : Ilyas Cicekli
% Date   : 8/22/1989
%

The disassembler disassembly given code sections of name table entries
and compiled clauses. The top level procedure for the disassembler
is "pckg_listasm". This procedure takes start address and size of
code area which will be disassemblied as input. And, it disassemblies
that code section. The disassemblied code is written in the current
output stream.

The disassembler doesn't produce for symbolic representations
for instructions. It produces a list of pseudo assembly data
definition instructions to guarantee that when those instructions
are assemblied, we will get the same code. There is a chance (more than 
a chance) that if we produce symbolic definitions for instructions, 
when they are assemblied again by an assembler, produced code may not be 
the same code produced by the ALS-Prolog compiler. As summary, 
we have to guarantee that an assembler will produce the same code 
produced by the ALS-Prolog compiler from a disassemblied name table entry 
or clause.

For example, a disassemblied code patch will look as follows.
(For PharLap 386 Assembler)

	;  call *OverflowPtr
		db 	0ffh,015h
		dd 	OverflowPtr
	; push ebp 	( push E register)
		db 	055h

In fact, the code above represents a part of a name table entry.

As seen at the code above, we only produce symbolic names for relocatable
objects. The relocatable objects are:

	1. Addresses of certain procedures and variables which can occur 
	   in the code produced by the ALS-Prolog compiler.
	2. Clause and name table entry addresses.

When the disassembler encounters an addresses that it has to produce
a symbolic name, it calls the function "resolveaddr" to produce 
that symbolic name. 

The function "resolveaddr" checks the given address points to
a name table entry or a compiled clause. If it is not, it
searches a list of procedure addresses and variable addresses to get
the name of that procedure or variable. For example, "OverflowPtr"
is a name of a variable in the code above.

If it points to a name table entry or a compiled clause, the function
"resolveaddr" should find out the type of that address before it
produces a symbolic name. The function "resolveaddr"
use two kind of information to decide the type of a code pointer.

	1. Possible Resolve Type:
	   A variable "resolvetype" is set to hold a possible resolve type.
	   Possible types are:
		a. RTYP_NTBLENTRY : a name table entry address which
			can be one of "call", "exec", or "code" entries of
			a name table entry.
		b. RTYP_CLAUSE : a clause entry address which can be one of
			"choice" or "code" entries of a clause.
		c. RTYP_CHOICEENTRY : a "choice" entry of a clause.
		d. RTYP_DSTART : a "dstart" entry of a clause.
	   This narrows down possible types for an address.
	2. The content of location pointed by the address. 
	    We look at the content of a location pointed by a code
	    pointer which points at a name table entry  (we have already 
	    determined that it points to a name table entry by resolve type) 
	    to determine whether that code pointer points at
	    "call", "exec", or "code" entry of a name table entry.

This two conditions above exactly determine the type of an address.



