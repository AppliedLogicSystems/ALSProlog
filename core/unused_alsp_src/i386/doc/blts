   

NAME

     $access/2	-- the given file is accessible with the given mode


FORMS

     $access(FileName,AccessMode)


DESCRIPTION

     Checks whether the given file is accessible or not with the given mode.
     "AccessMode" should be one of the followings:

	  4 : write
	  2 : read
	  0 : existence

     Although access modes above are used in UNIX systems,
     they are ignored in DOS systems. In DOS systems, the file 
     is only checked whether it is read accessible or not.


NOTE 

     "FileName" can be a symbol, an uia, or a list of ASCII characters.






NAME

     $chdir/1  -- changes the current directory to the specified directory


FORMS

     $chdir(DirName)


DESCRIPTION

     The current directory is changed to the specified directory.
     If the current directory cannot be changed to the given directory for
     any reason, this predicate fails.


NOTE

     "DirName" can be a symbol, an uia, or a list of ASCII characters.
     





NAME

     $clauseinfo/3  -- gets information about the given clause


FORMS

     $clauseinfo(ClauseDBRef,NextClauseDBRef,ProcNTBLIndex)


DESCRIPTION

     The data base reference of the next clause in the procedure after 
     the given clause is unified with the second argument of this predicate.
     The name table index of the procedure which contains the given clause
     is also unified with the third argument. The first argument must be
     a valid clause data base reference in the system.







NAME

     $exported_proc/3   -- checks whether the given procedure is exported or not


FORMS

     $exported_proc(Module,Pred,Arity)


DESCRIPTION

     If the procedure whose module name, predicate name, and arity are given
     is exported, this predicate succeeds. Otherwise it fails.






NAME

     $findterm/5  -- finds the given term


FORMS

     $findterm(Functor,Arity,HeapPos,Term,NewHeapPos)


DESCRIPTION

     The term whose functor and arity are given is searched in the heap
     starting from the given heap position. If it is found, the fourth argument
     is unified with the found term in the heap, and the fifth argument
     is unified with a pointer which points next location after the found
     term in the heap. Heap positions are offsets with respect to 
     the heap base. If the term cannot be found, this predicate fails.






NAME

     $firstargkey/2  -- matches the first argument key


FORMS

     $firstargkey(ClauseDBRef,FirstArgKey)


DESCRIPTION

     If the first argument of the clause whose data base reference is given
     matches to the given first argument key, this predicate succeeds.
     Otherwise it fails. The first argument of the clause is NOT unified
     with the given first argument key. If the first argument key
     is a term, we only try to match its functor and its arity.
     On other words, if its functor and its arity matches with those of
     the first argument of the clause, this predicate succeeds.
     This predicate is used to filter certain clauses in the implementation
     of retract before a clause is decompiled. So that, we don't need
     to compile all clauses of a procedure.






NAME

     $getenv/2  --  gets the value of the given environment


FORMS

     $getenv(EnvVar,EnvVal)


DESCRIPTION

     Gets the environment value of the given environment variable.


NOTE

     "EnvVar" can be a symbol, an uia, or a list of ASCII characters.
     "EnvVal" will be a list of ASCII characters.







NAME

     $icode/5  -- executes the given icode operation


FORMS

     $icode(OpCode,Arg1,Arg2,Arg3,Arg4)


DESCRIPTION

     Executes the given icode operation with the given arguments. 
     This predicate normally is used to execute negative icode operations
     from Prolog environment.


NOTE

     "OpCode", "Arg2" and "Arg4" must be an integer, and "Arg1" and "Arg3"
     must be an integer or a symbol.







NAME

     $load/2  -- loads the given file


FORMS

     $load(File,ReconsultFlag)


DESCRIPTION

     Consults or reconsults the given file depending on the given flag.
     If the given file doesn't have an extension and has a newer
     version of "obp" file, its "obp" file is loaded. Otherwise its
     "pro" file is loaded. If the given file has an extension, that
     specified file is directly loaded.


NOTE

     "File" can be a symbol, an uia, or a list of ASCII characters.
     "ReconsultFlag" can be 1 or 0.







NAME

     $next_module/4  -- gets next module in the module table


FORMS

     $next_module(PreModTblIndex,ModTblIndex,Module,UseList)


DESCRIPTION

     Gets the module name, the use list and the module table index of
     the module whose module table index immediately follows the given
     module table index. If the given module table index ("PreModTblIndex")
     is -1, the first module in the module table is returned.
     If "PrModTblIndex" is out of the limits of the module table,
     this predicate fails.






NAME

     $nextproc/3  -- gets next procedure in the name table


FORMS

     $nextproc(PreNTblIndex,Flag,NTblIndex)


DESCRIPTION

     Gets the name table index of the next name table entry which is the first
     name table entry after the given name table entry ("PreNTblIndex").
     If "PreNTblIndex" is -1, the first name table entry index is returned.
     "Flag" determines the type of the chosen next name table entry.
     Following actions are taken depending on the value of "Flag".

	  Flag=0    the index of the next Prolog procedure name table entry
		    is returned.
          Flag=1    the index of the next Prolog or C procedure name table
		    entry is returned.
          Flag=2    The index of the next name table entry regardless to 
		    its type is returned.

     On other words, "Flag" is used to chose only Prolog procedures (Flag=0),
     or to chose only procedures written in Prolog or C (Flag=1), or
     to chose all name table entries (Flag=2).








NAME

     $procinfo/5  -- gets information about the given procedure


FORMS

     $procinfo(NTblIndex,Module,Pred,Arity,DBRef)


DESCRIPTION

     Gets the module name, the predicate name, the arity, and the data base
     reference of the given name table entry. If the given name table
     entry is a Prolog procedure, the returned data base reference is the
     data base reference of its first clause. If it is not a Prolog
     procedure, 0 will be returned as a data base reference.
     If "NTblIndex" is variable, and "Module", "Pred" and "Arity" are
     bound values, the name table entry of that procedure is accessed with
     those three values.







NAME

     $resolve_module/4  -- finds module which exports the given procedure 


FORMS

     $resolve_module(Module,Pred,Arity,ImportedFrom)


DESCRIPTION

     If the given procedure is not defined in the given module ("Module"),
     "ImportedFrom" is unified with the name of the module from where the given
     module imports that procedure.





NAME

     procedures/4        -- gets all Prolog procedures
     all_procedures/4    -- gets all Prolog or C procedures
     all_ntbl_entries/4  -- gets all name table entries


FORMS

     procedures(Module,Pred,Arity,DBRef)
     all_procedures(Module,Pred,Arity,DBRef)
     all_ntbl_entries(Module,Pred,Arity,DBRef)


DESCRIPTION

     If the procedure is not completely given, the name table is searched
     to get only Prolog procedures, to get only Prolog and C procedures, or
     to get all name table entries, respectively. If it is defined, its name
     table entry will be accessed to get its data base reference.


EXAMPLES

     ?- findall(P/A,all_procedures(builtins,P,A,DB),BuiltinPreds).

     will get all procedures in the module "builtins" defined in Prolog or in C.






NAME

     modules/2  -- gets modules in the system


FORMS

     modules(Module,UseList)


DESCRIPTION

     Recursively gets all modules and their use lists in the system.







NAME

     jump/2  -- jumps to the given data base reference


FORMS

     jump(DBRef,ProcHead)


DESCRIPTION

     Jumps to the clause whose data base reference is given. Before it
     jumps, it makes sure that the given clause belongs to the given
     procedure.






NAME

     ocall/2  -- sets up a call and an interrupt before doing that call.
     ocall/1


FORMS

     ocall(Module,Goal)
     ocall(Goal)


DESCRIPTION

     This is similar to "call" except that it sets up an interrupt before
     doing the call, and it makes sure that the called goal will ignore that
     interrupt, so that the next goal after that goal will be interrupted.


EXAMPLES

     Assume that the following clause is the only clause for the procedure
     hi/0.

     hi :- write('HI'), nl.

     When the following goal is executed

     ?- ocall(hi).

     The subgoal write/1 will be interrupted instead of the goal hi/0.






NAME

     ouch/0      -- sets an interrupt
     resetint/0  -- resets interrupts


FORMS

     ouch
     resetint


DESCRIPTION

     The procedure ouch/0 sets an interrupt so that next goal will be
     interrupted. The procedure resetint/0 resets all interrupts.


NOTE

     We don't need the procedure resetint/0 since interrupts are automatically
     reset when an interrupt is caught.


