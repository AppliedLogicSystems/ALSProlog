disassem.c
282c282
< 			fprintf(stderr,"\nInternal Error: Illegal mod field in EA2.");
---
> 			als_fprintf(stderr,"\nInternal Error: Illegal mod field in EA2.");
324c324
< 			fprintf(stderr,"\nInternal Error: Illegal mod field in EA.");
---
> 			als_fprintf(stderr,"\nInternal Error: Illegal mod field in EA.");
fmath.h
gc.c
138c138
< 	putchar(007); fflush(stdout);
---
> 	als_putchar(007); als_fflush(stdout);
144c144
< 	printf("\nStarting GC: %d  ", gccallcount); fflush(stdout);	
---
> 	als_printf("\nStarting GC: %d  ", gccallcount); als_fflush(stdout);	
217c217
< 	fprintf(dbgfd,"\nwm_TR=%x wm_B=%x mrccp=%x wm_H=%x wm_E=%x oldest_ap=%x ",
---
> 	als_fprintf(dbgfd,"\nwm_TR=%x wm_B=%x mrccp=%x wm_H=%x wm_E=%x oldest_ap=%x ",
219c219
< 	fprintf(dbgfd,"\nwm_heapbase=%x heap_low=%x heap_high=%x wm_trailbase=%x", 
---
> 	als_fprintf(dbgfd,"\nwm_heapbase=%x heap_low=%x heap_high=%x wm_trailbase=%x", 
221c221
< 	fprintf(dbgfd,"\n\nChoice Points \n");
---
> 	als_fprintf(dbgfd,"\n\nChoice Points \n");
223,224c223,224
< 		fprintf(dbgfd,"\n%08lx:  %08lx ", ap, *ap);
< 	fprintf(dbgfd,"\n\nEnvironments  \n");
---
> 		als_fprintf(dbgfd,"\n%08lx:  %08lx ", ap, *ap);
> 	als_fprintf(dbgfd,"\n\nEnvironments  \n");
226,227c226,227
< 		fprintf(dbgfd,"\n%08lx:  %08lx ", ap, *ap);
< 	fprintf(dbgfd,"\n\n");
---
> 		als_fprintf(dbgfd,"\n%08lx:  %08lx ", ap, *ap);
> 	als_fprintf(dbgfd,"\n\n");
244c244
< fprintf(dbgfd,"\nOuter Loop: b=%x mrccp=%x ap=%x apb=%x e=%x nmarked=%d ", 
---
> als_fprintf(dbgfd,"\nOuter Loop: b=%x mrccp=%x ap=%x apb=%x e=%x nmarked=%d ", 
307c307
< fprintf(dbgfd,"\n    Inner Loop: ap=%x apb=%x e=%x ra=%x nmarked=%d ", 
---
> als_fprintf(dbgfd,"\n    Inner Loop: ap=%x apb=%x e=%x ra=%x nmarked=%d ", 
331c331
< fprintf(dbgfd,"\n    After mark_args: ap=%x apb=%x e=%x ra=%x nmarked=%d ", 
---
> als_fprintf(dbgfd,"\n    After mark_args: ap=%x apb=%x e=%x ra=%x nmarked=%d ", 
354c354
< 	fprintf(dbgfd, "\n    Marking from trail entries: b=%x tr=%x nmarked=%d", 
---
> 	als_fprintf(dbgfd, "\n    Marking from trail entries: b=%x tr=%x nmarked=%d", 
425,426c425,426
< 	fprintf(dbgfd,"\n\nMarking from global variables: ");
< 	fprintf(dbgfd,"wm_trailbase=%x wm_gvbase=%x nmarked=%d",
---
> 	als_fprintf(dbgfd,"\n\nMarking from global variables: ");
> 	als_fprintf(dbgfd,"wm_trailbase=%x wm_gvbase=%x nmarked=%d",
434c434
< 	fprintf(dbgfd,"\n\nMarking Done: nmarked=%d \n",nmarked);
---
> 	als_fprintf(dbgfd,"\n\nMarking Done: nmarked=%d \n",nmarked);
657c657
< printf("\nBefore Check: nmarked = %d wm_TR=%x wm_H=%x wm_normal=%x \n", 
---
> als_printf("\nBefore Check: nmarked = %d wm_TR=%x wm_H=%x wm_normal=%x \n", 
662c662
< 		fprintf(stderr,"Error: The heap overflow.\n");
---
> 		als_fprintf(stderr,"Error: The heap overflow.\n");
666c666
< 	printf("Compaction complete: nmarked=%d \n", nmarked);		
---
> 	als_printf("Compaction complete: nmarked=%d \n", nmarked);		
682c682
< 		fprintf(stderr,"gc: Return address doesn't point at GCMAGIC\n");
---
> 		als_fprintf(stderr,"gc: Return address doesn't point at GCMAGIC\n");
687,689c687,690
<    mask = * (((long *) (ra + GCMAGICVal(ra))) + 1);
<    nargs = (* (long *) (ra + GCMAGICVal(ra))) & 0xffff;
<    cutoff = nargs-32;
---
> 	mask = * (long *) (ra + GCMAGICVal(ra));
> 	nargs = mask & 0xff;
> 	cutoff = nargs-24;
> 	mask >>= 8;
692c693
< fprintf(dbgfd,"\n        mark_args: e=%x ra=%x mask=%x nargs=%d cutoff=%d", 
---
> als_fprintf(dbgfd,"\n        mark_args: e=%x ra=%x mask=%x nargs=%d cutoff=%d", 
738c739
< fprintf(dbgfd,"\n        mark_from:  loc= %x (%x) ", loc, *loc); 
---
> als_fprintf(dbgfd,"\n        mark_from:  loc= %x (%x) ", loc, *loc); 
1014c1015
< 	printf("\n");
---
> 	als_printf("\n");
1016c1017
< 	printf("\n");
---
> 	als_printf("\n");
icode.h
icut.c
ienvctl.c
ifmath.c
98c98
< #endif /* FMath */
---
> #endif FMath
iget.c
iindex.c
681c681
< 	fprintf(stderr,"\nInternal Error: ic_install_call function not implemented");
---
> 	als_fprintf(stderr,"\nInternal Error: ic_install_call function not implemented");
imath.c
imeta.c
86,87c86
< 	long  	argenvsize;
< 	long 	argmask;
---
> 	long  data;
158c157
< 		fprintf(stderr,
---
> 		als_fprintf(stderr,
221c220
< 			fprintf(stderr,
---
> 			als_fprintf(stderr,
236c235
< 		fprintf(stderr, "\nError: Icode Buffer Overflow"); 			\
---
> 		als_fprintf(stderr, "\nError: Icode Buffer Overflow"); 			\
242c241
< 		fprintf(stderr, "\nError: Icode Buffer Overflow"); 			\
---
> 		als_fprintf(stderr, "\nError: Icode Buffer Overflow"); 			\
256c255
< 		printf("%s(%d,%d,%d,%d)\n", \
---
> 		als_printf("%s(%d,%d,%d,%d)\n", \
263c262
< 	fprintf(stderr,"\nInternal Error: Illegal icode instruction");
---
> 	als_fprintf(stderr,"\nInternal Error: Illegal icode instruction");
312c311
< ic_callinfo(mask,nargs,envsize,w)
---
> ic_callinfo(mask,nargs,z,w)
315d313
< 	int envsize;
321,322c319
< 	callinfo[callidx].argenvsize = (envsize << 16) | nargs;
< 	callinfo[callidx].argmask = mask;
---
> 	callinfo[callidx].data = (mask << 8) | nargs;
328c325
< #define ICODE(macro,str,addr,obp) int addr();
---
> #define ICODE(macro,addr,obp) int addr();
333c330
< #define ICODE(macro,str,addr,obp) {addr},
---
> #define ICODE(macro,addr,obp) {addr},
601,602c598
< 						ic_putl(callinfo[i].argenvsize);
< 						ic_putl(callinfo[i].argmask);
---
> 						ic_putl(callinfo[i].data);
630,636d625
< 	    case IC_ADDCLAUSE :
< 		  w_addclause(proc_id,proc_arity,*top_clausegroup,
< 					  icode_buf,ic_ptr-icode_buf,
< 					  firstargkey,firstargptr-icode_buf,
< 					  dstart-icode_buf,envsavemask);
< 				break;
< 
718c707
< 				fprintf(stderr,
---
> 				als_fprintf(stderr,
imisc.c
index.c
136c136
< 		fprintf(stderr,"Out of indexing nodes.\n Bye\n");
---
> 		als_fprintf(stderr,"Out of indexing nodes.\n Bye\n");
138c138
< 		fprintf(stderr,"Error: Out of indexing nodes.\n ");
---
> 		als_fprintf(stderr,"Error: Out of indexing nodes.\n ");
185c185
< 	SYSDEB(printf("In do_indexing: first clause addr=%x\n",curaddr));
---
> 	SYSDEB(als_printf("In do_indexing: first clause addr=%x\n",curaddr));
198c198
< 		SYSDEB(printf("Clause %d, tp=%d, key=%x, clausestart=%lx\n",
---
> 		SYSDEB(als_printf("Clause %d, tp=%d, key=%x, clausestart=%lx\n",
224c224
< 	SYSDEB(printf("totalsize=%d words\n",totalsize));
---
> 	SYSDEB(als_printf("totalsize=%d words\n",totalsize));
230c230
< 			fprintf(stderr,"No code space for indexing block.\n");
---
> 			als_fprintf(stderr,"No code space for indexing block.\n");
232c232
< 			fprintf(stderr,"Error: No code space for indexing block.\n");
---
> 			als_fprintf(stderr,"Error: No code space for indexing block.\n");
268c268
< 		printf(":- index_proc(user,%s,%d).\n",
---
> 		als_printf(":- index_proc(user,%s,%d).\n",
278c278
< 	SYSDEB(printf("do_indexing() done.\n"));
---
> 	SYSDEB(als_printf("do_indexing() done.\n"));
680c680
< 			fprintf(stderr,"installtreeoverhead: Bad type.\n");
---
> 			als_fprintf(stderr,"installtreeoverhead: Bad type.\n");
iput.c
iunify.c
machinst.h
machreg.h
mtypes.h
signal.c
27a28
> //#include <windows.h>
95a97
> #ifndef Windows
121c123
< 			fprintf(stderr,
---
> 			als_fprintf(stderr,
140a143,147
> #else	/* Windows */
> 	/*
> 	init_win_int_handler();
> 	*/
> #endif 	/* Windows */
wamregs.h
call.m4
196,198d195
< __; Environment which is calling wm_comma has four arguments
< __; (modid,first call, second call, and cutpoint) and no permanent variable.
< __; We also want to mark from these four argument during garbage collection.
201,205c198,200
< 	GCINFO(HEX(4),15) 	_; mask=15, nargs=4, npv=0
< __;	GCINFO(15,4,0) 	_; mask=15, nargs=4, npv=0
< __;DD(HEX(603))
< __;DD(-1)
< __;DD(0)
---
> 	DD(HEX(603))
> 	DD(-1)
> 	DD(0)
288,290d282
< __; Environment which is calling wm_semicolon has four arguments
< __; (modid,first call, second call, and cutpoint) and no permanent variable.
< __; We also want to mark from these four argument during garbage collection.
293,297c285,287
< 	GCINFO(HEX(4),15) 	_; mask=15, nargs=4, npv=0
< __;	GCINFO(15,4,0) 	_; mask=15, nargs=4, npv=0
< __;DD(HEX(603))
< __;DD(-1)
< __;DD(0)
---
> 	DD(HEX(603))
> 	DD(-1)
> 	DD(0)
371,374d360
< __; Environment which is calling wm_arrow has four arguments
< __; (modid,first call, second call, and cutpoint) and one permanent variable.
< __; The permanent variable is the arrow cut point saved by wm_arrow routine.
< __; We also want to mark from these four argument during garbage collection.
377,381c363,365
< 	GCINFO(HEX(10004),15) 	_; mask=15, nargs=4, npv=1
< __;	GCINFO(15,4,1) 	_; mask=15, nargs=4, npv=1
< __;	DD(HEX(603))
< __;	DD(-1)
< __;	DD(0)
---
> 	DD(HEX(603))
> 	DD(-1)
> 	DD(0)
598a583,594
> 
> 
> PROC(wm_cut)
> 
> 			_; Pick up the cut point and extract it.
> 	MOVL	OPRS(EBX,MADDR(8,ESP))
> 	ExtractCutPt(EAX,EBX,BL)
> 
> 			_; Do the cut and go from there.
> 	CutProceed
> 
> ENDPROC(wm_cut)
choice.m4
chpt.m4
cinter.m4
cut.m4
10d9
< __; 5/92    Ilyas Cicekli, new wm_cut 
29,35d27
< __; Local variables used in wm_cut
< DD(saveH,0)
< DD(saveTR,0)
< DD(saveEBX,0)
< DD(saveEDX,0)
< DD(CompactionRegion,0)
< DD(temp,0)
49a42
> __; This preview sets up stuff needed for an interrupted wm_docut
50a44,77
> 	ALIGN4
> 
> gccut2:
> 		__; One argument (the real address)
> 
> 	DD(1)
> 
> 		__; End of clause indicator
> 
> 	DD(-1)
> 
> 		__; Builtins have no clause block
> 
> 	DD(0)
> 
> dummymask:
> 
> 		__; No arguments
> 
> 	DD(0)
> 
> 		__; End of clause indicator
> 
> 	DD(-1)
> 
> 		__; Builtins have no clause block
> 
> 	DD(0)
> 
> dummyret:
> 	_;MOVL	OPRS(EAX,IMM(EXPR(EXPR(dummyret-dummymask) DIV 2)))
> 
> 	MOVL	OPRS(EAX,IMM(EXPR(dummyret-dummymask)))
> 
61,75d87
< 	ALIGN4
< gccut2:
< 	GCINFO(HEX(1),0)	_; mask=0, one arg, no pv
< __;	GCINFO(0,1,0)	_; mask=0, one arg, no pv
< 
< 
< 	ALIGN4
< dummymask:
< 	GCINFO(HEX(1),0)	_; mask=0, one arg, no pv
< __;	GCINFO(0,1,0) 		_; mask=0, one arg, no pv
< 
< dummyret:
< 	MOVL	OPRS(EAX,IMM(EXPR(dummyret-dummymask)))
< 
< 
77a90
> 
78a92
> 
84a99
> 
87a103
> 
90a107
> 
91a109,110
> 	_;MOVL	OPRS(EAX, IMM(EXPR(EXPR(gccut2-gccut1) DIV 2)))
> 
93a113
> 
94a115
> 
96a118
> 
97a120
> 
100d122
< 
154a177,178
> 	MOVL	OPRS(HB,DMADDR(chpt_HB,EDX))	_; Get HB value
> 
164,165d187
< cutcommon:
< 	MOVL	OPRS(HB,DMADDR(chpt_HB,EDX))	_; Get HB value
213,488d234
< 
< 
< 
<  
< 
< 
< PROC(oldwm_cut)
< 		__; Pick up the cut point and extract it.
<     MOVL    OPRS(EBX,MADDR(8,ESP))
<     ExtractCutPt(EAX,EBX,BL)
<        __; Do the cut and go from there.
<     CutProceed
< ENDPROC(oldwm_cut)
< 
< 
<  
< __;
< __; wm_cut performs the cut from within call.  This procedure
< __; is similar to the above procedure, but it is also responsible for
< __; cleaning up the argument/environment stack
< __;
< 
< PROC(wm_cut)
< 
<     __; Pick up the cut point and extract it.
<     MOVL    OPRS(EBX,MADDR(8,ESP))
<     ExtractCutPt(EAX,EBX,BL)
< 
<     POPL    E  		   			_; Get Old E off of stack
< 
< 	CMPL	OPRS(SPB,EAX)		_; Compare EAX to SPB
< 	JBE		SDISP(wm_cut2)		_; jump if EAX >= SPB
< 	RET							_; nothing to do
< 
< wm_cut2:
< 	__; Save register H and TR in some variables (I didn't want to save
< 	__; them in the stack, since we are going to campact it.)
< 	__; We are going to use these registers together with HB as
< 	__; scratch registers (also EAX and EBX).
<     MOVL    OPRS(saveH,H)	
< 	MOVL 	OPRS(saveTR,TR)
< 
< __;
< __; We have to search the choice point stack for the appropriate choice point
< __; to cut back to. We scan the stack, looking at the SPB pointer in each
< __; frame to see if this is the one that we want. We start at the choice
< __; point below the top one, because the value of the SPB register is shadowed
< __; in the top choice point.
< __;
< 
<     MOVL    OPRS(EDX,GVAR(wm_b_reg))    	_; Get old B
< cut_chptloop:
<     MOVL    OPRS(EBX,EDX)           		_; Put it in a useful place
<     MOVL    OPRS(EDX,DMADDR(chpt_B,EBX))    _; Get previous choice point
<     MOVL    OPRS(SPB,DMADDR(chpt_SPB,EDX))  _; Get SPB
<     ANDL    OPRS(SPB,IMM(HEX(fffffffe)))    _; Nuke compaction bit
<     CMPL    OPRS(SPB,EAX)           		_; Compare EAX to SPB
<     JBE 	SDISP(cut_chptloop)         	_; jump if SPB <= EAX
<  
< 	__; EDX contains the appropriate choice point to cut back to, and
< 	__; EBX contains the choice point below the top one.
< 	__; Save these values since they will be used by "cutcommon" code.
< 	MOVL 	OPRS(saveEDX,EDX)
< 	MOVL 	OPRS(saveEBX,EBX)
< 
< __;
< __; We have found the choice point to cut back to.  This is the
< __; value in EDX.  But before we cut back to this point, we must clean
< __; up the argument/environment stack.  After the cleanup, the rest
< __; of the cut operation is performed by branching to cutcommon.
< __; Since we saved register H and TR, and HB will be set but cutcommon code,
< __; we have registers EAX, EBX, H, TR, and HB free 
< __; to use in whatever manner we desire in the argument/environment 
< __; cleanup code. 
<  
< __; See if any compaction needs to be done
<  
< 	CMPL 	OPRS(E,EAX)				_; see if E > EAX (cutpoint)
< 	JGE		DISP(jmpto_cutcommon) 	_; if so; No arg/env compaction necessary
< __;	JG 		DISP(jmpto_cutcommon) 	_; if so; No arg/env compaction necessary
< 
< __;
< __; A/E stack compaction -- Step 1:
< __;
< __; Traverse active environments back to "cutpt".  In the process of
< __; traversing the active environments, we will record in a small table
< __; the start and end of each environment.  A third slot in the table
< __; will be used to store "adjustment" values for use in the compaction
< __; phase.
< __;
< __; Register Usage
< __;
< __;   SPB -- stack frame corresponding to top choice point
< __;          after cut has been performed.  This is value
< __;          that we will traverse back to / beyond.
< __;
< __;   H   -- Top of size/fixup table. This entry will correspond
< __;          to the oldest environment examined thus far.
< __;
< __;   EBX -- Return address from previous environment.  This
< __;          value will be important in order to obtain
< __;          the size information for the current environment
< __;          being examined.
< __;
< __;   HB  -- current environment being examined.
< __;
< __;   TR  -- higher environment address from previous
< __;          iteration. This address is used to determine
< __;          whether to create a new table entry or to
< __;          merge the result of the current iteration into
< __;          the top table entry.
< __;
< 
< 	MOVL 	OPRS(H,saveH) 			_; Get original H value
< 	MOVL 	OPRS(HB,E) 				_; set HB to topmost environment
< 	MOVL 	OPRS(TR,IMM(-1)) 		_; set higher environment address to 
< 									_; an impossible value
< 	MOVL 	OPRS(EBX,DMADDR(SP)) 	_; Get return address
< 
< step1_L1:
< 	MOVL 	OPRS(EAX,DMADDR(1,EBX)) _; GCMAGICVal
< 	ADDL 	OPRS(EBX,EAX) 			_; pointer to GC info
< 	MOVL 	OPRS(EAX,DMADDR(EBX)) 	_; NArgs + Npv
< 	MOVL 	OPRS(EBX,EAX) 			_; same thing into EBX
< 	ANDL 	OPRS(EAX,IMM(HEX(ffff))) 	_; number of args into EAX
< 	SHRL 	OPRS(EBX,IMM(16))		_; number of env vars into EBX
< 	SHLL 	OPRS(EAX,IMM(2)) 		_; size of args in bytes
< 	SHLL 	OPRS(EBX,IMM(2)) 		_; size of env vars in bytes
< 	NEGL 	EBX 					_; negate the environment size
< 	ADDL 	OPRS(EAX,IMM(8)) 		_; add in CP, CE sizes to number of args
< 	ADDL 	OPRS(EAX,HB) 			_; EAX now points one beyond last arg
< 	ADDL 	OPRS(EBX,HB) 			_; EBX now points at last env var
< 
< 	CMPL 	OPRS(EBX,TR) 			_; see if can merge these values 
< 									_; into last table entry
< 	JNE 	SDISP(step1_L2) 		_; branch if we can't
< 	
< 	MOVL 	OPRS(DMADDR(-8,H),EAX) 	_; modify high address in previous entry
< 	JMP 	SDISP(step1_L3)
< 
< step1_L2:
< 	MOVL 	OPRS(DMADDR(H),EBX) 	_; store low address in table
< 	MOVL 	OPRS(DMADDR(4,H),EAX) 	_; store high address in table
< 	ADDL 	OPRS(H,IMM(12)) 		_; advance table pointer
< 
< step1_L3:
< 	MOVL 	OPRS(TR,EAX) 			_; save high value for next iteration
< 	MOVL 	OPRS(EBX,DMADDR(4,HB)) 	_; get next return address
< 	MOVL 	OPRS(HB,DMADDR(HB)) 	_; follow environment link
< 
< 	CMPL 	OPRS(SPB,HB) 			_; see if we are done
< 	JGE 	SDISP(step1_L1) 		_; branch if SPB >= HB (env pointer)
< 
<  
< __;
< __; A/E Compaction: Step 2
< __;
< __; We have now set up the table.  We must now determine the starting
< __; address to slide the environment values up to.  We do this
< __; by examining the high value determined by the last iteration.  This
< __; will be one beyond the last argument of the last environment examined.
< __; If this value is greater than that of the SPB,  then this is the
< __; environment of the SPB and our initial starting value should be
< __; the low address of that environment.  If the high value from the
< __; last iteration is equal to SPB, then the environment abuts that of
< __; SPB's environemnt and we again use the low address of this environment
< __; as our starting value.   But if the high value is strictly less than
< __; that of SPB, there is a gap between SPB and the last examined
< __; environment, so we use SPB as our starting address to slide things
< __; toward.
< __;
<  
< 	MOVL 	OPRS(TR,SPB) 		_; initialize TR with SPB value
< 	CMPL 	OPRS(EAX,SPB) 		_; see if high value from last iteration >= SPB
< 	JL  	SDISP(step3_L0) 	_; branch if  high value < SPB
< 
< 	MOVL 	OPRS(EBX,DMADDR(-12,H)) 	_; load low address... this necessary
< 										_; because of possible merging
< 	CMPL 	OPRS(SPB,EBX) 		_; see if SPB < EBX
< 	JL 		SDISP(step3_L0) 	_; branch if SPB < EBX
< 
< 	MOVL 	OPRS(TR,EBX)  		_; use low address
< step2_L1:
< 	SUBL 	OPRS(H,IMM(12)) 	_; nuke last table entry
< 
<  
< __;
< __; A/E Compaction: Step 3
< __;
< __; TR now contains the address to slide the argument/environment
< __; stack towards (we will be shifting things from smaller addresses
< __; to larger addresses).
< __;
< __; H will be one above the last table entry.
< __;
< __; In this step we will pick up the table entries one by one and
< __; move the range of addresses specified by these entries.  In addition,
< __; we will store an offset as the third value in the table.  This
< __; offset will be used to fix up pointers which point into regions of
< __; the stack which we are moving.
< __;
< __; Register and local variable usage:
< __;
< __;   saveH  	-- bottom of size/fixup table
< __;   H   		-- top of size/fixup table
< __;   TR  		-- address into A/E stack to which we move values
< __;   EBX  		-- address into A/E stack from which we get values
< __;   CompactionRegion  -- initial value of TR; used to determine if a pointer
< __;          			needs fixing or not
< __;   HB  		-- fixup value for current environment
< __;   EAX  		-- scratch
< __;   temp  	-- scratch
< __;
< 
< 
< step3_L0:
< 	MOVL 	OPRS(HB,IMM(0)) 		_; initially, no fixup needed
< 	MOVL 	OPRS(CompactionRegion,TR) 	_; Top of compaction region
< 
< 	CMPL 	OPRS(H,saveH) 			_; see if we are done
< 	JE 		SDISP(cutcompactiondone)  _; branch if we are done
< 
< step3_L1:
< 	SUBL 	OPRS(H,IMM(12)) 		_; go to previous table entry
< 	MOVL 	OPRS(EBX,DMADDR(4,H)) 	_; get high address
< 	MOVL 	OPRS(HB,TR) 			_; compute fixup value
< 	SUBL 	OPRS(HB,EBX) 			_; now HB has fixup value
< 	MOVL 	OPRS(DMADDR(8,H),HB) 	_; save fixup value in table entry
< 
< step3_L2:
< 	SUBL 	OPRS(EBX,IMM(4)) 		_; get environment value
< 	MOVL 	OPRS(EAX,DMADDR(EBX)) 	_; into EAX
< 
< 	TESTB 	OPRS(AL,IMM(MTP_TAGMASK))	_; perform tag check
< 	JNE 	SDISP(step3_L4) 			_; branch if anything but reference
< 	CMPL 	OPRS(EAX,CompactionRegion) 	_; see our pointer >= our start point
< 	JGE 	SDISP(step3_L4) 		 	_; branch if so
< 	CMPL 	OPRS(EAX,DMADDR(H)) 		_; see our pointer < low address
< 	JL 		SDISP(step3_L4) 			_; branch if so
< 
< 	__; EAX contains a pointer which must be fixed (in compaction region)
< 	MOVL 	OPRS(temp,H) 			_; save original table entry
< step3_L3:
< 	ADDL 	OPRS(H,IMM(12)) 		_; set up H for next iteration
< 	CMPL 	OPRS(EAX,DMADDR(-8,H)) 	_; see our pointer < high address
< 	JGE 	SDISP(step3_L3) 		_; branch if not
< 	ADDL 	OPRS(EAX,DMADDR(-4,H)) 	_; add in fixup value
< 	MOVL 	OPRS(H,temp) 			_; restore original table entry
< 	
< step3_L4:
< 	SUBL 	OPRS(TR,IMM(4)) 		_; move the environment value 
< 	MOVL 	OPRS(DMADDR(TR),EAX) 	_; into its new position
< 
< 	CMPL 	OPRS(EBX,DMADDR(H)) 	_; see if more environment value to move
< 	JNE 	SDISP(step3_L2) 		_; branch if so
< 
< 	CMPL 	OPRS(H,saveH) 		_; see if totally done
< 	JNE 	SDISP(step3_L1) 	_; branch if more to do
< 
< cutcompactiondone:
< 	ADDL 	OPRS(E,HB) 			_; add in fixup value 
< 
< jmpto_cutcommon:
< 	MOVL 	OPRS(H,saveH)
< 	MOVL 	OPRS(TR,saveTR)
< 	__; Save EDX (H) since cutcommon code uses this register as a temporary
< 	__; register. This register will be poped from register by "cutcommon"
< 	__; code in wm_docut routine. Also, restores values of EBX and EDX 
< 	__; which will be used cutcommon code.
< 	PUSHL 	H
< 	MOVL 	OPRS(EBX,saveEBX)
< 	MOVL 	OPRS(EDX,saveEDX)
< 	
< 	JMP 	DISP(cutcommon)			_; jump to cutcommon
< 	
< ENDPROC(wm_cut)
int.m4
jump.m4
mtypes.m4
rts.m4
80,84c80,82
< 	GCINFO(HEX(0),0)		_; mask=0, nargs=0, npv=0
< __;	GCINFO(0,0,0)		_; mask=0, nargs=0, npv=0
< __;        DD(0) 
< __;        DD(-1)
< __;        DD(0)
---
>         DD(0) 
>         DD(-1)
>         DD(0)
269,273c267,269
< 	GCINFO(HEX(0),0)		_; mask=0, nargs=0, npv=0
< __;	GCINFO(0,0,0)		_; mask=0, nargs=0, npv=0
< __;        DD(0) 
< __;        DD(-1)
< __;        DD(0)
---
>         DD(0) 
>         DD(-1)
>         DD(0)
599,608d594
< 	__; Check Big Structures ( Arity >= 255)
< 	CMPL 	OPRS(EDX,IMM(255)) 		_; compare arity against 255
< 	JNE 	DISP(usloop) 			_; it is not a big structure, continue
< 	ADDL	OPRS(EAX,IMM(4))		_; Make each point to big arity
< 	ADDL	OPRS(EBX,IMM(4))
< 	MOVL 	OPRS(EDX,MADDR(EAX)) 	_; get one of big arities 
< 	CMPL 	OPRS(EDX,MADDR(EBX)) 	_; compare against the other
< 	JNE		DISP(ufail)				_; fail if not the same
< 	SHRL 	OPRS(EDX,IMM(MTP_CONSTSHIFT)) 	_; shift edx to get arity
< 
932,936c918,920
< 		GCINFO(HEX(2),3)		_; mask=3, nargs=2, npv=0
< __;		GCINFO(3,2,0)		_; mask=3, nargs=2, npv=0
< __;       DD(HEX(302)) 			_; two arguments, and we should mark from them
< __;       DD(-1)
< __;       DD(0)
---
>         DD(HEX(302)) 			_; two arguments, and we should mark from them
>         DD(-1)
>         DD(0)
salloc.m4
symbols.m4
token.m4
uia.m4
wamops.m4
253,277d252
< 
< 
< __;
< __; GCINFO(mask,NArgs,NPV)
< __;
< __;define(GCINFO,`
< __;	DW($2)								_; argument size
< __;	DW($3)								_; environment size
< __;	DD($1) 								_; argument usage mask
< __;	DD(-1) 								_; end of clause marker
< __;	DD(0) 								_; builtin indicator
< __;')
< __;
< __; GCINFO(NArgsandNPV,mask)
< __; 	
< __; Low 16 bit of the first argument is the number of arguments and
< __; high 16 bit is the size of the environment.
< __;
< define(GCINFO,`
< 	DD($1)								_; argument size and environment size
< 	DD($2) 								_; argument usage mask
< 	DD(-1) 								_; end of clause marker
< 	DD(0) 								_; builtin indicator
< ')
< 
wamregs.m4
wmregs.m4
wntbl.m4
