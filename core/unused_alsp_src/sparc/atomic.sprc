;
; atomic.sprc	-- atomic, atom, integer, nonvar, number, var
;	Copyright (c) 1991-1993 by Applied Logic Systems, Inc.
;
; Author: Kevin A. Buettner
; Creation: 1/11/91
; Revision History:
;
;

#include "assembly.sprc"
	text

;
; atomic
;

	global	wm_atomic
wm_atomic:
	deref	A1,	atomicground		; dereference A1
atomicfail:
	fail
atomicground:
	cmp	tmp1,	MTP_LIST		; see if list
	be	atomicfail			; fail if list
	nop					; can't fill delay slot
	bcs,a	isdouble			; branch if structure
	ld	[tmp2],	tmp2			; get functor into tmp2
	proceed

isdouble:
	; tmp2 has the functor at this point
	set	MMK_FUNCTOR(TK_DDOUBLE,4), tmp1	;
	cmp	tmp2,	tmp1			; see if functor is $double/4
	bne	numfail
	nop
	proceed

;
; number
;

	global	wm_number
wm_number:
	deref	A1,	numground		; dereference A1
numfail:
	fail
numground:
	cmp	tmp1,	MTP_LIST		; see if list
	be	atomicfail			; fail if list
	nop					; can't fill delay slot
	bcs,a	isdouble			; branch if structure
	ld	[tmp2],	tmp2			; get functor into tmp2

isinteger:
	and	A1,	MTP_CONSTMASK,	tmp1	; put all four tags in tmp1
isint2:	cmp	tmp1,	MTP_INT			; see if tag is an integer
	bne	numfail
	nop
	proceed

;
; float
;

	global	wm_float
wm_float:
	deref	A1,	floatground		; dereference A1
	fail					; fail if variable

floatground:
	cmp	tmp1,	MTP_LIST
	bcs,a	isdouble			; branch if structure
	ld	[tmp2],	tmp2			; get functor into tmp2
	fail


;
; integer
;

	global	wm_integer
wm_integer:
	deref	A1,	intground		; dereference A1
	fail
intground:
	cmp	tmp1,	MTP_CONST		; see if constant
	be,a	isint2				; branch if constant
	and	A1,	MTP_CONSTMASK,	tmp1	; put all four tags in tmp1
						;  while doing the branch
	fail


;
; atom
;

	global	wm_atom
wm_atom:
	deref	A1,	atomground		; dereference A1
atomfail:
	fail
atomground:
	and	A1,	MTP_CONSTMASK,	tmp1	; put all four tags in tmp1
	cmp	tmp1,	MTP_SYM			; see if atom is a symbol
	bne,a	atomnotsym			; branch if not
	cmp	tmp1,	MTP_UIA			; see if uia while doing
						;  the branch
	proceed
atomnotsym:
	bne	atomfail			; fail if uia
	nop
	proceed

;
; In writing this code, I noticed that symbols have tag 7 and
; uias have tag 15 (0xf).  We could simplify the above code and
; indeed the code on other systems by performing the following
; instead:
;
;	atomground:
;		and	A1, MTP_SYM, tmp1	; put three tags in tmp1
;		cmp	tmp1, MTP_SYM		; see if sym or uia
;		bne	atomfail		; branch if not
;		nop
;		proceed
;


;
; nonvar
;

	global	wm_nonvar
wm_nonvar:
	deref	A1,	nonvarground
varfail:
	fail
nonvarground:
	proceed

;
; var
;
	global	wm_var
wm_var:
	deref	A1,	varfail
	proceed


;
; eq
;

	global	wm_eq
wm_eq:
	deref	A1,	1f			; dereference first
1:	deref	A2,	1f			; and second args
1:	cmp	A1,	A2			; see if same
	bne	1f				; fail if not
	nop
	proceed					; else succeed
1:	fail

;
; noneq
;

	global	wm_noneq
wm_noneq:
	deref	A1,	1f			; dereference first
1:	deref	A2,	1f			; and second args
1:	cmp	A1,	A2			; see if same
	be	1f				; fail if so
	nop
	proceed					; else succeed (not same)
1:	fail
