;
; call.sprc			-- call, ;/2, and others
;	Copyright (c) 1990-1993 by Applied Logic Systems, Inc.
;
; Creation:	1/30/91
; Author:	Kevin A. Buettner
; Revision History:
;


#include "assembly.sprc"

	text

;
; wm_call implements the prolog builtin call/1.  On entry, T1 has the module
; id of the module from which the call was done.  The caller is responsible
; for setting this value up.  This work is usually done in the
; procedure entry.
;
	global	wm_call

wm_call:
	mov	0,	S			; don't ignore overflow check
ocall_entry:
	;
	; entry point for Call with interrupt and others.  S set to one
	; indicates that the overflow check will be ignored.
	;

	st	A2,	[E+12]			; save the cutpt
	deref	A1,	call_isground

call_fail:
	fail

call_isground:
	cmp	tmp1,	MTP_LIST		; examine tag
	bcs,a	call_isstruct			; branch if we have a structure
	ld	[tmp2],	UArg1			; load functor in delay slot
	be,a	call_fail			; fail if we have list
	nop

	;
	; otherwise we have a constant
	;

	and	A1, MTP_CONSTMASK, tmp1		; get four bit version of tag
	cmp	tmp1,	MTP_SYM			; see if we have a symbol
	be	1f				; branch if we do
	mov	0,	UArg2			; set arity in delay slot
	cmp	tmp1,	MTP_UIA			; see if we have a uia
	bne,a	call_fail			; fail if we don't
	nop

1:	mov	A1,	UArg1
	cmp	A1,	MMK_SYM(TK_CUT)		; see if we have cut
	bne,a	1f				; branch if so
	add	SP,	4,	SP		; decrease frame size if not
	mov	A2,	A1			; put cutpt in A1 for cut
1:	ba	call_whereto
	add	SP,	4,	SP		; decrease frame size

call_isstruct:
	sll	UArg1,	8,	T2		; put token id of the functor
	srl	T2,	12,	T2		;    into T2
	cmp	T2,	TK_CUT			; See if we have a cutmacro
	bgu,a	1f				; branch if we don't and
	add	SP,	4,	SP		;    adjust stack
1:
	srl	UArg1,	24,	UArg2		; extract arity into UArg2
	sll	UArg2,	2,	tmp1		; multiply by four for stack
						; adjustment purposes
	sub	SP,	tmp1,	SP		; adjust stack
	add	SP,	12,	SP		; 12 was original size of frame
						; (one arg plus OldE and CP)
1:	ld	[tmp2+tmp1],	T2		; get argument
	subcc	tmp1,	4,	tmp1		; decrement counter
	bne	1b				; branch around
	st	T2,	[SP+tmp1]		; store argument (in delay slot)

	sub	SP,	8,	SP		; Allocate space for OldE
						;   and CP

	; Load the argument registers.  Originally, this piece of code had
	; more finesse -- it tried to figure out how many regs needed to
	; be loaded and only loaded those.  Unfortunately, cut macros take
	; and extra argument and so the cutpt was not being loaded into a
	; register.  This was making arrow (and probably other) operations
	; mess up.  I feel now that it is probably faster to just blindly load
	; all of them than to try to figure out which ones need to be loaded
	; and load only those.

	ld	[SP+8],	A1
	ld	[SP+12], A2
	ld	[SP+16], A3

call_whereto:
	;
	; UArg1		-- functor
	; UArg2		-- arity
	; T1		-- module id
	; S		-- overflow check flag
	;

	mov	T1,	tmp1			; callC4 can only take args
	mov	S,	tmp2			; from globals
	callC4	call_resolve_reference, tmp1, UArg1, UArg2, tmp2
	jmp	UArg1				; execute the procedure
	mov	SP,	E			; set E appropriately ...
						;  on the SPARC implementation,
						;  this will not happen if
						;  overflow check not performed



#ifdef oldcode /* should not be defined */
;
; wm_comma implements ','/2
;
; T1 has the module id
;

	global	wm_comma
wm_comma:
	st	OldE,	[E]			; store Old Environ Ptr
	st	CP,	[E+4]			; store continuation ptr
	st	A2,	[E+12]			; save second arg
	andn	A3,	0x10,	A3		; wipe the semicolon flag
	st	A3,	[E+16]			; save cutpt
	mov	A3,	A2			; put cutpt into A3
	sub	E,	20,	SP		; create new frame for call
	st	T1,	[E-4]			; save T1 for later use
	mov	E,	OldE			; set OldE
	mov	SP,	E			; update E
	call	wm_call
	add	RET, GC_INFO_SIZE, CP		; adjust CP

	;
	; Note that we call wm_call without going through a procedure entry.
	; This is why we have to do all of the stuff that the procedure entry
	; would normally do for us.
	;

	gcinfo	6,	3,	1		; mask = 6, nargs = 3, npv=1

	ld	[E-4],	T1			; reload module id
	ld	[E],	OldE			; reload OldE
	ld	[E+4],	CP			; reload CP
	ld	[E+12],	A1			; set A1 with second conjunct
	ld	[E+16],	A2			; set A2 with cutpt

	cmp	SPB,	E			; see if we are determinate
	bleu,a	1f				; branch if not
	sub	SPB,	16,	SP		; non-determinate code
	add	E,	4,	SP		; determinate code
1:
	ba	wm_call				; branch to call
	mov	SP,	E


;
; wm_semicolon implements ';'/2
;
; T1 has the module id
;

	global	wm_semicolon
wm_semicolon:
	sub	SP,	4,	SP		; increase size of frame
	mov	SP,	E			; a little bit
	st	T1,	[E+20]			; save module id

	try_me_else	wm_try3, semitrust
	sub	SP,	16,	SP		; allocate a new stack frame
	or	A3,	0x10,	A2		; mark cutpt as coming from
						; first disjunct of semicolon
	ba	wm_call				; branch to call and
	mov	SP,	E			;   set E to SP

semitrust:
	trust_me_else_fail	wm_trust_u3	; trust away the choice point
	ld	[E+20],	T1			; pick module id back up
	add	SP,	8,	SP		; decrease size of frame
	mov	SP,	E
	mov	A2,	A1			; put second disjunct in A1
	ba	wm_call				; branch to call and
	mov	A3,	A2			;   put cutpt into A2


;
; wm_arrow implements '->'/2
;
;	A1 has the first goal
;	A2 has the second goal
;	A3 has the cutpt
;	T1 has the module id
;

	global	wm_arrow
wm_arrow:
	sub	E,	24,	SP		; create a new frame for call
	andcc	A3,	0x10,	ZERO		; test semicolon flag
	be	1f				; branch if clear
	andn	A3,	0x10,	A3		; clear semicolon flag while
						; branching
	ba	2f				; Use SPB as cutpt if we came
	sub	HeapBase, SPB,	tmp1		; from a semicolon
1:	sub	HeapBase, E,	tmp1		; Use E otherwise
2:	sll	tmp1, MTP_CONSTSHIFT,	tmp1	; make room for tag
	add	tmp1,	MTP_INT,	tmp1	; add in tag
	st	tmp1,	[E-8]			; save for later
	st	A3,	[E+16]			; save wiped version for later
	st	A2,	[E+12]			; save A2
	st	CP,	[E+4]			; save CP
	st	OldE,	[E]			; save old environ ptr
	mov	A3,	A2			; put cutpt into A2
	st	T1,	[E-4]			; save T1 for later

	mov	E,	OldE			; do linkage
	mov	SP,	E			; no E points a new frame
	call	wm_call				; call call
	add	RET,	GC_INFO_SIZE,	CP	; adjust CP

	gcinfo	6,	3,	2		; mask = 6, nargs = 3, npv=2

	ld	[E-8],	UArg1			; get cutpt from UArg1
	ld	[E-4],	T1			; reload module id
	ld	[E],	OldE			; unlink
	ld	[E+4],	CP			; get continuation ptr
	ld	[E+12],	A1			; put second arg in A1
	untag_cut	UArg1,	UArg1
	call	wm_docut2			; perform the arrow cut
	ld	[E+16],	A2			; get cutpt for next call
	add	E,	4,	SP		; adjust frame size
	ba	wm_call				; branch to call
	mov	SP,	E
#endif /* oldcode */


;
; wm_colon implements ':'/2
;

	global	wm_colon
wm_colon:
	deref	A1,	colon_ground
	fail					; fail if module arg is ground
colon_ground:
	mov	A1,	T1			; put module arg in T1
	mov	A2,	A1			; shift goal to call
	mov	A3,	A2			; shift cutpt
	add	E,	4,	E		; adjust size of frame
	ba	wm_call
	mov	E,	SP			; set SP to match


;
; wm_dbg_call implements dbg_call/2 which is essentially call but
;	without the overflow check
;

	global	wm_dbg_call
wm_dbg_call:
	deref	A1,	dbg_call_ground
	fail					; fail if module arg is variable
ocall_ground:
	load	wm_trigger,	Safety
	store	Safety,	wm_safety
dbg_call_ground:
	mov	A1,	T1
	mov	A2,	A1
	mov	A3,	A2
	add	ZERO,	1,	S		; set S to 1 so that overflow
						; check is ignored
	add	E,	4,	E		; adjust size of frame
	ba	ocall_entry
	mov	E,	SP			; set SP to match



;
; wm_ocall implements callWithDelayedInterrupt (formerly ocall/2) which is
; 	call without the overflow check.  In addition, the Safety register is
; 	set so that the next call will be interrupted.
;

	global	wm_ocall
wm_ocall:
	deref	A1,	ocall_ground
	fail					; fail if module arg is variable


;
; wm_jump implements jump/2
;

	global	wm_jump
wm_jump:
	deref	A1,	1f			; dereference first argument
	fail
1:
	deref	A2,	1f			; dereference second argument
jump_fail:
	fail					; fail if second arg is variable
1:
	; Call jump_validate_dbref with arguments

	mov	A1,	UArg1
	mov	A2,	UArg2
	callC2	jump_validate_dbref, UArg1, UArg2
	cmp	UArg1,	0			; see if zero
	be	jump_fail			; branch if so
	nop

	;
	; UArg1 has the clause address
	; A2 has the call structure
	;

	and	A2, MTP_TAGMASK, tmp1		; put tags into tmp1
	cmp	tmp1,	MTP_LIST		; compare against list
	bcs,a	jump_isstruct
	sub	A2,	MTP_STRUCT,	A2	; untag A2
	be	jump_fail			; fail if list
	and	A2, MTP_CONSTMASK, tmp1		; get const tags in delay slot
	cmp	tmp1,	MTP_SYM			; see if we have a symbol
	be	1f
	add	SP,	8,	SP		; branch if we do
	cmp	tmp1,	MTP_UIA			; see if we have UIA
	bne	jump_fail
	nop
1:	
	mov	SP,	E
	st	OldE,	[E]			; save OldE
	jmpl	UArg1,	ZERO			; jump to clause
	st	CP,	[E+4]			; save CP

jump_isstruct:
	ld	[A2],	tmp1			; get functor
	add	SP,	16,	SP		; deallocate the jump frame
	srl	tmp1,	24,	tmp1		; shift to get arity only
	sll	tmp1,	2,	tmp1		; multiply by four
	sub	SP,	tmp1,	SP		; allocate space for arguments

1:	ld	[A2+tmp1],	tmp2		; get argument from heap
	subcc	tmp1,	4,	tmp1		; decrement
	bg	1b				; loop if greater
	st	tmp2,	[SP+tmp1]		; put argument on stack

	sub	SP,	8,	SP		; allocate space for OldE and CP
	st	OldE,	[SP]
	st	CP,	[SP+4]
	ld	[SP+8],	A1			; load up registers
	ld	[SP+12], A2			; ok if we load too many
	ld	[SP+16], A3
	jmpl	UArg1,	ZERO			; jump to clause
	mov	SP,	E			; set E to match SP
