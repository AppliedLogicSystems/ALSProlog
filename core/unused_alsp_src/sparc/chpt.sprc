;
; chpt.sprc		-- choice point code
;	Copyright (c) 1991-1993 by Applied Logic Systems, Inc.
;
; Author:	Kevin A. Buettner
; Creation:	1/11/91
;

#include "assembly.sprc"

;
; Try instructions:
;	These are called in the following manner:
;
;	call	wm_tryN
;	sub	TR,	16,	TR
;	sethi	hi(nextclause),	Fail
;	or	Fail,	lo(nextclause), Fail
;
; wm_try3 is called when there are 3 or more arguments.  Similarly,
; wm_try2 and wm_try1 are called when there are only 2 or 1 arguments
; wm_try0 is called when there are no arguments to save.
;
;	

global	wm_try3
global	wm_try2
global	wm_try1
global	wm_try0

wm_try3:
	st	A3,	[E+16]
wm_try2:
	st	A2,	[E+12]
wm_try1:
	st	A1,	[E+8]
wm_try0:
	st	CP,	[E+4]
	st	OldE,	[E]
	st	B,	[TR+12]
	st	SPB,	[TR+8]
	st	HB,	[TR+4]
	st	Fail,	[TR]
	mov	TR,	B
	mov	E,	SPB
	jmp	RET+8
	mov	H,	HB

;
; Retry instructions:
;	These are called in the following manner:
;
;	call	wm_retryN	or wm_retry_uN
;	mov	SPB,	E
;	sethi	hi(nextclause),	Fail
;	or	Fail,	lo(nextclause), Fail
;	
; As with the try instructions, the Numeric suffix at the end of each of
; the retry labels refers to the number of arguments with wm_retry3 and
; wm_retry_u3 referring to arguments of three or greater.  wm_retry0,
; wm_retry1, wm_retry2, and wm_retry3 will be called for clauses which
; will not need the CP or OldE registers to be restored.  In other words,
; these will be clauses with two or more goals.  The _uN versions will
; restore the CP and OldE registers.  This will happen in unit clauses
; (hence the suffix) and clauses with one goal.
;

global	wm_retry3
global	wm_retry2
global	wm_retry1
global	wm_retry0

global	wm_retry_u3
global	wm_retry_u2
global	wm_retry_u1
global	wm_retry_u0

wm_retry3:
	ld	[E+16],	A3		; reload A3
wm_retry2:
	ld	[E+12],	A2		; reload A2
wm_retry1:
	ld	[E+8],	A1		; reload A1
wm_retry0:
	subcc	B,	TR,	tmp1	; get difference into tmp1
	be	untr_done_r		; branch if nothing to do
	mov	SPB,	SP		;   in either case reset SP
untr_r:
	subcc	tmp1,	4,	tmp1	; subtract 4
	ld	[TR+tmp1],	tmp2	; get trail entry
	bgu	untr_r			; branch til done
	st	tmp2,	[tmp2]		; make var unbound (in delay slot)

	mov	B,	TR		; reset TR

untr_done_r:
	jmp	RET+8
	mov	HB,	H


wm_retry_u3:
	ld	[E+16],	A3		; reload A3
wm_retry_u2:
	ld	[E+12],	A2		; reload A2
wm_retry_u1:
	ld	[E+8],	A1		; reload A1
wm_retry_u0:
	ld	[E+4],	CP		; reload CP
	ba	wm_retry0		; branch to wm_retry0 while
	ld	[E],	OldE		;	reloading OldE


;
; Trust instructions:
;
; Called in the following manner:
;
;	call	wm_trustN	or wm_trust_uN
;	mov	SPB,	E
;	ba	clausestart
;	mov	E,	SP
;
; These implement the trust operation.  See notes above for the retry
; instructions regarding the suffixes.
; 

global	wm_trust3
global	wm_trust2
global	wm_trust1
global	wm_trust0

global	wm_trust_u3
global	wm_trust_u2
global	wm_trust_u1
global	wm_trust_u0

wm_trust3:
	ld	[E+16],	A3		; reload A3
wm_trust2:
	ld	[E+12],	A2		; reload A2
wm_trust1:
	ld	[E+8],	A1		; reload A1
wm_trust0:
	subcc	B,	TR,	tmp1	; get difference into tmp1
	be	untr_done_t
	mov	HB,	H
untr_t:
	subcc	tmp1,	4,	tmp1	; subtract 4
	ld	[TR+tmp1],	tmp2	; get trail entry
	bgu	untr_t			; branch til done
	st	tmp2,	[tmp2]		; make var unbound (in delay slot)

untr_done_t:
	ld	[B+8],	SPB		; reload SPB
	ld	[B],	Fail		; reload Fail
	ld	[B+4],	HB		; reload HB
	add	B,	16,	TR	; reset TR before reloading B
	ld	[B+12],	B		; reload B
	jmp	RET+8
	andn	SPB,	3,	SPB	; clear compaction bit in SPB


wm_trust_u3:
	ld	[E+16],	A3		; reload A3
wm_trust_u2:
	ld	[E+12],	A2		; reload A2
wm_trust_u1:
	ld	[E+8],	A1		; reload A1
wm_trust_u0:
	ld	[E+4],	CP		; reload CP
	ba	wm_trust0		; branch to wm_retry0 while
	ld	[E],	OldE		;	reloading OldE


;
; wm_trust_fail	-- trust away a choice point and then fail
;
;

	global	wm_trust_fail
wm_trust_fail:
	call	wm_trust0		; trust away current choice point
	mov	SPB,	E
	fail				; fail some more


;
; wm_sw_struct	-- switch on structure (actually functor)
; wm_sw_const	-- switch on constant
;
;	Implements the switch_on instructions.  On entry, RET+8 points to
;	the table to binary search.  The size of the table is passed in
;	the most significant 22 bits of T1.  To get the table size, this
;	value would have to be shifted right by 10 bits.  But our interest
;	in this value is really to get at the end of the table and would
;	need to be multiplied by 8 which corresponds to a left shift of
;	three.  Therefore, to be useful, we shift the value right by only
;	seven bits.
;
;	The table entries consist of keys followed by the address to jump
;	to if a match is found.
;
;

global	wm_sw_struct
global	wm_sw_const

wm_sw_const:

	and	A1, MTP_CONSTMASK, tmp1	; get constant mask
	cmp	tmp1,	MTP_UIA		; see if we have UIA 
	bne,a	swsearch		; branch if not
	mov	A1,	UArg1		; move key to UArg1 (in delay slot)
	srl	A1, MTP_CONSTSHIFT, UArg1 ; shift out tags leaving offset
	add	UArg1, HeapBase, UArg1	; now UArg1 points to UIA
	add	UArg1,	4,	UArg1	; now UArg1 points to the string
	callC1	probe_token,	UArg1	; look for the token
	sll	UArg1, MTP_CONSTSHIFT, UArg1	
					; make room for tag 
	cmp	UArg1,	0		; see if token found
	bne,a	swsearch		; branch if so
	add	UArg1, MTP_SYM,	UArg1	; add in the tag (in delay slot)
	fail				; fail if uia not found

wm_sw_struct:
	ld	[A1-MTP_STRUCT], UArg1	; load functor as key
swsearch:
	srl	T1,	7,	T1	; shift right by seven (see above)
	add	RET,	T1,	T2	; put address of last entry (not
					;   beyond) into T2
	add	RET,	8,	T1	; put address of first entry in T1

	;
	; T1 contains address of lower table entry
	; T2 contains address of upper table entry
	; UArg1 contains the key
	; S is used to compute the midpoint
	;

1:	subcc	T2,	T1,	S	; get difference
	bcc,a	2f			; branch if still work to do
	srl	S,	1,	S	; halve the difference
swfail:	fail				; fail if nothing more to search
2:	andn	S,	7,	S	; clear low three bits to maintain
					; alignment
	ld	[T1+S],	tmp1		; load the midpoint into tmp1
	add	T1,	S,	S	; now S has actual midpoint address
	cmp	UArg1,	tmp1		; compare key to midpoint value
	bgu,a	1b			; loop back whilst...
	add	S,	8,	T1	; ...setting lower bound
	bcs,a	1b			; loop back whilst...
	sub	S,	8,	T2	; ...setting upper bound
	ld	[S+4],	tmp1		; put place to jump to in tmp1
	jmpl	tmp1,	ZERO		; jump there
	nop

	global	wm_nciadc
wm_nciadc:
	callC1	next_choice_in_a_deleted_clause, UArg1
	jmp	UArg1
	nop
