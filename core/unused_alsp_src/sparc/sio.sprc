;
; sio.sprc		-- blindingly fast stream I/O primitives
;	Copyright (c) 1992-1993 by Applied Logic Systems, Inc.
;
; Author: Kevin A. Buettner
; Creation 4/9/92
; Revision History:
;


#include "assembly.sprc"
#include "bsio.h"

#define FENCESZ	4

	text
	global	wm_sio_gbyte
wm_sio_gbyte:
	deref	A1,	1f			; deref first arg
gbfail:	fail					; fail if variable
1:	cmp	tmp1,	MTP_STRUCT		; see if we have a structure
	bne,a	gbfail				; branch if we don't
	nop

	ld	[tmp2],	UArg1			; get functor
	set	MMK_FUNCTOR(SIO_SD_FUNCTOR,SIO_SD_ARITY), tmp1
	cmp	UArg1,	tmp1
	bne,a	gbfail				; fail if not correct functor
	nop
	ld	[tmp2+4], UArg1			; get first argument
	deref	UArg1,	gb1arg
	fail					; fail if variable

gb1arg:	and	UArg1, MTP_CONSTMASK, tmp1
	cmp	tmp1,	MTP_UIA			; see if we have a UIA
	bne	gbfail				; fail if not uia
	srl	UArg1, MTP_CONSTSHIFT, UArg1
	add	HeapBase, UArg1, UArg1		; UArg1 now has UIA address

	ld	[UArg1+(FENCESZ+sio_FLAGS)], tmp1 ; get the flags
	andcc	tmp1,	SIOF_READ, ZERO		; see if read mode is set
	bne	1f				; branch if so
	nop
	set	SIOE_ILLREAD, tmp1		; otherwise....
	st	tmp1,	[UArg1+(FENCESZ+sio_ERRCODE)]
	fail					; ..we've tried an illegal read
1:	deref	A2,	2f			; dereference second argument
	ba,a	1f				; continue if variable
2:	and	A2, MTP_CONSTMASK, tmp1		; get the constant tags
	cmp	tmp1,	MTP_INT			; see if we have an integer
	bne	gbinarg
	cmp	A2,	MMK_INT(-1)
	bl	gbinarg
	cmp	A2,	MMK_INT(255)
	bg	gbinarg
	nop

1:	ld	[UArg1+(FENCESZ+sio_CPOS)], tmp1 ; get current char position
	ld	[UArg1+(FENCESZ+sio_LPOS)], tmp2 ; get last pos
	cmp	tmp1,	tmp2			; see if we've gone too far
	bl,a	1f				; branch if we haven't
	add	tmp1,	1,	tmp1		; advance cpos in delay slot
	set	SIOE_READ,	tmp2		; otherwise, we need...
	st	tmp2, [UArg1+(FENCESZ+sio_ERRCODE)] ; ... a new buffer
	fail
1:	set	SIOE_NORMAL,	tmp2		; status is normal
	st	tmp2, [UArg1+(FENCESZ+sio_ERRCODE)]
	st	tmp1, [UArg1+(FENCESZ+sio_CPOS)]
	add	tmp1,	UArg1,	tmp1		; buffer to position
	ldub	[tmp1+(sio_BUFFER-1+FENCESZ)], UArg2
	cmp	UArg2,	10			; see if we have newline
	bne	1f				; branch if not
	sll	UArg2,	MTP_CONSTSHIFT, UArg2	; shift UArg2 in delay slot
	ld	[UArg1+(FENCESZ+sio_LINENUM)], tmp2
	add	tmp2,	1,	tmp2		; advance line count
	st	tmp2, [UArg1+(FENCESZ+sio_LINENUM)]
	ba	2f
	st	ZERO, [UArg1+(FENCESZ+sio_COLUMN)] ; zero column counter
1:	ld	[UArg1+(FENCESZ+sio_COLUMN)], tmp2
	add	tmp2,	1,	tmp2
	st	tmp2, [UArg1+(FENCESZ+sio_COLUMN)] ; increment column counter
2:	add	UArg2, MTP_INT, UArg2		; tag the character as int
	mov	A2,	UArg1			; put second arg in UArg1
	sub	CP,	8,	RET		; set up RET for unifier call
	ba	wm_unify			; call unifier
	mov	OldE,	E			; unlink environment

gbinarg:
	set	SIOE_INARG,	tmp1
	st	tmp2, [UArg1+(FENCESZ+sio_ERRCODE)] ; ... a new buffer
	fail



	global	wm_sio_pbyte
wm_sio_pbyte:
	deref	A1,	1f			; deref first arg
pbfail:	fail					; fail if variable
1:	cmp	tmp1,	MTP_STRUCT		; see if we have a structure
	bne,a	pbfail				; branch if we don't
	nop

	ld	[tmp2],	UArg1			; get functor
	set	MMK_FUNCTOR(SIO_SD_FUNCTOR,SIO_SD_ARITY), tmp1
	cmp	UArg1,	tmp1
	bne,a	pbfail				; fail if not correct functor
	nop
	ld	[tmp2+4], UArg1			; get first argument
	deref	UArg1,	pb1arg
	fail					; fail if variable

pb1arg:	and	UArg1, MTP_CONSTMASK, tmp1
	cmp	tmp1,	MTP_UIA			; see if we have a UIA
	bne	gbfail				; fail if not uia
	srl	UArg1, MTP_CONSTSHIFT, UArg1
	add	HeapBase, UArg1, UArg1		; UArg1 now has UIA address
	ld	[UArg1+(FENCESZ+sio_FLAGS)], T2 ; put the flags in T2
	ld	[UArg1+(FENCESZ+sio_LPOS)], T3	; put last pos in T3
	andcc	T2,	SIOF_WRITE,	ZERO	; see if in write mode
	bne,a	1f				; branch if so
	and	T2, (SIOF_READ|SIOF_EOF), tmp1	; check on read and eof flags..
						; ...in delay slot
	set	SIOE_ILLWRITE, tmp1		; otherwise we've tried to
	st	tmp1,	[UArg1+(FENCESZ+sio_ERRCODE)] ; and illegal write
	fail					;
1:	cmp	tmp1,	SIOF_READ		; see if only read flag set
	bne	1f				; branch if not
	cmp	T3,	ZERO			; see if last pos is zero
	bne	1f				; branch if not
	nop
	;
	; If we've fallen through to this point, we are
	;	in read_write mode
	;	the buffer is empty,
	;	and end-of-file has not been encountered
	; So we need to fill the buffer up if possible
	;
	set	SIOE_READ,	tmp1
	st	tmp1,	[UArg1+(FENCESZ+sio_ERRCODE)]
	fail
1:	deref	A2,	pb2ndarg		; dereference second argument
	; invalid argument  if variable
pbinarg:
	set	SIOE_INARG,	tmp1
	st	tmp1,	[UArg1+(FENCESZ+sio_ERRCODE)]
	fail
pb2ndarg:
	and	A2,	MTP_CONSTMASK,	tmp1	; put constant mask in tmp1
	cmp	tmp1,	MTP_INT			; see if arg is an integer
	bne	pbinarg				; branch if not
	; The following instruction will not hurt if branch taken in delay slot
	ld	[UArg1+(FENCESZ+sio_CPOS)], T1	; get position to write to
	srl	A2,	MTP_CONSTSHIFT,	A2	; untag byte to write
	add	T1,	UArg1,	tmp1		; combine uia addr and cpos
	stb	A2,	[tmp1+(FENCESZ+sio_BUFFER)] ; store the byte
	add	T1,	1,	T1		; advance current position
	cmp	T1,	T3			; see if past lpos
	ble	1f				; branch if not
	st	T1,	[UArg1+(FENCESZ+sio_LPOS)] ; store to memory
	mov	T1,	T3			; fix shadow in reg also
1:	st	T1,	[UArg1+(FENCESZ+sio_CPOS)] ; store char pos
	or	T2,	SIOF_DIRTY,	T2	; or dirty flag into rest of
						; flags
	st	T2,	[UArg1+(FENCESZ+sio_FLAGS)] ; set the flags

	; We now need to check the flags and the LPOS value to see if the
	; buffer needs to be written.  If it does, we will fail with
	; ERRCODE set to SIOE_WRITE.

	andcc	T2,	SIOF_BBYTE,	ZERO	; see if we're byte buffering
	bne	pbwrbuf				; branch if so
	andcc	T2,	SIOF_BLINE,	ZERO	; see if we're line buffering
	be	1f				; branch if not
	ld	[UArg1+(FENCESZ+sio_BFSIZE)], tmp1 ; get buffer size
	cmp	A2,	10			; see if last char was newline
	be	pbwrbuf				; branch if so
	nop
1:	cmp	tmp1,	T3			; see if buffer is full
	be	pbwrbuf
	nop
	set	SIOE_NORMAL,	tmp1
	st	tmp1,	[UArg1+(FENCESZ+sio_ERRCODE)]
	proceed

pbwrbuf:
	; we will come here if the buffer needs to be written out
	set	SIOE_WRITE,	tmp1
	st	tmp1,	[UArg1+(FENCESZ+sio_ERRCODE)]
	fail
