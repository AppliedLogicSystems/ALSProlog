;
; interface.sprc	-- Prolog / C interface
;	Copyright (c) 1991-1993 by Applied Logic Systems, Inc.
;
; Author:	Kevin A. Buettner
; Creation:	1/14/91
; Revision History:
;
;

#include "assembly.sprc"
#include "wintidx.h"

;
; wm_exec is the point at which we enter the Prolog environment from C.
;
;

	global	wm_exec
wm_exec:
	save	cSP,	-128,	cSP
	call	save_glob		; save globals
	nop

	;
	; load registers with initial values
	;

	push_regs	UArg1		; UArg1 gets base address to use
	ld	[UArg1+4*wm_SP_idx],	SP
	ld	[UArg1+4*wm_SPB_idx],	SPB
	ld	[UArg1+4*wm_B_idx],	B
	ld	[UArg1+4*wm_TR_idx],	TR
	ld	[UArg1+4*wm_H_idx],	H
	mov	H,	HB		; set HB equal to H
	set	wm_trust_fail,	Fail	; set Fail to something reasonable
	store	ZERO,	wm_interrupt_caught
	call	enter_Prolog

	mov	SP,	OldE
	mov	SP,	E		; 
	jmpl	A1,	CP
	add	CP,	GC_INFO_SIZE, CP

	gcinfo	0,	0,	0

	ba,a	leave_prolog2



;
; save_glob is called to save globals in the current frame
;

save_glob:
	st	g2,	[cFP-4]
	st	g3,	[cFP-8]
	st	g4,	[cFP-12]
	st	g5,	[cFP-16]
	st	g6,	[cFP-20]
	retl
	st	g7,	[cFP-24]


;
; restore_glob is called to restore globals in the current frame
;

restore_glob:
	ld	[cFP-4],	g2
	ld	[cFP-8],	g3
	ld	[cFP-12],	g4
	ld	[cFP-16],	g5
	ld	[cFP-20],	g6
	retl
	ld	[cFP-24],	g7


;
; enter_Prolog is called to indicate that Prolog has been entered.  The
;	wm_in_Prolog flag is set appropriately and the wm_interrupt caught
;	flag is checked.  If it is set then the safety register is set to -1.
;	HeapBase and StkBot are also set to their values.
;


	global	enter_Prolog
enter_Prolog:
	load	wm_interrupt_caught,	UArg2
	add	ZERO,	1,	tmp2
	store	tmp2,	wm_in_Prolog
	load	wm_stackbot,	StkBot
	load	wm_heapbase,	HeapBase
	add	StkBot,	2048,	StkBot		; give ourselves a margin
	cmp	UArg2,	0
	bne,a	1f
	sub	ZERO,	1,	Safety
	load	wm_safety,	Safety
1:	retl
	nop


;
; wm_rungoal is called by C to run a goal, the structure of which resides
;	on the heap
;

	global	wm_rungoal
wm_rungoal:
	save	cSP,	-128,	cSP
	call	save_glob		; save globals
	nop

	;
	; load registers with initial values
	;

	push_regs	UArg1		; UArg1 gets base address to use
	ld	[UArg1+4*wm_SP_idx],	SP
	ld	[UArg1+4*wm_SPB_idx],	SPB
	ld	[UArg1+4*wm_B_idx],	B
	ld	[UArg1+4*wm_TR_idx],	TR
	ld	[UArg1+4*wm_H_idx],	H
	mov	H,	HB		; set HB equal to H
	store	ZERO,	wm_interrupt_caught
	call	enter_Prolog

	mov	SP,	OldE
	sub	SP,	20,	SP	; allocate a new frame
	add	SP,	20,	A3	; set up a cutpt
	; Above line is suspect...I think it should be sub SP,4,A3
	; then a cut in wm_colon below will not cut away the rungoal_chpt
	tag_cut	A3,	A3		; tag it as a cutpoint
	mov	SP,	E		; set up E
	call	rungoal_chpt
	add	RET,	GC_INFO_SIZE, CP

	gcinfo	0,	0,	0
	ba	leave_prolog2
	add	ZERO,	1,	A1	; setup A1 with successful completion

rungoal_chpt:
	set	rungoal_trust,	Fail	; make sure Fail has legit value
	try_me_else wm_try3,	rungoal_trust
	sub	SP,	20,	SP	; allocate a new stack frame
	ba	wm_colon		; branch to colon
	mov	SP,	E		;   whilst setting E

rungoal_trust:
	ba	leave_prolog2		; branch to leave_prolog whilst...
	mov	ZERO,	A1		;  ...putting zero into r2

	;
	; leave_prolog2 is similar to leave_prolog, but preserves the
	; bindings made in process of running goal.
	;

leave_prolog2:
	call	wm_docut2			; cut away choice points
	sub	E,	4,	UArg1		; want to cut away rungoal chpt
						; but no more

	store	ZERO,	wm_in_Prolog		; no longer in prolog
	pop_regs	UArg1			; UArg1 gets base address to use
	st	TR,	[UArg1+4*wm_TR_idx]
	st	B,	[UArg1+4*wm_B_idx]
	call	restore_glob			; restore globals
	st	H,	[UArg1+4*wm_H_idx]
	ret
	restore


;
; wm_exec_builtinN
;
;	This is Prolog's entry point back to C.  Upon entry, UArg1 has the
;	address of the C routine to call
;

	global	wm_exec_builtin3
	global	wm_exec_builtin2
	global	wm_exec_builtin1
	global	wm_exec_builtin0

wm_exec_builtin3:
	st	A3,	[E+16]
wm_exec_builtin2:
	st	A2,	[E+12]
wm_exec_builtin1:
	st	A1,	[E+8]
wm_exec_builtin0:
	try_me_else	wm_try0,	wm_trust_fail
	regs_base	T1
	st	SP,	[T1+4*wm_SP_idx]	; save Prolog SP
	st	E,	[T1+4*wm_E_idx]		; save Prolog E
	st	B,	[T1+4*wm_B_idx]		; save B
	st	H,	[T1+4*wm_H_idx]		; save H
	st	TR,	[T1+4*wm_TR_idx]	; save TR
	st	SPB,	[T1+4*wm_SPB_idx]	; save SPB
	st	HB,	[T1+4*wm_HB_idx]	; save HB
	store	ZERO,	wm_in_Prolog		; leaving Prolog for a while

	;--- Call the C routine
	save	cSP,	-96,	cSP		; protect Prolog's registers
	jmpl	UArg1,	RET			; call the C function
	nop
	restore	o0,	0,	UArg1		; restore Prolog's registers and
						; move the result to UArg1
	;--- Now we are back

	;
	; As in the VAX implementation, failure is determined by examining
	; the return status register.  This happens to be UArg1 after the
	; above sequence

	ld	[T1+4*wm_H_idx],	H	; reload H
	ld	[T1+4*wm_HB_idx],	HB	; reload HB
	ld	[T1+4*wm_TR_idx],	TR	; reload TR
	ld	[T1+4*wm_B_idx],	B	; reload B (gv_alloc can 
						;   change it)
	add	ZERO,	1,	tmp2
	store	tmp2,	wm_in_Prolog		; indicate that we are back
						; in Prolog

	load	wm_safety,	Safety		; reload Safety

	cmp	UArg1,	0			; see if we failed
	bne,a	1f				; branch if not (success)
	mov	E,	UArg1			; set UArg1 for upcoming cut
	;
	; wm_fail is returned by the resolve reference code when it can't
	; find the thing which needs to be run
	;
	global	wm_fail
wm_fail:
	fail					; else fail
1:
	mov	OldE,	E			; unlink top stack frame
	ba	wm_docut2			; cut away top choice point
	sub	CP,	8,	RET

;
;  wm_resolve_ref	-- this code is called when an undefined procedure
;			   is encountered in the execution of the Prolog
;			   program.  Upon entry, UArg1 contains the start of
;			   the code in the name entry.  This address is passed
;			   off to some C code which links in the real code to
;			   run (if it can find some) and returns the address
;			   of the code to run in UArg1.  If things went
;			   properly, this will presumably be the original
;			   UArg1.  It may, however, be the failure code or ...
;
	
	global	wm_resolve_ref
wm_resolve_ref:
	callC1	resolve_reference,	UArg1
	jmpl	UArg1,	ZERO
	nop


;
; _w_unify		-- This is C's entry point to the unifier
;
;

	global	_w_unify
_w_unify:
	
	save	cSP,	-128,	cSP
	call	save_glob		; save globals
	nop
	regs_base	T3

	;
	; load registers with initial values
	;
	; Note: T3 is not used in the unifier so it will not be clobbered
	; by failure
	;

	ld	[T3+4*wm_SPB_idx],	SPB
	ld	[T3+4*wm_TR_idx],	TR
	ld	[T3+4*wm_HB_idx],	HB
	ld	[T3+4*wm_SP_idx],	SP
	load	wm_heapbase,	HeapBase
	mov	A1,	UArg1
	set	unfail,	Fail
	call	wm_unify
	mov	A2,	UArg2
	ba	1f
	add	ZERO,	1,	A1
unfail:	mov	ZERO,	A1
1:

	store	ZERO,	wm_in_Prolog		; set wm_in_Prolog to zero
						; as it may get inadvertently
						; set in the unifier
	call	restore_glob			; restore globals
	st	TR,	[T3+4*wm_TR_idx]
	ret
	restore
