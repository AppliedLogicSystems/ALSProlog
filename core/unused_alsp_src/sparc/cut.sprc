/*
 * cut.sprc		-- implementation of cut
 *	Copyright (c) 1992-1993 by Applied Logic Systems, Inc.
 *
 * Author: Kevin A. Buettner
 * Creation: 1/30/91
 * Revision History:
 *	4/31/92		kev	cut code removed from call.sparc
 *	4/31/92		kev	A/E stack compaction added
 */


#include "assembly.sprc"


;
; wm_docut	-- performs the cut operation
;	On entry, UArg1 will contain the environment to cut back to.  We
;	compare this value with SPB.  If SPB is bigger (older than) the
;	value in UArg1, things are already determinate and there is nothing
;	to do.  Otherwise, there is some work to do.
;

	global	wm_docut
	global	wm_docut2
wm_docut:
	cmp	Safety,	0			; Safety < 0 ?
	bl,a	cutexception			; branch if so
	nop
wm_docut2:					
	cmp	UArg1,	SPB			; compare Cut Env with SPB
	bcc,a	2f				; branch if we have work to do
	ld	[B+chpt_SPB],	SPB		; get SPB value in delay slot
	retl					; else return
	nop

	;
	; There is some work to do.  The first thing that needs to be done
	; is to find the choice point to cut back to.  We do this by walking
	; the choice point stack until we find a choice point with a saved
	; SPB which is bigger (older) than UArg1.


1:	ld	[B+chpt_SPB],	SPB		; get SPB value
2:	andn	SPB,	3,	SPB		; clear compaction bit
	cmp	UArg1,	SPB			; compare UArg1 with SPB
	bcc,a	1b				; branch if still nondeterminate
	ld	[B+chpt_B],	B		; get previous B in delay slot

cutcommon:
	ld	[B+chpt_Fail],	Fail		; load new Fail value
	ld	[B+chpt_HB],	HB		; load new HB value
	mov	B,	UArg2			; set lead pointer
	add	B,	chpt_size,	UArg1	; set follow pointer
	ld	[B+chpt_B],	B		; load new B pointer

	;
	; UArg2 is set to the choice point just prior to (newer than) the place
	; we are cutting to.  It as at the end of this choice point that we
	; will position the follow pointer.  The lead pointer will advance
	; til either the end of another choice record is found or until it
	; equals TR.
	;

cutloop:
	cmp	UArg2,	TR			; compare TR to lead pointer
	bne,a	1f				; branch if not done
	ld	[UArg2-4],	tmp1		; get trail entry in delay slot
	retl					; return if we are done and...
	mov	UArg1,	TR			;    set TR to follow pointer
						;    in delay slot
1:	sub	UArg2,	4,	UArg2		; decrement lead pointer
	cmp	UArg2,	tmp1			; see if lead ptr < entry
	bcs,a	cutloop				; branch if so (have end of
	sub	UArg2,	chpt_size-4, UArg2	; a choice point). move to front
						; of choice point in delay slot
	cmp	tmp1,	HB			; compare against HB
	bcc	cutloop				; don't keep it if HB is
						;    lower or the same
						; When branch is taken the
						; following instruction is
						; useless:
	cmp	tmp1,	SPB			; compare entry against SPB
	bcs	cutloop+4			; don't keep if SPB is bigger
	cmp	UArg2,	TR			; perform top of loop
						;   comparison in delay slot.
						; This comparison will also
						;   work for instructions below
						;   as they do not modify the
						;   condition codes
	st	tmp1,	[UArg1-4]		; store the entry when we
						;   want to keep it
	ba	cutloop+4			; loop back to top with
						;   condition codes set from
						;   previous compare
	sub	UArg1,	4,	UArg1		; decrement follow pointer


	;
	; cutexception is called when the safety register contains a negative
	; value.  This means that an interrupt has been triggered.
	;

cutexception:
	sub	SP,	8,	SP		; create a dummy frame
	st	E,	[SP]			; save current environment
	mov	RET,	tmp1			; hang on to return address
	call	1f				; go around GC info
	add	RET, GC_INFO_SIZE, RET		; advance RET over the gc info

	;
	; The following words are gc info
	;

	gcinfo	0,	0,	0

1:	st	RET,	[SP+4]			; store the dummy return address
	mov	SP,	E			; set up E with this environment
	sub	SP,	48,	SP		; allocate space to save some
						;   stuff
	st	tmp1,	[E-4]			; save the real return address
	st	CP,	[E-8]			; save the CP and OldE in case
	st	OldE,	[E-12]			;   they were being used
	st	A1,	[E-16]			; save the argument regs
	st	A2,	[E-20]
	st	A3,	[E-24]
	st	T1,	[E-28]			; save the temporaries
	st	T2,	[E-32]
	st	T3,	[E-36]

	load	wm_cutaddr,	UArg2		; get contents of wm_cutaddr

	tag_cut	UArg1,	A1			; tag cutpt as integer and put
						;   into A1
	jmpl	UArg2,	RET			; call cut proc entry
	mov	E,	OldE			; put E into OldE

	gcinfo	0,	0,	9		; nine perm vars

	ld	[E-4],	RET			; load real return address
	ld	[E-8],	CP			; load CP and OldE
	ld	[E-12],	OldE
	ld	[E-16],	A1			; load the argument regs
	ld	[E-20],	A2
	ld	[E-24],	A3
	ld	[E-28],	T1
	ld	[E-32],	T2
	ld	[E-36],	T3
	mov	E,	SP			; set SP to E
	ld	[SP],	E			; reload original E
	retl					; return to caller
	add	SP,	8,	SP		; put SP back where it started


;
; wm_cut performs the cut from within call.  This procedure
; is similar to the above procedure, but it is also responsible
; for cleaning up the argument/environment stack.
;
; T1 contains the module id.  (Not really important for cut).
;

	global	wm_cut
wm_cut:
	untag_cut A1,	UArg1			; untag the cut point
	mov	OldE,	E			; unlink current environment
	sub	CP,	8,	RET		; set up RET to return

	cmp	UArg1,	SPB			; compare Cut Env with SPB
	bcc,a	2f				; branch if we have work to do
	ld	[B+chpt_SPB],	SPB		; get SPB value in delay slot
	retl					; else return
	nop

	;
	; There is some work to do.  The first thing that needs to be done
	; is to find the choice point to cut back to.  We do this by walking
	; the choice point stack until we find a choice point with a saved
	; SPB which is bigger (older) than UArg1.


1:	ld	[B+chpt_SPB],	SPB		; get SPB value
2:	andn	SPB,	3,	SPB		; clear compaction bit
	cmp	UArg1,	SPB			; compare UArg1 with SPB
	bcc,a	1b				; branch if still nondeterminate
	ld	[B+chpt_B],	B		; get previous B in delay slot


	;
	; We have found the choice point to cut back to.  This is the
	; value in B.  But before we cut back to this point, we must clean
	; up the argument/environment stack.  After the cleanup, the rest
	; of the cut operation is performed by branching to cutcommon.
	; The code at cutcommon will set SPB, HB, and Fail.  It will also
	; utilize UArg1 and UArg2 for trail cleanup.  Therefore we have these
	; five registers free to use in whatever manner we desire in the
	; argument/environment cleanup code.  A1-A3 and T1-T3 are also
	; available.
	;
	; Note: On the Sparc, we have plenty of registers to work with.
	; Allocating registers on the M68k was a bit tricky and I expect
	; it to be even trickier on the I386.
	;

	;
	; See if any compaction needs to be done
	;

	cmp	UArg1,	E
	bleu	cutcommon		; No arg/env compaction necessary
	nop


	;
	; A/E stack compaction -- Step 1:
	;
	; Traverse active environments back to "cutpt".  In the process of
	; traversing the active environments, we will record in a small table
	; the start and end of each environment.  A third slot in the table
	; will be used to store "adjustment" values for use in the compaction
	; phase.
	;
	; Register Usage
	;	SPB	-- stack frame corresponding to top choice point
	;		   after cut has been performed.  This is the value
	;		   that we will traverse back to / beyond.
	;	HB	-- Bottom of size/fixup table (we use the portion
	;		   above H on the heap to store this table).  This
	;		   will correspond with the most recent environment.
	;		   As an initialization step, HB := H.  Then H will
	;		   be incremented in the process of doing the
	;		   traversal.   When we are done, perform H := HB.
	;	H	-- Top of size/fixup table.  This entry will correspond
	;		   to the oldest environment examined thus far.
	;	CP	-- Return address from previous environment. This
	;		   value will be important in order to obtain
	;		   the size information for the current environment
	;		   being examined.
	;
	;	T1	-- current environment being examined.
	;	T3	-- higher environment address from previous iteration.
	;		   This address is used to determine whether to
	;		   create a new table entry or to
	;		   merge the result of the current iteration into
	;		   the top table entry.
	;

	mov	E,	T1		; set T1 to topmost environment
	mov	H,	HB		; HB is the table base
	mov	ZERO,	T3		; set higher environment address to
					; impossible value

	ld	[CP-8],	UArg1		; put size info into Uarg1
1:
	srl	UArg1,	16,	UArg2	; put number of env vars in UArg2
	sll	UArg1,	16,	UArg1	; wipe upper 16 bits of UArg1...
	srl	UArg1,	14,	UArg1	; ..shift back and multiply by four
	sll	UArg2,	2,	UArg2	; multiply by four
	add	UArg1,	8,	UArg1	; add in CP, CE sizes to number of args
	add	UArg1,	T1,	UArg1	; UArg1 now points one beyond last arg
	sub	T1,	UArg2,	UArg2	; UArg2 now points at last env var

	cmp	T3,	UArg2		; see if we can merge these values
					; into last table entry
	be,a	3f			; branch if so
	st	UArg1,	[H-8]		; modify high address of previous
					; entry (in delay slot)

	st	UArg2,	[H]		; save low address in table
	st	UArg1,	[H+4]		; save high address in table
	add	H,	12,	H	; advance table pointer

3:	mov	UArg1,	T3		; save high value for next iteration
	ld	[T1+4],	CP		; get next return address
	ld	[T1],	T1		; follow environment link

	cmp	SPB,	T1		; see if we are done
	bcc,a	1b			; branch if SPB greater or equal to T1
	ld	[CP-8],	UArg1		; put size info into UArg1 (delay slot)


	;
	; A/E Stack Compaction:  Step 2
	;
	; We have now set up the table.  We must now determine the starting
	; address to slide the environment values up to.  We do this by
	; examining the high value determined by the last iteration.  This
	; will be one beyond the last argument of the last environment examined.
	; If this value is greater than that of the SPB, then this is the
	; environment of the SPB and our initial starting value should
	; be the low address of that environment.  If the high value from the
	; last iteration is equal to SPB, then the environment abuts that of
	; SPB's environment and we again use the low address of this
	; environment as our starting value.  But if the high value is strictly
	; less than that of SPB, there is a gap between SPB and the last
	; examined environment, so we use SPB as our starting address to
	; slide things toward.
	;


	cmp	SPB,	UArg1		; see if SPB is bigger than high value
	bgu	1f			; from last iteration..branch if so
	mov	SPB,	T1		; set lead pointer with SPB in dslot

	ld	[H-12],	UArg2		; get low value...this needs to be
					; reloaded because of possible merging
	sub	H,	12,	H	; nuke table entry
	cmp	SPB,	UArg2		; see if SPB is bigger than low value
					; from previous iteration
	bgu,a	1f			; branch if so
	mov	UArg2,	T1		; set lead pointer in delay slot

	;
	; A/E Stack Compaction: Step 3
	;
	; T1 now contains the address to slide the argument/environment
	; stack towards (we will be shifting things from smaller addresses
	; to larger addresses).
	;
	; H will be one (table entry) above the last table entry.
	;
	; In this step we will pick up the table entries one by one and
	; move the range of addresses specified by these entries. In addition,
	; we will store an offset as the third value in the table.  This
	; offset will be used to fix up pointers which point into regions of
	; the stack which we are moving.
	;
	; Register Usage:
	;
	;	HB	-- bottom of size/fixup table
	;	H	-- top of the size/fixup table
	;	T1	-- address into A/E stack to which we move values
	;	T2	-- address into A/E stack from which we get values
	;	T3	-- initial value of T1; used to determine if a pointer
	;		   needs fixing or not
	;	A1	-- fixup value for the current environment
	;	A2	-- lower end of environment which we are moving
	;	A3	-- used to traverse size/fixup table
	;
	;	UArg1, UArg2, tmp1, and tmp2 are scratch
	;

1:	mov	ZERO,	A1		; initially, no fixup needed
	mov	T1,	T3		; set T3 with initial value

	cmp	H,	HB		; see if we are done
	be,a	cutcommon		; branch if we are
	add	E,	A1,	E	; fix up value of E in delay slot

	sub	H,	12,	H	; go to previous table entry
1:	ld	[H+4],	T2		; get high address
	ld	[H],	A2		; get low address
	sub	T1,	T2,	A1	; compute fixup value for current env
	st	A1,	[H+8]		; store fixup value into table

2:	ld	[T2-4],	UArg1		; get value
	andcc	UArg1,	3,	ZERO	; perform tag check
	bne	3f			; branch if anything but reference
	sub	T2,	4,	T2	; adjust pointer in delay slot
	cmp	UArg1,	T3		; see if pointer >= starting point
	bcc	3f			; branch if so
	cmp	UArg1,	A2		; see if smaller than lower end of
					; env (code pointer if so)
	bcs	3f			; branch if so
	mov	H,	A3		; set A3 to current entry in fixup tab
	; If we fall through to here, UArg1 contains a pointer to be fixed
4:	ld	[A3+4],	tmp1		; get high table entry
	cmp	UArg1,	tmp1		; see if ptr >= table entry
	bcc,a	4b			; branch if so (not done yet)
	add	A3,	12,	A3	; advance table ptr in delay slot
	ld	[A3+8],	tmp1		; get fixup value
	add	UArg1,	tmp1,	UArg1	; add fixup value to pointer

3:	st	UArg1,	[T1-4]		; move the value
	cmp	T2,	A2		; see if more environment to move
	bne	2b			; branch if more env to move
	sub	T1,	4,	T1	; adjust pointer in delay slot
	cmp	H,	HB		; see if totally done
	bne,a	1b
	sub	H,	12,	H	; goto previous table entry

	ba	cutcommon		; we are done!
	add	E,	A1,	E	; fix up value of E in delay slot
