;
; interrupt.sprc	-- stuff for implementing Keith's interrupts
;	Copyright (c) 1991-1993 by Applied Logic Systems, Inc.
;
; Author:	Kevin A. Buettner
; Creation:	2/5/91
; Revision History:
;

#include "assembly.sprc"
#include "wintidx.h"
#include "wntbl.h"
#include "alssig.h"

	text
;
; dbg_spycheck is called to perform the move, subtract, and compare sequence
;	necessary for checking for overflow.  Prior to doing the check though,
;	it checks to see if spying is activated.  If it is (and if the safety
;	register has a normal value), debug mode is set.
;
;

	global	dbg_spycheck
dbg_spycheck:
	load	wm_spying,	tmp1		; load the spying flag
	cmp	tmp1,	0			; see if we are spying
	be	1f				; branch if we are not
	nop
	sub	ZERO,	1,	Safety		; set safety to -1
1:	

	sub	TR,	H,	tmp1		; perform heap overflow check
	retl					
	cmp	tmp1,	Safety


;
; dbg_decr_icount is not really a debugger function, but is similar in nature
;	to dbg_spycheck above.  Like dbg_spycheck it performs the move,
;	subtract, and compare necessary for overflow and decompilation tests.
;	Prior to doing this, however, it calls decr_icount which decrements
;	icount field in the procedure entry.  If zero, indexing is performed.
;	Otherwise, execution continues as normal.  What this does is
;	regenerates (or generates for the first time) indexing for the
;	procedure after it has been called some number of small times
;	without modification.
;
; Note: On the SPARC, this operation takes the place of the stack overflow
;	checking code; not the heap/trail overflow check.
;
;

	global	dbg_decr_icount
dbg_decr_icount:
	add	RET, NTBL_EXECENTRYSIZE*4, UArg1	
						; set UArg1 to the address
						; of the "code" field in a
						; procedure entry
	callC1	decr_icount,	UArg1		; call C


	sub	TR,	H,	tmp1
	retl
	cmp	tmp1,	Safety

;
; wm_overflowN is called when an exception condition is detected prior
;	to executing a procedure.  RET will be set to the exec_entry field
;	of the name table entry we are in.
;

	global	wm_overflow3
	global	wm_overflow2
	global	wm_overflow1
	global	wm_overflow0

wm_overflow3:
	st	A3,	[E+16]
wm_overflow2:
	st	A2,	[E+12]
wm_overflow1:
	st	A1,	[E+8]
wm_overflow0:
	cmp	Safety,	0			; see if normal overflow has
						; occurred
	bl	2f				; branch if not (an interrupt)
	mov	RET,	T1			; store return address in T1

	;
	; The code for doing a garbage collection
	;

	regs_base	T2			; get regs base into T2

	call	wm_try0				; create a choice point
	sub	TR,	16,	TR


	st	SP,	[T2+4*wm_SP_idx]	; save Prolog SP
	st	E,	[T2+4*wm_E_idx]		; save Prolog E
	st	B,	[T2+4*wm_B_idx]		; save B
	st	H,	[T2+4*wm_H_idx]		; save H
	st	TR,	[T2+4*wm_TR_idx]	; save TR
	st	SPB,	[T2+4*wm_SPB_idx]	; save SPB
	st	HB,	[T2+4*wm_HB_idx]	; save HB
	store	ZERO,	wm_in_Prolog		; leaving Prolog for a while

	callC0	gc				; call the garbage compactor

	ld	[T2+4*wm_SP_idx],	SP	; restore registers
	ld	[T2+4*wm_E_idx],	E
	ld	[T2+4*wm_B_idx],	B
	ld	[T2+4*wm_H_idx],	H
	ld	[T2+4*wm_TR_idx],	TR
	ld	[T2+4*wm_SPB_idx],	SPB
	ld	[T2+4*wm_HB_idx],	HB
	
	call	enter_Prolog
	trust_me_else_fail	wm_trust_u3	; restore A1, A2, A3, CP, and
						; OldE by trusting away chpt
	sub	TR,	H,	tmp1		; perform overflow test again
	load	wm_normal,	tmp2		; get wm_normal value
	cmp	tmp1,	tmp2			; see if still overflowed
	bcs,a	1f				; branch if so
	srl	tmp2,	1,	tmp2		; halve wm_normal value
						;	(in delay slot)
	jmpl	T1,	ZERO			; return to caller
	nop

1:	store	tmp2,	wm_normal		; store back
	cmp	tmp2,	1024			; see if too small after
						;  dividing by two
	bcc	1f				; branch if not
	nop
	callC0	heap_overflow
1:	set	ALSSIG_HEAP_OVERFLOW, tmp2	;
	store	tmp2, wm_interrupt_caught
	sub	ZERO,	1,	Safety		; put -1 in safety reg
	; fall into interrupt code

;
; The following code is entered when an interrupt has occurred.  Safety has
; a negative value.  Our goal here is to restore the normal value to Safety
; and build a structure represting the frame on the stack and then
; execute whatever wm_overcode points at.
;

2:
	mov	T1,	UArg1			; put address of overflow
						;    field into UArg1
	callC1	int_get_goal_tokid, UArg1	; get the token id
	mov	UArg1,	A3			; put token id into A3
	mov	T1,	UArg1			; put address of overflow
						;    field back into UArg1
	callC1	int_get_module,	UArg1		; get the module id
	mov	UArg1,	A2
	load	wm_interrupt_caught,	A1	; put interrupt caught into A1
	srl	A3,	24,	UArg1		; put arity into UArg1
	cmp	UArg1,	0			; see if zero
	be	5f				; branch if atomic
	add	SP,	8,	SP		; make SP point at first arg
						;    (in delay slot)
	st	A3,	[H]			; store functor on heap
	add	H, MTP_STRUCT,	A3		; put struct ptr in A3
	sll	UArg1,	2,	UArg1		; multiply by four
	add	H,	UArg1,	H		; make H point at last entry
						;   (not beyond)
	add	SP,	UArg1,	SP		; make SP point at one beyond
						;   last entry
	sub	ZERO,	UArg1,	UArg1		; negate UArg1
1:	ld	[SP+UArg1],	S		; get stack argument
	deref	S,	3f			; dereference it
	cmp	HeapBase,	S		; see if var is on local stack
	bleu	4f				; branch if not
	addcc	UArg1,	4,	UArg1		; advance counter (in delay
						;   slot)
	mov	S,	tmp2			; put lstack var in tmp2
	add	H,	UArg1,	S		; put heap loc in S
	st	S,	[tmp2]			; bind stack location
	cmp	tmp2,	SPB			; see if we need to bind
	bcs	4f				; branch if we don't
	cmp	UArg1,	0			; reset condition codes in
						;   delay slot for both
						;   branch taken and untaken
	sub	TR,	4,	TR		; predecrement TR for the...
	ba	4f				; branch to end of loop
	st	tmp2,	[TR]			;   ...trailing operation



3:	addcc	UArg1,	4,	UArg1		; increment UArg1 and see if done
4:	bne	1b
	st	S,	[H+UArg1]		; store on heap

	add	H,	4,	H		; advance H

5:	
	load	wm_overcode,	T1		; get place to jump to
	store	ZERO,	wm_interrupt_caught	; clear interrupts
	load	wm_normal,	Safety		; set normal interrupts
	store	Safety,	wm_safety
	sll	A1, MTP_CONSTSHIFT, A1		; shift A1 left
	add	A1, MTP_INT,	A1		; tag it as an integer
	jmpl	T1,	ZERO
	sub	SP,	20,	SP		; allocate a new frame




;
; wm_throw
;

	data
c22dat:	word	0
	text

	global	wm_throw
wm_throw:
	load	c22dat,	UArg1
throwentry:
	load	wm_regidx,	T1		; get regidx
	set	wm_regs,	tmp1		; subtract 1
	sub	T1,	1,	T1
	sll	T1,	6,	T1
	add	tmp1,	T1,	T1		; compute regs base

	ld	[T1+4*wm_B_idx], T1		; put original B into T1

1:	cmp	UArg1,	Fail			; compare Fail with the
						;   catch22 address
	bne,a	2f				; continue if not equal
	ld	[B+chpt_B],	T2		; get the next B (delay slot)

	fail					; fail if there

2:	cmp	T2,	T1			; see if at end of line
	bne,a	4f				; branch if not
	cmp	B,	TR			; do comparison in delay slot

 	load	wm_aborted,	UArg1
 	add	UArg1,	1,	UArg1	; increment wm_aborted flag
	store	UArg1,	wm_aborted		;
	fail

3:
	add	TR,	4,	TR		; advance trail
	cmp	B,	TR			; see if done
	st	tmp1,	[tmp1]			; reset trail entry
4:	bgu,a	3b
	ld	[TR],	tmp1			; get trail entry

	ld	[B+chpt_SPB],	SPB		; get SPB value
	ld	[B+chpt_Fail],	Fail		; get Fail
	ld	[B+chpt_HB],	HB		; get HB
	add	TR,	chpt_size,	TR	; advance TR
	andn	SPB,	3,	SPB		; clear compaction bit

	ba	1b				; loop and...
	mov	T2,	B			; advance to next choice point

;
; wm_catch22
;

	global	wm_catch22
wm_catch22:
	store	Fail,	c22dat
	proceed


;
; set_prolog_interrupt
;

	global	set_prolog_interrupt
set_prolog_interrupt:
	load	cntrl_c_resume,	Safety		; get place to resume execution
	jmpl	Safety,	ZERO			; resume execution and
	sub	ZERO,	1,	Safety		; set safety to -1
