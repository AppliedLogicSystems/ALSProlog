;
; unify.vax	-- unification code for the vax processor
;	Copyright (c) 1990 Applied Logic Systems, Inc.
;
; Author:	Kevin A. Buettner
; Creation:	5/31/90
;
;

#include "assembly.vax"

	;
	; wm_unify
	;	r0	-- argument to unifier
	;	r1	-- argument to unifier
	;	
	;	r2	-- place where initial r0 argument is put internal to
	;		   unifier after dereferencing.  This register will
	;		   not be saved/restored across the unifier
	;
	;	Upon Failure, the values of T1, S, H, and SP may be corrupted.
	;	This is okay since failure either resets or ignores these
	;	values (to be reset later in a different context).
	;		

ufail3:	fail

ustruct:
	bsbb	deref2			; dereference
	decb	r0			; test for structure tag
	bneq	ufail3
	bicl2	#MTP_STRUCT, r1		; nuke tag
	bicl2	#MTP_STRUCT, r2		; nuke tag
	movl	(r1)+,	r0		; get the functor
	cmpl	r0,	(r2)+		; see if equal to other functor
	bneq	ufail3			; branch if unequal
	extzv	#24, #8, r0, r0		; extract the arity
	decl	r0			; subtract one
	bneq	2f
	movl	(r1),	r0		; do the arity=1 case
	movl	(r2),	r1
	brb	wm_unify
2:	pushl	S			; save S
	pushl	T1			; save T1
	pushl	H			; save H
	movl	r1,	H		; set up arg pointer in H
	movl	r2,	S		; set up other arg pointer in S
	movl	r0,	T1		; set up counter in T1
3:	movl	(H)+,	r0		; set up argument for unifier
	movl	(S)+,	r1		; set up another argument
	bsbb	wm_unify		; call unifier recursively
	sobgtr	T1,	3b		; loop around
	movl	(H),	r0		; set up last argument
	movl	(S),	r1		; ...
	movl	(SP)+,	H
	movl	(SP)+,	T1
	movl	(SP)+,	S		; restore registers
	brb	wm_unify		; tail recurse to unifier

deref2:
	bicb	#0xfc,	r1,	r0
	bneq	drf2ret
1:	movl	(r1),	r0
	cmpl	r1,	r0
	bneq	2f
	bind	r2,	r1
drf2popret:
	addl	#4,	SP		; pop over the local return
	rsb				; return from unifier instead
2:	movl	r0,	r1
	bicb	#0xfc,	r0
	beql	1b
drf2ret:
	cmpl	r2,	r1		; see if equal
	beql	drf2popret		; branch if so
	rsb



	global wm_unify
wm_unify:
	deref	r0,	r2,	g2		; dereference r0 into r2

	;
	; Argument in r2 is a variable
	;

	deref	r1,	r1,	g1v2		; dereference r1 into r1

	;
	; Both arguments are variables.  We must decide which way
	; to do the binding. 
	;


	cmpl	r1,	r2			; see if equal
	beql	uret				; return if equal
	blssu	1f				; branch if r1 < r2

	movl	r1,	r0			; swap roles of
	movl	r2,	r1			;    r1 and r2
	movl	r0,	r2			;

1:	cmpl	r1,	wm_heapbase		; see if r1 is on heap
	blssu	2f				; branch if not
	movl	r1,	(r2)			; make r2's location point at r1
	cmpl	HB,	r2			; compare against HB
	blequ	1f				; branch if HB <= r2
	movl	r2,	-(TR)			; trail r2
1:	rsb					; return to caller

2:	; r1 is in Arg/Env Stack

	movl	r2,	(r1)			; make r1's loc point at r2
	cmpl	SPB,	r1			; compare against SPB
	bgtru	uret				; branch if not trailing needed
	movl	r1,	-(TR)			; do trailing if needed
uret:	rsb					; return to caller


g1v2:	; r1 contains a ground; r2 contains a variable.
	bind	r1,	r2			; perform the binding
	rsb

g2:	; r2 contains a ground object.
	; r0 contains the (2 bit) tag of r2
	cmpb	#MTP_LIST, r0			; compare to list tag
	beql	ulist				; do list case if equal
	blssu	uconst				; do structure case if less
	brw	ustruct

ulist:
	bsbw	deref2
	blbs	r0,	ufail
	bicl2	#MTP_LIST, r1		; nuke tag
	bicl2	#MTP_LIST, r2		; nuke tag
	movl	(r1)+,	r0		; get head argument for unifier
	pushl	r1			; save pointer to tail
	movl	(r2)+,	r1		; get other head argument
	pushl	r2			; save pointer to tail
	bsbw	wm_unify		; call unifier recursively
	movl	@(SP)+,	r0		; get tail
	movl	@(SP)+,	r1		; ditto
	brw	wm_unify		; tail recurse to unifier

uconst:
	bicb3	#~(MTP_CONSTMASK & ~MTP_TAGMASK), r2, r0
						; get const tags only
	beql	wm_g_int			; branch if an integer
	cmpb	#(MTP_SYM & ~MTP_TAGMASK), r0	; see if it is a symbol
	beql	wm_g_sym			; branch if so

	;
	; otherwise we have a uia
	;

	bsbw	deref2
	cmpzv	#0, #4, r1, #MTP_SYM		; see if we have a symbol
	bneq	1f				; branch if we don't
	callC2	cmp_sym_uia, r1, r2		; compare sym and uia
	brb	2f				; check result
1:	cmpzv	#0, #4, r1, #MTP_UIA		; see if we have a uia
	bneq	ufail				; branch if we don't
	callC2	cmp_uia_uia, r1, r2		; compare the uia's
2:	blbs	r0,	uret2			; branch if equal
ufail:	fail					; otherwise fail


	;
	; wm_u_sym	(read mode)
	;	r2	-- constant under consideration
	;
	; wm_g_sym
	;
	;	r1	-- Thing to dereference and match or bind
	;	r2	-- tagged constant
	;	
	;

	global	wm_u_sym
	global	wm_g_sym

wm_u_sym:
	movl	(S)+,	r1		; advance read mode pointer
wm_g_sym:
	bsbw	deref2

	addb	#1,	r1,	r0	; get ready for uia check
	bicb	#~MTP_CONSTMASK, r0	; do the masking
	bneq	ufail
	callC2	cmp_sym_uia, r2, r1	; compare the symbol and uia
	blbc	r0,	ufail		; fail if not equal
uret2:	rsb				; otherwise succeed



	;
	; wm_u_int	(read mode)
	;	r2	-- constant under consideration
	;
	; wm_g_int
	;
	;	r1	-- Thing to dereference and then match or bind
	;	r2	-- constant
	;

	global	wm_u_int
	global	wm_g_int

wm_u_int:
	movl	(S)+,	r1		; advance read mode pointer
wm_g_int:
	bsbw	deref2
ufail2:	fail


	;
	; wm_g_uia is called by code which needs to match an uninterned
	; atom in the head.
	;

	global	wm_g_uia
wm_g_uia:
	movl	(SP)+,	r2		; pop off return address
	deref	r0,	r1,	guia_ground
	subl	wm_heapbase, H,	r0	; put offset from beginning of heap
					; in r0
	ashl	#MTP_CONSTSHIFT, r0, r0	; shift for the tag
	addb	#MTP_UIA,	r0	; add in the tag
	bind	r0,	r1		; do the binding
	movzwl	(r2)+,	r0		; get number of longwords
1:	movl	(r2)+,	(H)+		; do the transfer
	sobgeq	r0,	1b
	jmp	(r2)			; jump back to the code

guia_ground:
	subb	#MTP_CONST,	r0	;
	bneq	ufail2			; fail if not constant
	movzwl	(r2)+,	r0		; get size of uia in longwords
	addl	#4,	r2		; advance over one fence
	moval	(r2)[r0],	-(SP)	; save new return address
	callC2	cmp_obj_str, r1, r2	; do the comparison
	blbc	r0,	ufail2		; fail if comparison failed
	rsb				; return to caller


	;
	; wm_p_uia is called by code which needs to set up a uia in the body.
	;
	; r0 will return the tagged uia
	;
	
	global	wm_p_uia
wm_p_uia:
	subl	wm_heapbase, H, r0	; put offset from beginning of heap
	ashl	#MTP_CONSTSHIFT, r0, r0	;   into r0 and shift it for the tag
	addb	#MTP_UIA,	r0	; add in the tag
	movl	(SP)+,	r2		; get return address
	movzwl	(r2)+,	r1		; put size in r1
1:	movl	(r2)+,	(H)+		; do the transfer
	sobgeq	r1,	1b		; loop around
	jmp	(r2)			; branch to r2


	;
	; wm_u_lval performs the unify local value operation (write mode)
	;
	; r0 contains the location to dereference and heapify.
	;

	global	wm_u_lval
wm_u_lval:
	deref	r0,	r1,	2f
	cmpl	r1,	wm_heapbase	; see if on the heap
	bgequ	2f			; branch if already on heap
	movl	H,	(r1)		; perform binding
	movl	H,	r1
	cmpl	r0,	SPB		; see if we need to trail
	blssu	2f			; branch if not
	movl	r0,	-(TR)		; trail it
2:	movl	r1,	(H)+		; store object on heap
	rsb				; return to caller


	;
	; wm_p_unsafe performs the put_unsafe operation
	;
	; r0	-- value to dereference
	; r1	-- value after dereferencing
	;

	global	wm_p_unsafe
wm_p_unsafe:
	deref	r0,	r1,	2f	; dereference
	cmpl	r1,	wm_heapbase	; see if on heap
	bgequ	2f			; branch if so
	movl	H,	(r1)		; otherwise bind
	movl	H,	r1		; set up r1 for return
	movl	H,	(H)+		; install variable on heap
	cmpl	r0,	SPB		; see if we need to trail
	blssu	2f			; branch if not
	movl	r0,	-(TR)		; trail it
2:	rsb
