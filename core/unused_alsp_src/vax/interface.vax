;
; interface.vax			-- Prolog / C interface
;	Copyright (c) 1990 Applied Logic Systems, Inc.
;
; Author:	Kevin A. Buettner
; Creation:	7/16/90
; Revision History:
;
;

#include "assembly.vax"
#include "wintidx.h"

;
; wm_exec is the point at which we enter the Prolog environment from C.
;
; Upon entry, r2-r11 are saved by the vax procedure call mechanism.
;

	entry	wm_exec, 0xffc

	;
	; compute array start
	;

	ashl	#6,	wm_regidx, r0
	movab	wm_regs[r0],	r0

	;
	; Get thing to execute into r1
	;

	movl	4(AP),	r1

	;
	; load registers with initial values
	;

	movl	4*wm_SP_idx(r0), SP
	movl	4*wm_SPB_idx(r0), SPB
	movl	4*wm_B_idx(r0),	B
	movl	4*wm_TR_idx(r0), TR
	movl	4*wm_H_idx(r0),	H
	movl	H,	HB			; set HB equal to H
	incl	wm_regidx
	pushl	#gce1				; create 
	pushl	4*wm_E_idx(r0)			; 	a dummy
	movl	SP, E				;		environment
	clrl	wm_interrupt_caught		; clear interrupt flag
	bsbb	enter_Prolog			; set flag indicating we are
						;    in Prolog (for interrupts)
	jsb	(r1)
gce1:
	tstw	I^#(gce2-gce1)

leave_prolog:
	clrl	wm_in_Prolog			; no longer in Prolog
	decl	wm_regidx
	ashl	#6,	wm_regidx, r1
	movab	wm_regs[r1],	r1

	cmpl	4*wm_B_idx(r1), B		; see if at end already!
	beql	3f				; branch if so
	brb	2f				; else branch

1:	movl	(TR)+,	r2			; get trail entry
	movl	r2,	(r2)			; set trail entry to unbound
2:	cmpl	B,	TR			; see if we need to untrail more
	bgtru	1b				; branch if so

	movl	chpt_B(B), r2			; get previous B
	cmpl	4*wm_B_idx(r1), r2		; see if we are at the end
	beql	3f				; branch if so
	movl	chpt_HB(B), HB			; get HB -- don't care about
						;    Fail or SPB
	moval	chpt_size(B), TR		; reset the trail pointer
	movl	r2,	B			; set B for next loop
	brb	2b				; loop back to untrailing
3:	movl	HB,	4*wm_H_idx(r1)		; Update H with bottom HB
	movl	FP,	SP			; reset SP
	ret					; return to caller

gce2:
	long	0				; no argument
	long	-1				; end of clause
	long	0				; this is a builtin

;
; enter_Prolog is called to indicate that Prolog has been entered.  The
;	wm_in_Prolog flag is set appropriately and the wm_interrupt caught
;	flag is checked.  If it is set then the safety register is set to -1.
;

	global	enter_Prolog
enter_Prolog:
	cvtbl	#1,	wm_in_Prolog
	tstl	wm_interrupt_caught
	beql	1f
	movl	#-1,	Safety
	brb	2f
1:	movl	wm_safety, Safety
2:	rsb


;
; wm_rungoal is called by C to run a goal, the structure of which resides
;	on the heap
;

	entry	wm_rungoal, 0xffc
	ashl	#6,	wm_regidx, r0
	movab	wm_regs[r0],	r0

	movl	4*wm_SP_idx(r0), SP		; set up the stack pointer

	pushl	#gce1				; create a partial
	pushl	4*wm_E_idx(r0)			; 	dummy environment
	pushal	-20(SP)				; push a cutpt
	pushl	8(AP)				; push the goal
	pushl	4(AP)				; push the module
	moval	12(SP),	E			; set E to dummy environment

	movl	4*wm_SPB_idx(r0), SPB		; load rest of registers
	movl	4*wm_B_idx(r0),	B
	movl	4*wm_TR_idx(r0), TR
	movl	4*wm_H_idx(r0),	H
	movl	H,	HB			; set HB equal to H
	incl	wm_regidx
	clrl	wm_interrupt_caught		; clear interrupt flag
	bsbb	enter_Prolog
	bsbb	rungoal_chpt
gcr1:	
	tstw	I^#(gcr2-gcr1)			; gc magic instruction
	movl	#1,	r0			; success value
rungoal_ret:
	brw	leave_prolog
gcr2:
	long	0				; no arguments
	long	-1				; end of clause
	long	0				; this is a builtin

rungoal_chpt:
	movl	E,	-(SP)
	movl	SP,	E			; create a new environment
	try_me_else	rungoal_trust
	subl	#20,	SP			; allocate new frame
	movl	16(E),	16(SP)			; move cutpoint
	movl	12(E),	12(SP)			; move second argument
	movl	8(E),	8(SP)			; move first argument
	movl	4(E),	4(SP)			; move return address
	movl	(E),	(SP)			; move environment value
	movl	SP,	E			; set E
	jmp	wm_colon

rungoal_trust:
	retry_me_else	rungoal_trust		; hack like showanswers
	movl	(E),	E
	clrl	r0
	brb	rungoal_ret


;
; wm_execute_builtin
;
;	This is Prolog's entry point back to C.  Upon entry, r0 will have
;	the address of the C function to call.
;

	global	wm_execute_builtin

wm_execute_builtin:
	try_me_else	wm_trust_fail

	ashl	#6,	wm_regidx, r2		; Get reg base
	movab	wm_regs[r2],	r2

	movl	SP,	4*wm_SP_idx(r2)		; save Prolog SP
	movl	E,	4*wm_E_idx(r2)		; save Prolog E
	movl	B,	4*wm_B_idx(r2)		; save B
	movl	H,	4*wm_H_idx(r2)		; save H
	movl	TR,	4*wm_TR_idx(r2)		; save TR
	movl	SPB,	4*wm_SPB_idx(r2)	; save SPB
	movl	HB,	4*wm_HB_idx(r2)		; save HB
	clrl	wm_in_Prolog			; leaving Prolog for a while

	callC0	(r0)				; call the C function

	;
	; Unlike the other implementations (at the time this code was written)
	; failure will be determined by examining r0...  The other
	; implementations cause failure by calling wm_fail_builtin.
	;

	movl	4*wm_HB_idx(r2), HB		; restore registers
	movl	4*wm_SPB_idx(r2), SPB
	movl	4*wm_TR_idx(r2), TR
	movl	4*wm_H_idx(r2), H
	movl	4*wm_B_idx(r2), B
	movl	4*wm_E_idx(r2), E
	movl	4*wm_SP_idx(r2), SP
	bsbw	enter_Prolog

	blbs	r0,	1f			; check for failure
	fail					; fail if needed
1:						; otherwise computation was
						; successful
	movl	E,	r0			; set r0 for a cut
	movl	(SP)+,	E			; unlink the stack frame
	jmp	wm_docut2			; cut away top choice point


	;
	; wm_fail is returned by the resolve reference code when it
	; can't find the thing which needs to be run
	;

	global	wm_fail
wm_fail:
	fail

;
; wm_resolve_ref	-- this code is called when an undefined procedure
;			   is encountered in the execution of the Prolog
;			   program.  Upon entry, r0 contains the start of the
;			   code in the name entry.  This address is passed
;			   off to some C code which links in the real code to
;			   run (if it can find some) and returns the address
;			   of the code to run in r0.  If things went properly,
;			   this will presumably be the original r0.  It may,
;			   however, be the failure code or ....
;

	global	wm_resolve_ref
wm_resolve_ref:
	callC1	resolve_reference, r0
	jmp	(r0)

;
; _w_unify		-- This is C's entry point to the unifier
;
;

	entry	_w_unify, 0xffc

	;
	; compute array start
	;

	ashl	#6,	wm_regidx, T1
	movab	wm_regs[T1],	T1

	;
	; load registers with initial values
	;

	movl	4*wm_SPB_idx(T1), SPB
	movl	4*wm_TR_idx(T1), TR
	movl	4*wm_HB_idx(T1), HB
	movl	4*wm_SP_idx(T1), SP
	movl	4(AP),	r0		; get unifier arguments
	movl	8(AP),	r1		;
	moval	unfail,	Fail		; set up failure
	jsb	wm_unify
	movl	#1,	r0		; set success
	brb	1f
unfail:	clrl	r0			; set failure
1:	movl	TR,	4*wm_TR_idx(T1)
	movl	FP,	SP		; re-establish stack pointer
	ret
