/*
 * assembly.vax			-- include file for other .vax files
 *
 *		Copyright (c) 1990 Applied Logic Systems, Inc.
 *
 * Author: Kevin A. Buettner
 * Creation: 3/7/90
 * Revision History:
 */

/*
 * include config.h, tokens.h and mtypes.h
 */

#include "config.h"
#include "tokens.h"
#include "mtypes.h"

/*
 *			Register Assignments
 *
 *	r0	
 *	r1	
 *	r2	
 *	r3	T1
 *	r4	S
 *	r5	Safety
 *	r6	H
 *	r7	TR
 *	r8	Fail
 *	r9	HB
 *	r10	SPB
 *	r11	B
 *	r12	E		(normally AP on VAX)
 *	r13	FP		(the VAX frame Pointer)
 *	r14	SP
 *	r15	PC
 *
 */


#define T1	r3
#define S	r4
#define Safety	r5
#define H	r6
#define TR	r7
#define Fail	r8
#define HB	r9
#define SPB	r10
#define B	r11
#define E	r12
#define AP	r12
#define FP	r13
#define SP	r14


/*
 * m88k, i386, and Vax choice point structure
 *
 *	+-----------------------+
 *	|       Prev B          |	+12
 *	+-----------------------+
 *	|       SPB             |	+8
 *	+-----------------------+
 *	|       HB              | 	+4
 *	+-----------------------+
 *	|       Failure Point   | <-- B	+0
 *	+-----------------------+
 */

#define	chpt_HB	4
#define chpt_SPB 8
#define chpt_Fail 0
#define chpt_B 12
#define chpt_size 16

/*
 * Names of things to import for the assembly code
 */

extern wm_cutaddr
extern wm_heapbase
extern wm_interrupt_caught
extern wm_in_prolog
extern wm_regidx
extern wm_safety
extern wm_trigger
extern wm_regs
extern wm_aborted
extern wm_normal
extern wm_overcode
extern wm_spying
extern cntrl_c_resume
extern gv_setcnt
text


/*
 *----  Instruction Macros -----
 */


/*
 * Macro Name:	deref
 * Description:	Implements the dereference loop
 * Parameters:	Src		-- Source argument (any addressing mode)
 *		Dst		-- Destination register
 *		GroundLabel	-- label to branch to when ground
 * Input Registers:
 *		None.
 * Output Registers:
 *		r0		-- for variable case (fall through), has same
 *				   value as Dst; for ground case (at
 *				   GroundLabel), low word will have 2 bit type
 * Other Registers:
 *		None.
 * Internal Labels:
 *		1000
 *
 */

#macro	deref	Src,	Dst,	GroundLabel
	movl	Src,	r0		; nop if Src is r0
1000:	movl	r0,	Dst
	bicb2	#~MTP_TAGMASK,	r0
	bneq	GroundLabel
	movl	(Dst),	r0
	cmpl	Dst,	r0
	bneq	1000b
#endm


/*
 * Macro Name:		fail
 * Description:		Causes failure
 * Parameters:		None.
 * Input Registers:	Fail	-- contains the point to file to
 * Output Registers:	None.
 */

#macro	fail
	jmp	(Fail)
#endm

/*
 * Macro Name:		d_proceed
 * Description:		Performs a subroutine return for determinate procedures
 * Parameters:		None.
 * Input Registers:	SP	-- points at frame to return from
 * Output Registers	E	-- receives pointer to previous frame
 */

#macro	d_proceed
	movl	(SP)+,	E		; otherwise, succeed
	rsb
#endm


/*
 * Macro Name:		bind
 * Description:		Binds Obj to Var and trails if necessary
 * Parameters:		Obj	-- Object
 *			Var	-- Variable
 * Input Registers:
 * Output Registers:
 * Other Registers:	HB and SPB are compared against for the trailing
 *			TR will be used for trailing and modified as
 *			appropriate
 * Internal Labels:	1000
 */

#macro	bind	Obj,	Var
	movl	Obj,	(Var)		; do the binding
	cmpl	HB,	Var		; compare HB to the (now) bound var
	blequ	1000f			; branch if HB <= Var
	cmpl	Var,	SPB		; compare Var to SPB
	blequ	1000f			; skip trailing if Var <= SPB
	movl	Var,	-(TR)		; trail the variable
1000:
#endm


/*
 * Macro Name:		callC0
 * Description:		Calls a 1 argument C function without updating shadows
 * Parameters:		func	-- function to call
 *			arg1	-- first argument to the function
 * Input Registers:
 * Output Registers:
 * Other Registers:	SP and FP, the stack pointer and frame pointer
 * Internal Labels:	None.
 */

#macro	callC0	func
	movl	SP,	-4(FP)		; save Prolog SP for later
	moval	-4(FP),	SP		; set SP for C
	calls	#0,	func		; call the function
	movl	(SP),	SP		; restore Prolog's SP
#endm

/*
 * Macro Name:		callC1
 * Description:		Calls a 1 argument C function without updating shadows
 * Parameters:		func	-- function to call
 *			arg1	-- first argument to the function
 * Input Registers:
 * Output Registers:
 * Other Registers:	SP and FP, the stack pointer and frame pointer
 * Internal Labels:	None.
 */

#macro	callC1	func,	arg1
	movl	SP,	-4(FP)		; save Prolog SP for later
	moval	-4(FP),	SP		; set SP for C
	pushl	arg1			; push the argument
	calls	#1,	func		; call the function
	movl	(SP),	SP		; restore Prolog's SP
#endm

/*
 * Macro Name:		callC2
 * Description:		Calls a 2 argument C function without updating shadows
 * Parameters:		func	-- function to call
 *			arg1	-- first argument to the function
 *			arg2	-- second argument to the function
 * Input Registers:
 * Output Registers:
 * Other Registers:	SP and FP, the stack pointer and frame pointer
 * Internal Labels:	None.
 */

#macro	callC2	func,	arg1,	arg2
	movl	SP,	-4(FP)		; save Prolog SP for later
	moval	-4(FP),	SP		; set SP for C
	pushl	arg2			; push the
	pushl	arg1			;     arguments
	calls	#2,	func		; call the function
	movl	(SP),	SP		; restore Prolog's SP
#endm


/*
 * Macro Name:		untrail
 * Description:		Performs the untrailing operation
 * Parameters:		Entry	-- entry point into the untrailing operation
 * Input Registers:	TR	-- trail pointer
 *			B	-- top choice point pointer (in memory)
 * Output Registers:	TR	-- will have value of B on exit
 * Other Registers:	r0	-- scratch
 * Internal Labels:	1000
 */

#macro	untrail	Entry
1000:	movl	(TR)+,	r0		; get trail entry
	movl	r0,	(r0)		; set trail entry to unbound
Entry:	cmpl	B,	TR		; see if we need to untrail more
	bgtru	1000b			; branch if so
#endm


/*
 * Macro Name		try_me_else
 * Description:		Performs the try_me_else sequence
 * Parameters:		
 * Input Registers:
 * Output Registers:
 * Other Registers:
 * Internal Labels
 */
#macro	try_me_else	Label
	jsb	wm_try_me
	long	Label
	nop
	nop
#endm

/*
 * Macro Name		retry_me_else
 * Description:		Performs the retry_me_else sequence
 * Parameters:		
 * Input Registers:
 * Output Registers:
 * Other Registers:
 * Internal Labels
 */

#macro	retry_me_else	Label
	jsb	wm_retry_me
	long	Label
	nop
	nop
#endm

/*
 * Macro Name		trust_me_else_fail
 * Description:		Performs the trust_me_else fail sequence
 * Parameters:		
 * Input Registers:
 * Output Registers:
 * Other Registers:
 * Internal Labels
 */

#macro	trust_me_else_fail
	jsb	wm_trust_me
	movl	E,	SP
#endm
