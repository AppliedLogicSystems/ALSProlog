;
; ident.vax	== and \==
;	Copyright (c) 1990 Applied Logic Systems, Inc.
;
; Author:	Kevin A. Buettner
; Creation:	7/26/90
; Revision History:
;


#include "assembly.vax"


;
; wm_identical		-- implements ==
;

	global	wm_identical
wm_identical:
	movl	8(SP),	r1		; set up first argument
	movl	12(SP),	r2		; set up second argument
	movl	(SP)+,	E		; nuke environment
	brw	ident

;
; wm_nonidentical	-- implements \==
;

	global	wm_nonidentical
wm_nonidentical:
	movl	8(E),	r1		; set up the first arguments
	movl	12(E),	r2		; set up the second
	pushl	Fail			; push the real failure address
	moval	nifail,	Fail		; set up failure address in Fail
	jsb	ident			; see if identical
	movl	-4(E),	Fail		; restore real failure address
	fail				; fail for real

nifail:	movl	-4(E),	Fail		; restore real failure address
	movl	E,	SP		; restore SP
	movl	(SP)+,	E		; unlink environment
	rsb				; succeed

;
; ident is called to check identity of two arguments.  This subroutine will
;	return normally if the arguments are identical.  If not, it will exit
;	abnormally by jumping to the location pointed at by Fail.  Under
;	such circumstances it is up to the caller to restore the stack.
;
; Register Usage:
;	r1 and r2 contain the input arguments.
;	Fail contains the address to jump to if the arguments are not identical
;
;	T1 and S are free, but the rest are used and we can not assume that
;	they are free.
;

ident:
	deref	r1,	r1,	g1	; dereference

	; argument in a1 is a variable

	deref	r2,	r2,	idfail

	; both arguments are variable

	cmpl	r1,	r2
	bneq	idfail
idret:	rsb				; return to caller

g1:	; thing in r1 is ground
	deref	r2,	r2,	g1g2	; dref second argument
idfail:	fail				; fail if not ground

g1g2:	cmpl	r1,	r2		; see if objects are the same
	beql	idret			; return if so
	bicb	#~MTP_TAGMASK, r1, T1	; get tag for first arg again
	cmpb	r0,	T1		; see if tags are the same
	bneq	idfail			; branch if not

	;
	; tags are the same.  see what we got and branch accordingly
	;

	cmpb	#MTP_LIST,	r0	; do comparison
	beql	idlist			; branch if we have a list
	bgtru	idstruct		; branch to structure case
	brw	idconst			; branch to const case
idlist:
	pushl	4-MTP_LIST(r1)		; save cdrs on the stack
	pushl	4-MTP_LIST(r2)
	movl	-MTP_LIST(r1),	r1	; get cars
	movl	-MTP_LIST(r2),	r2
	bsbw	ident			; see if cars are identical
	movl	(SP)+,	r2		; restore cdrs
	movl	(SP)+,	r1
	brw	ident

idstruct:
	decl	r1			; nuke the structure tags
	decl	r2

	movl	(r1)+,	r0		; get one functor
	cmpl	r0,	(r2)+		; compare functors
	bneq	idfail			; fail if not same
	extzv	#24, #8, r0, r0		; get the arity into r0
	decl	r0			; subtract one to get tail recursion
	beql	2f			; branch if only one arg
1:	pushl	r0			; save the count
	movl	(r1)+,	r0		; get arg
	pushl	r1			; save pointer
	movl	(r2)+,	r1		; get arg
	pushl	r2			; save other pointer
	movl	r0,	r2		; set up for call to ident
	bsbw	ident			; perform the call
	movl	(SP)+,	r2
	movl	(SP)+,	r1
	movl	(SP)+,	r0		; restore registers for next iter
	sobgtr	r0,	1b
2:	movl	(r1),	r1
	movl	(r2),	r2
	brw	ident			; tail recurse

idconst:
	bicb	#~MTP_CONSTMASK, r1, r0	; get constant tags
	cmpb	r0,	#MTP_INT	; see if we have integer
	bneq	1f			; branch if not
idfail2:
	fail				; fail if we do

1:	bicb	#~MTP_CONSTMASK, r2, T1	; get const tags of second
	cmpb	T1,	#MTP_INT	; see if we have int
	beql	idfail2			; fail if so

	;
	; otherwise, either we have two symbols, a uia and a symbol,
	; a symbol and a uia, or two uias.  We need to decide which
	; situation we have and branch accordingly.
	;

	cmpb	r0,	#MTP_SYM	; see if we have a symbol
	bneq	iduia			; branch if not
	cmpb	T1,	#MTP_SYM	; see if second is a symbol
	beql	idfail2			; branch if it is

	;
	; We have a symbol and a uia
	;

	callC2	cmp_sym_uia, r1, r2	; do the comparison
idtst:	tstl	r0			; see if 0
	beql	idfail2			; branch if so (fail)
	rsb				; else return

iduia:	cmpb	T1,	#MTP_SYM	; see if second is a symbol
	beql	iduiasym		; branch if so
	callC2	cmp_uia_uia, r1, r2	; do comparison
	brb	idtst

iduiasym:
	callC2	cmp_sym_uia, r2, r1	; do comparison
	brb	idtst
