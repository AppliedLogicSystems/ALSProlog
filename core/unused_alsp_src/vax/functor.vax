;
; functor.vax		-- functor, arg, and mangle
;	Copyright (c) 1990 Applied Logic Systems, Inc.
;
; Author:	Kevin A. Buettner
; Creation:	7/18/90
; Revision History:
;


#include "assembly.vax"

	text

	;
	; wm_functor -- implements functor/3
	;
	; Entry point is wm_functor; down a little ways
	;

fg1:	;
	; First argument is ground and resides in r1 with the two bit type 
	; in r0.
	;
	; Classify it and set up r1 with the symbol and T1 with the arity.
	; Then call the unifier on the appropriate arguments
	;
	cmpb	#MTP_LIST,	r0	; do a tag check
	beql	fglist			; branch if it is a list
	blssu	fgconst			; branch on constants

	;
	; First argument is a structure.  Extract the functor
	;

	movl	-MTP_STRUCT(r1), r2	; put functor in r2 temporarily
	cmpl	#MMK_FUNCTOR(TK_DDOUBLE,4), r2
	beql	fgconst			; branch if structure is a double
	extzv	#0, #24, r2, r1		; put symbol in r1
	extzv	#24, #8, r2, T1		; put arity in T1
	ashl	#4, T1, T1		; shift left four bits
	addl	#MTP_INT, T1		; and add in the tag
	brb	fgunify
fglist:	movl	#MMK_SYM(TK_DOT), r1	; set up dot as the symbol
	movl	#MMK_INT(2), T1		; set up T1 with the arity
	brb	fgunify

fgconst:
	movl	#MMK_INT(0),	T1	; arity is zero for constants

fgunify:
	movl	8(SP),	r0		; get symbol argument
	jsb	wm_unify		; invoke unifier
	movl	12(SP), r0		; get arity argument
	movl	T1,	r1
	jmp	wm_unify		; tail recurse to the unifier


	global	wm_functor
wm_functor:
	movl	(SP)+,	E		; unlink the environment

	;
	; get the first argument and dereference
	;

	deref	4(SP),	r1,	fg1

	;
	; first argument is a variable need to dereference both second
	; and third arguments.  If they are of the proper type, then we
	; can create a new structure.
	;

	deref	8(SP),	S,	1f
	fail				; fail if second arg is a variable

1:
	clrl	T1			; T1 is our numeric flag
	bicb	#~MTP_CONSTMASK, S, r0	; get tag of second arg
	cmpb	#MTP_SYM, r0		; see if we have a symbol
	bneq	fv1chkuia		; check UIA if not a symbol
	brb	fv1gotsym
fv1chkuia:
	cmpb	#MTP_UIA, r0		; see if we have a UIA
	bneq	fv1chknum		; check on numeric if not
	extzv	#4, #28, S, r0		; get uia offset
	addl	wm_heapbase, r0		; now r0 will have the actual address
	addl	#4,	r0		; skip over the fence
	pushl	r1			; save r1 for a bit
	callC1	find_token, r0		; call find_token with the string addr
	movl	(SP)+,	r1		; restore r1
	ashl	#MTP_CONSTSHIFT, r0, r0	; shift the token id
	addl	#MTP_SYM, r0, S		; add in the tag and store in S
	brb	fv1gotsym
fv1chknum:
	cmpb	#MTP_INT, r0		; see if we have an integer
	beql	fv1gotnum		; branch if so
	bicb	#~MTP_TAGMASK, r0	; work with low two bits of tag
	cmpl	#MTP_STRUCT, r0		; see if we have a structure
	bneq	ffail			; fail if not
	cmpl	-MTP_STRUCT(S), #MMK_FUNCTOR(TK_DDOUBLE,4)
	bneq	ffail			; fail if not double
fv1gotnum:
	incl	T1			; set numeric flag

fv1gotsym:
	
	;
	; dereference third argument
	;
	;	S	-- second argument; either a symbol or number
	;	T1	-- clear indicates symbol; set indicates number
	;	r1	-- first argument
	;	r0	-- scratch

	deref	12(SP),	r2,	1f
ffail:	fail				; fail if third arg is a variable

1:	bicb	#~MTP_CONSTMASK, r2, r0	; get constant tag into r0
	cmpb	#MTP_INT,	r0	; see if it is an integer tag
	bneq	ffail			; branch if not
	ashl	#-MTP_CONSTSHIFT, r2, r2 ; shift tag out leaving integer
	beql	fvbind			; branch if zero
	blbs	T1,	ffail		; fail if we have a numeric arg
	cmpl	#255,	r2		; see if too big...this also handles
	blssu	ffail			; negative numbers since we use the
					; unsigned version of the branch
	cmpl	#MMK_SYM(TK_DOT), S	; see if the symbol is a dot
	bneq	fvstruct		; branch if not
	cmpb	#2, r2			; see if arity is two
	bneq	fvstruct		; branch if not
	moval	MTP_LIST(H), S		; put a list pointer in T1 for a bit
	movl	H,	(H)+		; create the cons cell with
	movl	H,	(H)+		;   two variables in it
	brb	fvbind
fvstruct:
	insv	r2, #24, #8, S		; put the arity into the functor
	movl	S,	(H)+		; store the functor
	moval	MTP_STRUCT-4(H), S	; put structure pointer in S
1:	movl	H,	(H)+		; lay down the variables
	sobgtr	r2,	1b		; loop around

fvbind:	bind	S,	r1		; bind object in S to variable r1
	rsb				; return to caller


;
; wm_arg implements arg/3
;

	global	wm_arg
wm_arg:
	movl	(SP)+,	E		; unlink environment
	deref	4(SP),	r1,	ag1	; dereference first argument
	fail				; fail if variable

ag1:	cmpzv	#0, #4, r1, #MTP_INT	; see tag is an integer
	bneq	afail			; branch if not
	ashl	#-MTP_CONSTSHIFT, r1, r1 ; nuke tag and shift
	beql	afail			; fail if zero

	deref	8(SP),	r2,	ag2	; deref second argument
afail:	fail				; fail if second argument is variable

ag2:	cmpb	#MTP_LIST, r0		; check tag against list
	blssu	afail			; fail if constant
	bgtru	astruct			; branch if structure

	; else object is a list

	subl	#MTP_LIST,	r2	; nuke tags to make a0 a real pointer
	movl	#2,	T1		; move arity into T1
	brb	agetarg

astruct:
	movl	-MTP_STRUCT(r2), T1	; get functor
	cmpl	T1, #MMK_FUNCTOR(TK_DDOUBLE,4)
	beql	afail			; fail if it is really a double
	addl	#4-MTP_STRUCT, r2	; advance to first argument
	extzv	#24, #8, T1, T1		; extract arity

agetarg:
	cmpl	r1,	T1		; see if argnum <= arity
	bgtru	afail			; fail if not
	movl	-4(r2)[r1],	r0	; get argument
	movl	12(SP),	r1		; get thing to unify with
	jmp	wm_unify		; do the unification

;
; mangle/3
;
;	mangle is like arg, but with all 3 arguments instantiated.
;
;	mangle(N,S,A) will replace the Nth argument in structure S with the 
;	argument A.  No trailing is done.  Amay be of any type except
;	variable.
;

	global	wm_mangle
wm_mangle:
	movl	(SP)+,	E		; unlink the environment
	deref	4(SP),	r1,	mg1	; dereference the first argument
	fail				; fail if variable
mg1:	cmpzv	#0, #4, r1, #MTP_INT	; see if it's an integer
	bneq	mfail			; fail if it's not an integer
	ashl	#-MTP_CONSTSHIFT, r1, r1 ; shift it right and nuke tags
	beql	mfail			; fail if zero

	deref	12(SP),	S,	mg3	; dereference third argument
	fail				; fail if variable
mg3:
	deref	8(SP),	r2,	mg2	; dereference the second argument
mfail:	fail				; fail if second argument is variable

mg2:	cmpb	#MTP_LIST, r0		; compare against the list tag
	bgtru	mstruct			; branch to mstruct if strucure
	blssu	mfail			; fail if it is a constant

	; else object is a list

	subl	#MTP_LIST,	r2	; nuke tags leaving pure pointer
	movl	#2,	T1		; put max arity in T1
	brb	mputarg

mstruct:
	subl	#MTP_STRUCT,	r2	; nuke structure tags
	movl	(r2)+,	T1		; get functor
	cmpl	T1,	#MMK_FUNCTOR(TK_DDOUBLE,4)
	beql	mfail			; fail if structure is a double
	extzv	#24, #8, T1, T1		; extract arity

mputarg:
	cmpl	r1,	T1		; see if argnum <= arity
	bgtru	mfail			; fail if not
	moval	-4(r2)[r1],	r1	; set r1 to slot to mangle
	movl	S,	(r1)		; do the mangling
	cmpzv	#0, #2, S, #MTP_CONST	; see if the tag on S is a constant
	bneq	1f
	cmpzv	#0, #4, S, #MTP_UIA	; now see if it is a uia
	bneq	mret			; branch if not
	extzv	#4, #28, S, S
	ashl	#2, S, S		; multiply by four
	subl	S, wm_heapbase, S	; now we have actual pointer in S
1:	bicl	#MTP_TAGMASK, S		; clear tag leaving pure pointer
	cmpl	r1,	S		; compare slot with value
	bgequ	mret			; branch if no more work to do
	incl	gv_setcnt		; increment gv_setcnt
	movl	H,	r2		; put top of heap in r2
	movl	B,	T1		; put choice ptr into B

	;
	; r1	-- slot address
	; r2	-- HB update pointer
	; S	-- value which we put into slot (an address)
	; T1	-- choice pointer
	;

	cmpl	r1,	HB		; compare slot address with HB
	bgequ	mret			; return if no work to do
	cmpl	S,	HB		; compare obj address with HB
	bgequ	m_updHB			; update choice point if HB <= obj
	movl	HB,	r2		; else lower the choice point value
	brb	m_loopmid
m_updHB:
	movl	r2,	HB
	brb	m_loopmid

m_updchpt:
	movl	r2,	chpt_HB(T1)
m_nextchpt:
	movl	chpt_B(T1),	T1	; follow choice point chain
	tstl	T1			; see if at end
	beql	m_loopend		; branch if so
m_loopmid:
	bicl	#3,	chpt_SPB(T1)	; clear the compaction bit
	movl	chpt_HB(T1),	r0	; get HB and put into r0
	cmpl	r1,	r0		; compare slot value with HB
	bgtru	m_loopend		; return if no work to do
	cmpl	S,	r0		; compare obj value with HB
	bgtru	m_updchpt		; update the choice point if HB<=obj
	movl	r0,	r2		; otherwise lower the update value
	brb	m_nextchpt
m_loopend:
mret:
	rsb
