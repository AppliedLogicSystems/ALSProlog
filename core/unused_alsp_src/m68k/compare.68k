;
; compare.68k			-- implements compare/3
;	Copyright (c) 1988-1993 Applied Logic Systems, Inc.
;
; Author: Kevin A. Buettner
; Creation: 2/29/88
; Revision History:
;	Revised: mm/dd/yy	who		what
;	Revised: mm/dd/yy	who		what
;


#include "assembly.68k"

	text
	global	wm_compare
wm_compare:
	move.l	12(E), d0		; put first term to compare in d0
	move.l	16(E), d1		; put second term in d1
	jsr	compare			; do the comparison
					; will return here if equal
	move.l	#MMK_SYM(TK_EQ), d0	; set up equality
cmp_unlink_and_unify:
	move.l	8(E), a0		; set up first arg in a0 for unifier
	unlk	E			; do the unlink operation
	jmp	wm_unify		; jump to the unifier

cmp_less:
	move.l	#MMK_SYM(TK_LESS), d0
	bra.s	cmp_unlink_and_unify

cmp_greater:
	move.l	#MMK_SYM(TK_GRT), d0
	bra.s	cmp_unlink_and_unify


compare:
	;
	; dereference first argument in d0 and a0
	;

	
	deref	d0,	a0,	cmp_g1	; dereference first argument

	;
	; First argument is a variable.  We will dereference the second
	;	argument.  Note that the usual branch to the ground case
	;	will take us back to cmp_less.

	deref_d1 d1,	a1,	cmp_less

	;
	; Both arguments are variable.  Do comparison on the variables.
	;

	cmp.l	a1, a0			; compare a0 with a1
	bcs.s	cmp_less		; branch if a0 is smaller
	bhi.s	cmp_greater		; branch if a1 is smaller

	;
	; Variables are the same.  Return and continue.
	;

	rts

cmp_g1:
	;
	; First argument is ground.  Dereference second argument.
	;

	deref_d1 d1,	a1,	cmp_g2

	bra.s	cmp_greater		; quit if second arg is var

cmp_g2:
	;
	; Both first and second arguments are ground.  If arguments are
	;	equal, then we can rts right away.  Otherwise, we have
	;	to do a lot of other stuff....
	;

	cmp.l	a1, a0			; see if equal
	bne.s	1f			; branch if not
	rts				; otherwise return


1:	
	subq.w	#MTP_LIST, d0		; examine the tags on the first arg
	bcs.s	cmp_struct		; branch if we have a structure
	bhi	cmp_const		; branch if we have a constant
					; else we have a list
	move.l	#MMK_FUNCTOR(TK_DOT,2), d0	; put functor for list in d0
	subq.l	#MTP_LIST, a0		; adjust to pointer (wipe list tag)
	bra.s	cmp_struct_


cmp_struct:
	subq.l	#MTP_STRUCT, a0		; adjust to pointer (wipe structure tag)
	move.l	(a0)+, d0		; get functor
	cmp.l	#DOUBLE_4, d0		; see if it is a double
	beq	cmp_double		; branch if so

	;
	; We now have d0 loaded with the functor and a0 loaded with the address
	; of the first argument.  The next step is to decode the second argument
	; and set it up.
	;

cmp_struct_:
	subq.w	#MTP_LIST, d1		; examine tags of second arg
	bcs.s	cmp_struct_struct	; branch if second arg is structure
	bhi.s	cmp_greater		; structure is bigger than const

	;
	; Else we have a list...
	;
	move.l	#MMK_FUNCTOR(TK_DOT,2), d1	; put list functor in d1
	subq.l	#MTP_LIST, a1		; adjust list pointer to real pointer
	bra.s	cmp_struct_struct_

cmp_struct_struct:
	subq.l	#MTP_STRUCT, a1		; adjust to pointer
	move.l	(a1)+, d1		; get functor
	cmp.l	#DOUBLE_4, d1		; see if it is a double
	beq	cmp_greater		; structure is bigger than a double

cmp_struct_struct_:
	;
	; We have two structures with functors in d0 and d1 and pointers
	;	to arguments in a0 and a1.


	move.l	d0,	d3		; put functors into d3 and d4
	move.l	d1,	d4

	moveq	#24, d2			; set up for shifting arity
	lsr.l	d2,	d4		; shift arity on second
	lsr.l	d2,	d3		; shift arity on first
	cmp.l	d4,	d3		
	bcs	cmp_less
	bhi	cmp_greater
	cmp.w	#255,	d3		; see if we have escape arity
	bne.s	1f			; branch if not
	move.l	(a0)+,	d3		; get real arity
	move.l	(a1)+,	d4		; get real arity
	lsr.l	#MTP_CONSTSHIFT, d3	; shift out tags
	lsr.l	#MTP_CONSTSHIFT, d4	;
	cmp.l	d4,	d3		; compare the arities
	bcs	cmp_less
	bhi	cmp_greater

1:	
	cmp.l	d0,	d1		; see if functors are identical
	beq.s	seqfunc			; branch if they are identical
	move.l	a0,	-(SP)
	move.l	a1,	-(SP)
	move.l	d0,	-(SP)		; push d0 on the stack
	move.l	d1,	-(SP)		; push d1 on the stack
	callC0	cmp_gettokstring	; get the string corresponding to the
					; functor of the second arg
	move.l	d0,	a1		; put string into a1 for comparison
	addq.l	#4,	SP		; nuke d1 stack value
	callC0	cmp_gettokstring	; get the string corresponding to the
					; functor of the first arg
	move.l	d0,	a0		; put the address in a0
	
	jsr	cmp_strings		; compare the functor strings
					; (returns if equal)
					;
					; ...but it should not return since
					; we checked to see if the functors
					; were identical early on...
	 
	addq.l	#4,	SP		; nuke d0 stack value
	move.l	(SP)+,	a1		; restore a1
	move.l	(SP)+,	a0		; restore a0

seqfunc:
	move.l	d3,	d0		; put arity into d0
	subq.l	#2,	d0		; set up for dbra
	bcs.s	2f			; branch if less than zero
					;	(only one arg)
1:	move.l	d0,	-(SP)		; save the counter
	move.l	(a0)+,	d0		; get new d0
	move.l	a0,	-(SP)		; save the arg pointer
	move.l	(a1)+,	d1		; get new d1
	move.l	a1,	-(SP)		; save the arg pointer
	jsr	compare			; compare, returning only if equal
	move.l	(SP)+,	a1		; restore the registers
	move.l	(SP)+,	a0
	move.l	(SP)+,	d0
	dbra	d0,	1b
2:
	move.l	(a0),	d0		; put last args in d0 and d1
	move.l	(a1),	d1
	jmp	compare			; tail recurse to compare




cmp_const:
	;
	; The first argument is a constant.  We need to further classify
	; this constant.  It will be either an integer, a symbol, or a UIA
	;

	move.l	a0, d0			; put word back into d0
	and.w	#MTP_CONSTMASK, d0	; keep constant tags
	subq.w	#MTP_SYM, d0		; see what we got
	bhi	cmp_uia			; branch if we have a UIA
	beq.s	cmp_sym			; branch if we have a symbol

	;
	; We have an integer.  Decode the second argument.
	;

	subq.w	#MTP_LIST, d1
	bcs.s	cmp_int_struct		; branch if second arg is a struct
	beq	cmp_less		; integers are less than lists

	;
	; Second argument is a constant.  See if it is an integer
	;

	move.l	a1,	d1		; put const back into d1
	and.w	#MTP_CONSTMASK,	d1	; keep constant tags
	subq.w	#MTP_INT, d1		; subtract int tag
	bne	cmp_less		; integers are less than symbols of
					; any type
	;
	; We have two integers.  Do a signed comparison
	;

	cmp.l	a1, a0			; compare the two
	blt	cmp_less		; branch if less
	bgt	cmp_greater		; branch if greater
	rts				; return if equal

cmp_int_struct:
	;
	; First argument is an integer; Second is a structure.  Need to see
	; if the second is a double and do the right sort of comparison if it
	; is.
	;

	cmp.l	#DOUBLE_4, -MTP_STRUCT(a1) ; see if functor is a double
	bne	cmp_less		; branch if not
	callC2	cmp_int_double,	a0, a1	; do the comparison
	tst.l	d0			; check result
	bmi	cmp_less
	bne	cmp_greater
	rts

cmp_sym:
	;
	; We have a symbol as the first argument.  Decode the second arg.
	;
	subq.w	#MTP_LIST, d1		; set up condition codes
	bcs	cmp_sym_struct		; need to do the double check
	beq	cmp_less		; symbols are less than lists

	;
	; Second arg is a constant.  Decode the constant.
	;

	move.l	a1, d1			; put entire value back into d1
	and.w	#MTP_CONSTMASK, d1	; see what we have
	subq.w	#MTP_SYM, d1		; 
	bcs	cmp_greater		; symbols are greater than integers
	beq.s	cmp_sym_sym		; compare the symbols

	;
	; otherwise the first argument is a symbol and the second is a uia
	;

	move.l	a0, -(SP)
	callC0	cmp_gettokstring	; get the string for the token
	move.l	d0, a0			; put in a0
	addq.l	#4, SP			; pop argument off of stack
	move.l	a1, d0			; put uia arg in d0
	lsr.l	#MTP_CONSTSHIFT, d0	; shift out the tag
	add.l	wm_heapbase, d0		; add the heapbase
	addq.l	#4, d0			; add 4 to skip the fence
	move.l	d0, a1			; put string address into a1
	jmp	cmp_strings		; compare the strings

cmp_sym_sym:
	
	;
	; Both arguments are symbols
	;

	move.l	a0, -(SP)
	callC0	cmp_gettokstring	; get the string for the token
	move.l	d0, (SP)		; save on the stack
	move.l	a1, -(SP)		; push the second symbol on
	callC0	cmp_gettokstring	; get the string address for second tok
	addq.l	#4, SP			; pop the argument off of the stack
	move.l	d0, a1			; put string address into a1
	move.l	(SP)+, a0		; put the first address in a0
	jmp	cmp_strings		; compare the strings

cmp_sym_struct:
	;
	; First argument is a symbol; Second is a structure.  See if it is a
	; double.  If it is be exit with greater.  If not, we exit with less
	;
	cmp.l	#DOUBLE_4, -MTP_STRUCT(a1) ; see if functor is a double
	bne	cmp_less		; branch if not
	bra	cmp_greater

cmp_uia:
	;
	; We have a UIA as the first argument.  Decode the second.
	;

	subq.w	#MTP_LIST, d1		; set up condition codes
	bcs.s	cmp_sym_struct		; need to do the double check
	beq	cmp_less		; uias are less than lists

	;
	; Second arg is a constant.  Decode the constant.
	;

	move.l	a1, d1			; put entire value back into d1
	and.w	#MTP_CONSTMASK, d1	; see what we have
	subq.w	#MTP_SYM, d1		; 
	bcs	cmp_greater		; UIAs are greater than integers
	beq.s	cmp_uia_sym		; compare the symbols

	;
	; Both arguments are UIAs
	;

	move.l	a0, d0			; put the values back into d0
	move.l	a1, d1			; and d1
	lsr.l	#MTP_CONSTSHIFT, d0	; shift both of the UIA vals right
	lsr.l	#MTP_CONSTSHIFT, d1
	move.l	wm_heapbase, a0		; put the heapbase into a0
	lea	4(a0), a1		; add 4 to a0 and put into a1
	move.l	a1, a0			;
	add.l	d0, a0			; now a0 has the string address
	add.l	d1, a1			; and a1 has its string address
	jmp	cmp_strings		; compare the two strings

cmp_uia_sym:
	;
	; First argument is a UIA.  Second argument is a symbol
	;

	move.l	a0, d0
	lsr.l	#MTP_CONSTSHIFT, d0
	move.l	wm_heapbase, a0
	add.l	d0, a0			; a0 has start of UIA now
	addq.l	#4, a0			; skip over fence to point at string
	move.l	a0, -(SP)		; save the uia string address
	move.l	a1, -(SP)		; push the symbol (as an argument)
	callC0	cmp_gettokstring	; get the token string
	move.l	d0, a1			; put string address in a1
	addq.l	#4, SP			; pop off param
	move.l	(SP)+, a0		; restore a0
	jmp	cmp_strings		; compare the strings



cmp_double:
	;
	; first argument is a double
	;
	subq.l	#4-MTP_STRUCT, a0	; readjust back to a double pointer
	subq.w	#MTP_LIST, d1		; look at second argument
	beq	cmp_less		; doubles are less than lists
	bcs.s	cmp_double_struct	; branch if second arg is a struct

	;
	; second argument is a constant
	;

	move.l	a1, d1			; put entire arg back into d1
	and.w	#MTP_CONSTMASK, d1	; get constant tags
	subq.w	#MTP_INT, d1		; see if we have an integer
	bne	cmp_less		; branch if not

	callC2	cmp_int_double, a1, a0	; do the comparison
	tst.l	d0			; check result
	bmi	cmp_greater
	bne	cmp_less
	rts

cmp_double_struct:
	;
	; First argument double; second argument structure
	;

	cmp.l	#DOUBLE_4, -MTP_STRUCT(a1) ; see if functor is a double
	bne	cmp_less		; branch if not
	callC2	cmp_double_double, a0, a1 ; do the comparison
	tst.l	d0			; check result
	bmi	cmp_less
	bne	cmp_greater
	rts


	;
	; cmp_strings expects a0 and a1 to be loaded with the addresses of the
	;	strings to compare.  If the strings are equal, an rts will be
	;	performed. Otherwise, either cmp_less or cmp_greater will be
	;	branched to depending on the circumstances.
	;

cmp_strings:
	move.b	(a0)+, d0		; get first character
	cmp.b	(a1)+, d0		; do the comparison
	bcs	cmp_less		; branch if less
	bhi	cmp_greater		; branch if greater
	tst.b	d0			; see if zero
	bne.s	cmp_strings		; branch if not
	rts				; return if equal
