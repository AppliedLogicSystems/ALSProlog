;
; call.68k		-- code implementing call/1 and company
;	Copyright (c) 1987-1993 Applied Logic Systems, Inc.
;
; Creation Date: 3/11/87
; Author: Kevin A. Buettner
; Revision History:
;


#include "assembly.68k"


	text

	;
	; wm_call implements the prolog builtin call/1.  On entry, d0 has
	;	the module id of the module from which the call was done.
	;	d0 gets this value by magic.
	;

	global	wm_call
wm_call_callentry:
	link	E, #0

wm_call:
	move.l	#0, d4 			; don't ignore overflow check
ocall_entry:				; entry point for d4 set to one so
					;   that overflow check will be 
					;   ignored
					; 
	move.l	8(SP),	d1		; put first argument in d1
1:	move.l	d1,	a0		; and start dereferencing
	and.w	#3,	d1
	bne.s	call_isground		; branch if first arg is ground
	move.l	(a0),	d1
	cmp.l	a0,	d1
	bne.s	1b			; branch if more to do

call_fail:
	fail

call_isground:
	subq.w	#MTP_LIST, d1		; examine tag closer
	beq.s	call_fail		; fail if it's a list
	bcs.s	call_isstruct
	move.l	a0,	d1		; put value in d1 again
	and.w	#MTP_CONSTMASK, d1	; look at more of the tags this time
	subq.w	#MTP_SYM, d1		; see if we have a symbol
	beq.s	1f			; branch if we do
	subq.w	#MTP_UIA-MTP_SYM, d1	; see if we have a UIA
	bne.s	call_fail		; fail if not
1:	move.l	a0,	d1		; put value in d1 again
	clr.l	d2			; clear d2 (the arity)
	cmp.l	#MMK_SYM(TK_CUT), d1	; see if symbol is cut
	bne.s	1f			; branch if not
	move.l	4(SP),	8(SP)		; shift return address
	move.l	(SP)+,	(SP)		; shift OldE
	bra.s	call_whereto
1:	move.l	(SP)+,	4(SP)		; shift ret addr on top of thing to call
	move.l	(SP)+,	4(SP)		; shift env link on top of the cutpt
	bra.s	call_whereto

call_isstruct:
	subq.l	#MTP_STRUCT, a0		; make structure pointer usable
	move.l	(a0)+,	d1		; extract functor
	move.l	d1,	d2		; put arity in d2
	move.l	#24,	d3
	lsr.l	d3,	d2
	and.l	#0xffffff, d1		; clear arity portion in functor
	move.l	d2, 	d3
	subq.l	#1, 	d3
	cmp.l	#MMK_SYM(TK_CUT), d1	; see if symbol is cut or cutmacro
	bcs.s	1f
	subq.l	#1,	d3
1:	lsl.l	#2, 	d3
	sub.l	d3, 	SP		; allocate some more stack (maybe)
	move.l	(E),	a1		; get Old E
	move.l	4(E),	4(SP)		; shift return address
	move.l	a1,	(SP)		; put Old E back down
	move.l	d2,	d3
	subq.l	#1,	d3
	lea	8(SP),	a1		; set up a1 for arg setup
1:	move.l	(a0)+,	(a1)+		; set up the arguments
	dbra	d3,	1b

call_whereto:
	move.l	SP,	E		; set E appropriately
	;
	; Call C function call_resolve_reference with the module id, the
	; tokid, the arity, and the overflow flag.
	;
	callC4	call_resolve_reference, d0, d1, d2, d4
	move.l	d0,	a0		;
	clr.l	d0			; clear the carry flag in case we
					;   ignore the overflow check
	jmp	(a0)			; go

/*
 * wm_cut moved to cut.68k
	;
	; wm_cut performs the cut from within call
	;
	; Again, d0 contains the module id.
	;

	global	wm_cut
wm_cut:
	unlk	E
	move.l	4(SP),	d0		; get the cut environment
	lsr.l	#4,	d0
	and.w	#0xfffc, d0
	move.l	wm_heapbase, a0
	sub.l	d0,	a0
	jmp	wm_docut2		; do the cut, but without the 
					;   initial exception check

*/
	;
	; wm_comma implements ','/2
	;

	global	wm_comma
wm_comma:
	sub.l	#12,	SP		; allocate some slots in the environment
	move.l	16(E),	d1		; get the "cutpt"
	and.w	#0xffef, d1		; wipe out the semicolon flag
	move.l	d1,	16(E)		; put the wiped version back
	move.l	d1,	4(SP)		; move the "cutpt"
	move.l	8(E),	(SP)		; move the first thing to call
	move.l	d0,	-4(E)		; store module id in environment
	jsr	wm_call_callentry	; invoke call
gcc1:	move.w	#((gcc2-gcc1)/2), d0
	move.l	-4(E),	d0		; get module id
	cmp.l	E,	d6			
	bhi.s	1f
	move.l	d6,	a0
	lea	-20(a0), SP
	move.l	16(E),	16(SP)
	move.l	12(E),	12(SP)
	bra.s	2f
1:	move.l	E,	SP
2:	move.l	4(E),	8(SP)
	move.l	(E),	4(SP)
	addq.l	#4,	SP
	move.l	SP,	E
	jmp	wm_call
gcc2:	gcinfo	6,	3,	1	; mask=6, nargs=3, npv=1

	global	wm_semicolon
/*
wm_semicolon:
	move.l	(SP),	-(SP)		; pick up Old E and push it
	move.l	8(SP),	4(SP)		; move the return address
	move.l	d0,	8(SP)
	move.l	SP,	E		; set E appropriately
	jsr	wm_try_me
#ifdef MacOS
	; More mac anomalies.  The move.l #semitrust, Fail won't work with
	; the MPW assembler, so I have to pea the address of semitrust onto
	; the stack and then move it from there into the Fail addr.
	pea		semitrust
	move.l	(SP)+, Fail
#else
	move.l	#semitrust, Fail
#endif
	move.l	8(SP),	d0		; pick module id back up
	sub.l	#16,	SP		; allocate a stack frame 
	;;;move.l	(E),	(SP)		; shift the OldE
	;;;move.l	4(E),	4(SP)		; shift the return address
		move.l	E,	(SP)		; shift the OldE
		move.l	#(scgca1),	4(SP)		; shift the return address
	move.l	12(E),	8(SP)		; shift the thing to call
	move.l	20(E),	d1		; get the "cutpt"
	or.w	#0x10,	d1		; mark it as coming from first part
					; of semicolon
	move.l	d1,	12(SP)		; put it down
	jmp	wm_call			; do the call
scgca1: move.w #((scgca2-scgca1)/2),d0
	move.l 	4(E),a0
	move.l 	(E), E
	move.l 	E, SP
	jmp 	(a0)
	
scgca2: long 0x0603
	long -1
	long 0
*/
wm_semicolon:
	move.l	(SP),	-(SP)		; pick up Old E and push it
	move.l	8(SP),	4(SP)		; move the return address
	move.l	d0,	8(SP)
	move.l	SP,	E		; set E appropriately
	jsr	wm_try_me
	move.l	#semitrust, Fail
	move.l	8(SP),	d0		; pick module id back up
	sub.l	#16,	SP		; allocate a stack frame 
	move.l	(E),	(SP)		; shift the OldE
	move.l	4(E),	4(SP)		; shift the return address
	move.l	12(E),	8(SP)		; shift the thing to call
	move.l	20(E),	d1		; get the "cutpt"
	or.w	#0x10,	d1		; mark it as coming from first part
					; of semicolon
	move.l	d1,	12(SP)		; put it down
	jmp	wm_call			; do the call

semitrust:
	jsr	wm_trust_me
	move.l	8(SP),	d0		; pick module id back up
	move.l	(SP),	8(SP)		; shift the Old E
	move.l	4(SP),	12(SP)		; shift the return address
	addq.l	#8,	SP		; adjust stack pointer
	move.l	SP,	E		; adjust E
	jmp	wm_call			; do the call

	global	wm_arrow
wm_arrow:
	sub.l	#16,	SP		; allocate an environment
	move.l	16(E),	d1		; get the "cutpt"
	move.l	wm_heapbase, d2
	bclr	#4,	d1		; test and clear semicolon flag
	beq.s	1f			; branch if flag is not set
	sub.l	d6,	d2		; use SPB as cutpt
	bra.s	2f			;
1:	sub.l	E,	d2		; else use current env as cutpt
2:	lsl.l	#4,	d2
	addq.l	#3,	d2		; tag it as an integer
	move.l	d2,	-8(E)		; save this version for later
	move.l	d1,	16(E)		; put the wiped version back
	move.l	d1,	4(SP)		; move the "cutpt"
	move.l	8(E),	(SP)		; move the first thing to call
	move.l	d0,	-4(E)		; store module id in environment
	jsr	wm_call_callentry	; invoke call
gca1:	move.w	#((gca2-gca1)/2),d0	; nop for getting at the gc info
	move.l	-8(E),	d0		; get the arrow cutput
	lsr.l	#4,	d0
	and.w	#0xfffc, d0
	move.l	wm_heapbase, a0
	sub.l	d0,	a0
	jsr	wm_docut		; do the arrow cut
	move.l	-4(E),	d0		; get module id
	move.l	4(E),	8(E)		; move return address
	move.l	(E),	4(E)		; move Old E
	lea	4(E),	SP		; set up the stack pointer
	move.l	SP,	E		; set up E
	jmp	wm_call
gca2:	gcinfo	6,	3,	2	; mask=6, nargs=3, npv=2
	


	;
	; wm_colon implements ':'/2
	;

	global	wm_colon
wm_colon:
	deref	8(SP),	a0,	colon_ground
	fail				; fail if module arg is a variable
colon_ground:
	move.l	a0,	d0		; put value back in d0
	move.l	4(SP),	8(SP)		; shift return address
	move.l	(SP)+,	(SP)		; shift Old E
	move.l	SP,	E		; set up E
	jmp	wm_call		; now go to work on the 2nd argument


	;
	; wm_dbg_call implements dbg_call/2 which is essentially call but 
	;	without the overflow check
	;

	global	wm_dbg_call
wm_dbg_call:
	deref	8(SP),	a0,	dbg_call_ground
	fail				; fail if module arg is a variable
dbg_call_ground:
	move.l	a0,	d0		; put value back in d0
	move.l	4(SP),	8(SP)		; shift return address
	move.l	(SP)+,	(SP)		; shift Old E
	move.l	SP,	E		; set up E
	move.l	#1,	d4		; set up d4 so that overflow
					; 	check will be ignored.
	jmp	ocall_entry		; now go to work on the 2nd argument



	;
	; wm_ocall implements ocall/2 which is call without the overflow
	; 	check.  In addition, the Safety register is set so that the
	;	next call will be interrupted.
	;

	global	wm_ocall
wm_ocall:
	deref	8(SP),	a0,	ocall_ground
	fail
ocall_ground:
	move.l	a0, d0			; put value back in d0
	move.l	4(SP),	8(SP)		; shift return address
	move.l	(SP)+,	(SP)		; shift Old E
	move.l	SP,	E		; set up E
	move.l	#1,	d4		; set up d4 so that overflow
					; 	check will be ignored.
	move.l	wm_trigger, Safety
	move.l	Safety, wm_safety
	jmp	ocall_entry		; now go to work on the 2nd argument


	;
	; wm_jump implements jump/2
	;

	global	wm_jump
wm_jump:
	deref	8(E),	a0,	1f	; dereference first argument
	fail
1:	
	subq.l	#8,	SP		; allocate some space on stack
	move.l	a0,	(SP)		; put argument on the stack

	deref	12(E),	a0,	1f	; dereference second arument
jump_fail:
	fail				; fail if second arg is a variable
1:
	; The second argument has been dereferenced.  Put it on the stack
	; for a call to jump_validate_dbref

	move.l	a0,	4(SP)		; push on the stack
	callC0	jump_validate_dbref	; validate the database reference
					; and get back the address to
					; jump to
	tst.l	d0			; test validity
	beq.s	jump_fail		; fail if not valid
	addq.l	#4,	SP		; adjust stack
	move.l	(SP)+,	d1		; get call back again
	move.l	d1,	a0		; 	and put into a0
	and.w	#MTP_TAGMASK,	d1	; 	leaving the tags in d1

	subq.w	#MTP_LIST,d1		; examine tag closer
	beq.s	jump_fail		; fail if it's a list
	bcs.s	jump_isstruct
	move.l	a0,	d1		; put value in d1 again
	and.w	#MTP_CONSTMASK, d1	; look at more of the tags this time
	subq.w	#MTP_SYM,	d1	; see if we have a symbol
	beq.s	1f			; branch if we do
	subq.w	#MTP_UIA-MTP_SYM, d1	; see if we have a UIA
	bne.s	jump_fail		; fail if not
1:	move.l	a0,	d1		; put value in d1 again
	clr.l	d2			; clear d2 (the arity)
	move.l	4(SP),	8(SP)		; shift return address
	move.l	(SP)+,	(SP)		; shift OldE
	bra.s	jump_whereto

jump_isstruct:
	subq.l	#MTP_STRUCT, a0		; make structure pointer usable
	move.l	(a0)+,	d1		; extract functor
	move.l	d1,	d2		; put arity in d2
	move.l	#24,	d3
	lsr.l	d3,	d2
	move.l	d2,	d3
	subq.l	#2,	d3
	lsl.l	#2,	d3
	sub.l	d3,	SP		; adjust stack pointer
	move.l	(E),	d3		; get Old E value
	move.l	4(E),	4(SP)		; shift return address
	move.l	d3,	(SP)		; put down Old E value
	move.l	d2,	d3
	subq.l	#1,	d3
	lea	8(SP),	a1		; set up a1 for arg setup
1:	move.l	(a0)+,	(a1)+		; set up the arguments
	dbra	d3,	1b

jump_whereto:
	move.l	SP,	E		; set E appropriately
	move.l	d0,	a0		;
	jmp	(a0)			; go
