;
; ident.68k		== and \==
;	Copyright (c) 1988-1993 by Applied Logic Systems, Inc.
;
; Author: Kevin Buettner
; Creation: 2/9/87
; Revision History: 
;	4/24/90		Kev		-- conversioni to .68k format
;	6/23/92		Ron		-- adjust for Macintosh anomalys (A5/Fail stuff)
;



#include "assembly.68k"

		text
;
; wm_identical		-- implements ==
;

		global	wm_identical
wm_identical:
	move.l	8(SP), d0		; set up first argument
	move.l	12(SP), a0		; set up second argument
	unlk	E			; Nuke the environment
	jmp	ident			; compare the two

;
; wm_nonidentical	-- implements \==
;

		global	wm_nonidentical
wm_nonidentical:
	move.l	8(E), d0		; set up first argument
	move.l	12(E), a0		; set up the second
	subq.l	#4, SP			; allocate space for real failure
					; address
	move.l	Fail, -4(E)		; store the failure address
#ifdef MacOS
	;	More Mac "glue" (if you will).  Again, #nifail will not work
	;	as an immediate expression as far as the Mac is concerned.  Thus,
	;	to get the address, we pea it onto the stack and then move it
	;	from there to Fail.
	pea		nifail
	move.l	(SP)+, Fail
#else
	move.l	#nifail, Fail		; set up failure address in Fail
#endif
					; Note: it would be better to make
					; this PIC
	jsr	ident			; see if identical
	move.l	-4(E), Fail		; restore real failure address

#ifdef MacOS
	movea.l	Fail, a0
	jmp	(a0)
#else
	jmp	(Fail)			; jump to it
#endif

nifail:	
	move.l	-4(E), Fail		; restore real failure address
	unlk	E			; and succeed
	rts

;
; ident is called to check identity of two arguments.  This subroutine will
;	return normally if the arguments are identical.  If not, it will exit
;	abnormally by jumping to the location pointed at by Fail.  Under such
;	circumstances it is up to the caller to restore the stack.
;
;	
; Register Usage:
;	a0 and d0 contain the input arguments.  
;	Fail contains the address to jump to if the arguments are not identical
;
;	The rest of the registers
;	may be used and we can not assume that they are free.
;

ident:
	move.l	a1,	-(SP)		; save a1
ident_:
	deref	d0,	a1,	g1	; dereference

	; argument in a1 is a variable

	deref	a0,	a0,	idfail

	; both arguments are variables

	cmp.l	a0,	a1
	bne.s	idfail
idret:	move.l	(SP)+, a1		; restore a1
	rts				; return to caller

g1:	; thing in a1 is ground
	deref	a0,	a0,	g1g0

	bra.s	idfail			; variable and ground unequal

g1g0:	cmp.l	a0,	a1		; see if objects are the same
	beq.s	idret			; return if so
	move.l	d1,	-(SP)		; save d1
	move.l	a1,	d1
	and.w	#MTP_TAGMASK, d1
	cmp.w	d0,	d1		; see if tags are the same
	beq.s	1f			; branch if so
idfail:	
#ifdef MacOS
	movea.l	Fail,a0
	jmp	(a0)
#else		
	jmp	(Fail)
#endif

1:      
	;
	; tags are the same. see what we got and branch accordingly
	;


	tag_sws	idlist,	idconst

	;
	; must have a structure
	;

	subq.l	#MTP_STRUCT, a0
	subq.l	#MTP_STRUCT, a1		; nuke structure tags

	move.l	(a0)+, d1		; get one of the functors
	cmp.l	(a1)+, d1		; compare against the other
	bne	idfail			; fail if not the same

	moveq	#24, d0
	lsr.l	d0, d1			; shift d1 to get arity
	cmp.w	#255,	d1		; see if arity is escape arity
	bne.s	1f			; branch if not
	move.l	(a0)+,	d1		; get real arity
	cmp.l	(a1)+,	d1		; fail if not the same
	bne	idfail
	lsr.l	#MTP_CONSTSHIFT, d1	; shift out tag leaving big arity
1:
	subq.l	#2, d1			; subtract 2
	bcs.s	lastarg
idsloop:	
	move.l	(a0)+, d0
	move.l	a0, -(SP)
	move.l	(a1)+, a0
	jsr	ident
	move.l	(SP)+, a0
	dbra	d1, idsloop
lastarg:
	move.l	(a1), d0
	move.l	(a0), a0
	move.l	(SP)+, d1		; restore d1
	jmp	ident_

idlist:	clr.l	d1
	subq.l	#MTP_LIST, a0
	subq.l	#MTP_LIST, a1
	bra.s	idsloop

idconst:	
	move.l	a0, d0			; put object into d0
	and.w	#MTP_CONSTMASK & ~MTP_TAGMASK, d0	
					; get constant tags (only)
	beq	idfail			; fail if we have an integer
	move.l	a1, d1			; put 2nd object into d1
	and.w	#MTP_CONSTMASK & ~MTP_TAGMASK, d1
					; get constant tags of 2nd object
	beq	idfail			; fail if we have an integer

	;
	; otherwise, either we have two symbols, a uia and a symbol,
	; a symbol and a uia, or two uias.  We need to decide which situation
	; we have and branch accordingly.
	;

	subq.w	#MTP_SYM & ~MTP_TAGMASK, d0
					; see if 1st is a symbol
	bne.s	iduia
	subq.w	#MTP_SYM & ~MTP_TAGMASK, d1
					; see if 2nd is a symbol
	beq	idfail			; fail if both were symbols

usymuia:
	;
	; We have a symbol and a uia
	;
	callC2	cmp_sym_uia, a0, a1
	tst.l	d0
	beq	idfail
idret2:	move.l	(SP)+, d1		; restore d1
	move.l	(SP)+, a1		; restore a1
	rts

iduia:	subq.w	#MTP_SYM & ~MTP_TAGMASK, d1
					; see if 2nd is a symbol
	beq.s	iduiasym
	callC2	cmp_uia_uia, a1, a0
	tst.l	d0
	beq	idfail
	bra	idret2

iduiasym:
	exg	a0, a1
	bra.s	usymuia
