;
;
; interrupt.68k		-- stuff for implementing Keith's interrupts
;	Copyright (c) 1989-1993 by Applied Logic Systems, Inc.
;
; Author: Kevin Buettner
; Creation Date: 5/10/89
; Revision History:
;	1/5/95	C. Houpt	Added stack overflow check and time yielding to wm_overflow.
;

#include "assembly.68k"
#include "alssig.h"


	text
;
; dbg_spycheck is called to perform the move, subtract, and compare sequence
;	necessary for checking for overflow.  Prior to doing this check though,
;	it checks to see if spying is activated.  If it is (and if the
;	safety register has a normal value), debug mode is set.
;
	global	dbg_spycheck
dbg_spycheck:
	tst.l	wm_spying		; see if we are spying or not
	beq.s	1f			; branch if we are not
	cmp.l	wm_normal, Safety	; see if the normal safety value is in
	bne	1f			; branch if not
	moveq	#-4, Safety		; set the safety flag
1:	move.l	TR,	d0		; perform heap overflow test
	sub.l	H,	d0
	cmp.l	Safety,	d0
	rts				; return to the conditional branch


;
; dbg_decr_icount is not really a debugger function, but is similar in nature
;	to dbg_spycheck above.  Like dbg_spycheck, it performs the move,
;	subtract, and compare necessary for overflow and decompilation tests.
;	Prior to doing this, however, it calls decr_icount which decrements
;	the icount field in the procedure entry.  If zero, indexing is
;	performed.  Otherwise execution continues as normal.  What this does
;	is regenerates (or generates for the first time) indexing for the
;	procedure after it has been called some number of small times without
;	modification.
;

	global	dbg_decr_icount
dbg_decr_icount:
	callC0	decr_icount		; Return address used as argument
	move.l	TR,	d0		; perform the heap overflow test
	sub.l	H,	d0
	cmp.l	Safety,	d0
	rts				; return to the conditional branch


;
; set_prolog_interrupt is called to set the Safety register so that a Prolog
; interrupt will be caused.
;
; There are now two variants.  The second one is the old one which I consider
; unreliable.  The first one is somewhat better in that it runs after the
; signal handler returns.
;

	global	set_prolog_interrupt
set_prolog_interrupt:
#ifdef BSDUNIX
	move.l	cntrl_c_resume, -(SP)
	move.l	#-1,	Safety		; set safety to trap on next inference
	rts
#else
	move.l	#-1,	Safety		; set safety to trap on next inference
	rts
#endif



;
;
; wm_overflow is called when an exceptional condition is detected prior
;	to executing a procedure.
;             On the Mac, it is also called on a stack overflow, or when it is
;       necessary to yield time.
;
#ifdef MacOS
		externcode PI_yield_time
		externdata yield_interval
		externcode stack_overflow
		externdata yield_counter
		externdata wm_stackbot
		externdata saved_sp
#endif

		global	wm_overflow
wm_overflow:	
		tst.l	d7			; see if d7 is negative
		bmi	2f			; branch taken if not real 
						;	overflow
#ifdef MacOS
		; In MacOS wm_overflow is also used for stack overlows, and
		; to yield time to other applications.
		
		; Check for heap overflow.
		move.l	TR, d0
		sub.l	H, d0
		cmp.l	d7, d0
		bcs handle_heap_overflow
		
		; Check for stack overflow.
		cmpa.l wm_stackbot, SP
		ble.s handle_stack_overflow
		
		; Yield time to other applications
		move.l	(SP)+,	d4		; pop off return address
		jsr	wm_try_me		; Force registers out into
						; a choice point
		move.l	wm_regidx, d0		; The code for gc entry...
		lsl.l	#6,	d0
		lea	wm_regs, a0
		add.l	d0,	a0
		move.l	Fail, a5
		exg		a2, a5
		movem.l	#0xfc60, (a0)
		movea.l	a5, a2
		move.l	CurrentA5, a5
		move.l	#0,	wm_in_Prolog	; leaving Prolog...
		move.l	saved_sp,	SP	; restore C's stack pointer
		jsr	PI_yield_time
		move.l	yield_interval, yield_counter
		move.l	wm_regidx, d0
		lsl.l	#6,	d0
		lea		wm_regs, a0
		add.l	d0,	a0
		movem.l	(a0),	#0xfc60		; restore the regs from memory
		move.l	a2, -(SP)		; Juggle registers so that the 
		movea.l	a5, a2			; Mac version of the WAM is right
		move.l	CurrentA5, a5
		move.l	(SP)+, Fail
		jsr	enter_Prolog		; set flag indicating we are
						; back in Prolog
		jsr	wm_trust_me		; Bring top choice pt back
						; into registers
		move.l	d4,	a0
		jmp	(a0)

handle_stack_overflow:
		move.l	(SP)+,	d4		; pop off return address
		jsr	wm_try_me		; Force registers out into a choice point
		move.l	wm_regidx, d0		; The code for gc entry...
		lsl.l	#6,	d0
		lea	wm_regs, a0
		add.l	d0,	a0
		move.l	Fail, a5
		exg		a2, a5
		movem.l	#0xfc60, (a0)
		movea.l	a5, a2
		move.l	CurrentA5, a5
		move.l	#0,	wm_in_Prolog	; leaving Prolog...
		move.l	saved_sp,	SP	; restore C's stack pointer
		jsr	stack_overflow
		move.l	wm_regidx, d0
		lsl.l	#6,	d0
		lea		wm_regs, a0
		add.l	d0,	a0
		movem.l	(a0),	#0xfc60		; restore the regs from memory
		move.l	a2, -(SP)		; Juggle registers so that the 
		movea.l	a5, a2			; Mac version of the WAM is right
		move.l	CurrentA5, a5
		move.l	(SP)+, Fail
		jsr	enter_Prolog		; set flag indicating we are
						; back in Prolog
		jsr	wm_trust_me		; Bring top choice pt back
						; into registers
		move.l	d4,	a0
		jmp	(a0)

handle_heap_overflow:
#endif
		;
		; The code for doing a garbage collection
		;
		move.l	(SP)+,	d4		; pop off return address
		jsr	wm_try_me		; Force registers out into
						; a choice point
		move.l	wm_regidx, d0		; The code for gc entry...
		lsl.l	#6,	d0
		lea		wm_regs, a0
		add.l	d0,	a0
#ifdef MacOS
		move.l	Fail, a5
		exg		a2, a5
		movem.l	#0xfc60, (a0)
		movea.l	a5, a2
		move.l	CurrentA5, a5
#else
		movem.l	#0xfc60, (a0)		; save the registers in memory
#endif
		move.l	#0,	wm_in_Prolog	; leaving Prolog...
#ifdef MacOS
; ceh - shouldn't the stack be restored!? gc can call printf, etc...
		move.l	saved_sp,	SP	; restore C's stack pointer
#endif
		jsr	gc			; call the garbage compacter
huh:
		move.l	wm_regidx, d0
		lsl.l	#6,	d0
		lea		wm_regs, a0
		add.l	d0,	a0
		movem.l	(a0),	#0xfc60		; restore the regs from memory
#ifdef MacOS
		move.l	a2, -(SP)			; Juggle registers so that the 
		movea.l	a5, a2				; Mac version of the WAM is right
		move.l	CurrentA5, a5
		move.l	(SP)+, Fail
#endif
		move.l	TR,	d0		; see if we've reclaimed
		sub.l	H,	d0		; enough space
		move.l	wm_normal, d1
		cmp.l	d1,	d0
		bcs	1f			; branch if not
		jsr	enter_Prolog		; set flag indicating we are
						; back in Prolog
		jsr	wm_trust_me		; Bring top choice pt back
						; into registers
		move.l	d4,	a0
		jmp	(a0)


1:		lsr.l	#1,	d1		; halve wm_normal
		move.l	d1,	wm_normal	; store back to memory
		cmp.l	#16384,	d1		; see if we can continue
		bcs	1f			; branch if we can't
		clr.l	Safety
		subq.l	#1,	Safety
		move.l	#ALSSIG_HEAP_OVERFLOW, wm_interrupt_caught
;		move.l	d4,	a0
;		jmp	(a0)
		move.l	d4,	-(SP)
		bra.s	2f

1:		callC0	heap_overflow
		


;
; The following code is entered when an interrupt has occurred.  d7 has
; a negative value.  Our goal here is to restore the normal value to d7, build
; a structure representing the frame on the stack and then execute whatever
; wm_overcode points at.
;
;

2:
	callC0	int_get_module		; get the module id
#ifdef MacOS
	move.l	d0, d3		; MPW C does not save d2 accross C calls
#else
	move.l	d0,	d2		; save module id in d2
#endif
	callC0	int_get_goal_tokid	; get the tokid
#ifdef MacOS
	move.l	d3, d2		; Now it's safe to move mod id into d2 on Mac
#endif
	addq.l	#4,	SP		; pop (and ignore) the return address
	move.l	(SP)+,	d4		; put continuation environment in d4
	move.l	(SP)+,	d3		; put return address in d3
	move.l	d0,	a1		; put token id in a1
	move.l	d0,	d1
	move.l	#24,	d0
	lsr.l	d0,	d1		; extract arity into d1
	beq.s	5f			; branch if goal is atomic

	subq.l	#1,	d1		; subtract 1 to make the dbra work
	move.l	a1,	(H)		; put functor down
	lea	MTP_STRUCT(H), a1	; load a structure pointer into a1
	addq.l	#4, H			; advance H

1:	deref	(SP)+,	a0,	3f
	cmp.l	wm_heapbase, a0		; see if var is on local stack
	bcc.s	3f			; branch if not
	move.l	H,	(a0)		; make local stack var point
	move.l	H,	(H)+		; 	at heap variable
	cmp.l	a0,	SPB		; see if be need to trail
	bcc.s	4f			; branch if SPB is higher
	move.l	a0,	-(TR)		; trail the local stack var
	bra.s	4f
3:	move.l	a0,	(H)+		; store as is
4:	dbra	d1,	1b		; branch if more to do

5:	move.l	a1,	-(SP)		; put goal down on stack
	move.l	d2,	-(SP)		; put module down on stack
	move.l	wm_interrupt_caught, d2	; put interrupt status in d2
	lsl.l	#4,	d2		; shift it
	addq.l	#3,	d2		;   and tag it as an integer
	move.l	d2,	-(SP)		; push it on the stack
	move.l	#0, wm_interrupt_caught	; clear the interrupt status
	move.l	d3,	-(SP)		; put return address back down
	move.l	d4,	-(SP)		; put OldE down
	move.l	SP,	E		; set E

	move.l	wm_normal, Safety	; set normal interrupts
	move.l	Safety, wm_safety	;
	move.l	wm_overcode, a0		; get place to jump to
	jmp	(a0)			; and jump there
