#!/bin/sh
#
# fixasm		-- fix up expressions in .s files so that the
#			   NeXT assembler can deal with them
# Author: Kevin A. Buettner
# Creation: 5-12-93
# Revision History:
#
# Description:
#	This program is meant to be run after a 'make initial' has been 
#	done, but before 'make image'.  It should be invoked as
#		../fixasm *.s
#	from the $MERGE/M68k/NeXT/obj directory (where $MERGE is the path
#	to get to the appropriate merge directory).  The 'make initial' can
#	be run from any host, but it is crucial that this script is run
#	from a NeXT machine.  At some point we might figure out how to
#	incorporate the running of this script in the Makefile.
#
#	Now as to what it does and why it does it:
#
#	The NeXT assembler has the unfortunate shortcoming of not being
#	able to handle expressions of the form
#		(lab2-lab1)/2
#	even when lab1 and lab2 are both defined in the file which contains
#	the expression.  To get around this shortcoming, we can do the
#	following:  First, replace all offending expressions in a particular
#	assembly file with 0 (or any other numeric constant).  We then assemble
#	the modified file.  Next, we examine the output of nm run on the
#	.o file created by the assembler.  We note the values of lab1 and lab2
#	and replace lab1 and lab2 with the corresponding numeric values
#	obtained from nm.  The replacements should ONLY be done in the
#	expression which takes the difference of these two labels.  All other
#	occurrences of lab1 and lab2 must be left alone.
#
#	Let us suppose that the value of lab2 (obtained from nm) was 0x11c
#	and the value of lab1 was 0xc4.  Then the assembly file will contain
#		(0x011c-0xc4)/2
#	instead of
#		(lab2-lab1)/2
#
#	The following script automates this procedure for all occurrences of
#	such expressions in the assembly files.  If accidentally run twice,
#	it is smart enough not to try to fix a file which has already been
#	fixed.  As output it will display the symbols fixed and the
#	values found from nm.  It creates temporary files of the form
#	T_* in the current directory and removes them when completed.
#

for FILE do
	# Set TOFIX with a list of words of the form addr1-addr2.
	# These will be pairs of names of the addresses to fix up
	TOFIX=`sed -n -e '/\/2/s/.*(\(.*\)).*/\1/p' $FILE |
		 sed -n -e '1,$ H
				$g
				$s/\n/ /gp'`

	# continue if nothing to do
	if [ "$TOFIX" = "" ]; then
		continue
	fi

	# continue if already fixed
	FIRSTC=`echo $TOFIX | sed -n -e 's/\(.\).*/\1/p'`
	if [ "$FIRSTC" = "0" ]; then
		continue
	fi

	#
	# We will now create a new file which we will eventually assemble
	# ... and guess what?
	#	  We call sed again.
	#

	TMPFILE=T_s.s
	sed -e 's/(.*)\/2/0/' $FILE > $TMPFILE

	#
	# We will now assemble this temporary file and then use the
	# output of the .o file to determine the actual value of the
	# displacements
	#
	as -o T_o.o $TMPFILE
	
	# We must now use nm to look up certain values
	nm T_o.o > T_nm
	
	#
	# The output of nm has been placed in T_nm.  The following for loop
	# looks up the label values and performs the appropriate substitutions
	# in the source file
	#
	for SYMPAIRS in $TOFIX; do
		# get individual labels from the first pair
		SVAL1=`echo $SYMPAIRS | sed -n -e 's/\(.*\)-\(.*\)/\1/p'`
		SVAL2=`echo $SYMPAIRS | sed -n -e 's/\(.*\)-\(.*\)/\2/p'`

		# get values for the labels
		NVAL1=`sed -n -e '/'$SVAL1'/s/\([0-9a-f]*\).*/\1/p' T_nm`
		NVAL2=`sed -n -e '/'$SVAL2'/s/\([0-9a-f]*\).*/\1/p' T_nm`

		# tell the user what the values were
		echo file $FILE: $SVAL1=$NVAL1, $SVAL2=$NVAL2

		# substitute in source file creating as output a temp file
		sed -e '
			/\/2/s/('$SVAL1'/(0x'$NVAL1'/
			/\/2/s/'$SVAL2')/0x'$NVAL2')/' $FILE > $TMPFILE

		# rename the temp file back to the source file
		mv $TMPFILE $FILE
	done
done

#
# Clean up temporary files
#
rm -f T_s.s T_o.o T_nm
