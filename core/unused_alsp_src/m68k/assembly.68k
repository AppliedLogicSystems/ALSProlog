/*
 * assembly.68k		-- include file for various assembler files in the
 *			   M68k system.
 *
 *	Copyright (c) 1990-1993 by Applied Logic System, Inc.
 *
 * Author: Kevin A. Buettner
 * Creation: 4/5/90
 * Modified:
 * 06/23/92	- R.DiNapoli -- Added #ifdefs for Mac specific code and for
 *				dealing with the Mac's desire to use A5 as
 *				a "global variable" pointer...
 * 01/05/95	- C.Houpt -- Include config.h for better preprocessor control.
 *				Added common external declarations.
 *				Added tag_swc_long.
 */

/*
 * include aconfig.h, tokens.h and mtypes.h
 */

/* ceh */
#include "config.h"
#include "aconfig.h"
#include "tokens.h"
#include "mtypes.h"

/*
 *
 * Register Usage:
 *	D7	-- Safety		A7	-- SP
 *	D6	-- SPB			A6	-- E
 *	D5	-- HB			A5	-- H
 *	D4	-- temp			A4	-- TR
 *	D3	-- temp			A3	-- B
 *	D2	-- temp			A2	-- Fail
 *	D1	-- temp			A1	-- S and switch dereferencing
 *	D0	-- Deref		A0	-- Deref
 *
 *	======================================================================
 *	MAC NOTE
 *	----------------------------------------------------------------------
 *
 *	The MacOS used the A5 register as a "global pointer".  All global
 *	variables are referenced as offsets off of the A5 register.  For
 *	this reason, the WAM on the Mac *cannot* use A5 AT ALL.  As a result,
 *	the Mac version of the native code WAM will use A2 as the Heap pointer
 *	and will store the FAIL address in a memory location called "Fail".  
 *	When needed, we will load the Fail address into a temporary address
 *	register (A0) and do a jmp to it.
 *
 *	======================================================================
 *	
 *
 * Code which executes between calls (such as the choice point manipulation
 * stuff) is free to use D0-D4, A0, A1, and A6.
 *
 *
 *
 * Choice Point Structure:
 *
 *	+-----------------------+
 *	|       Prev B          |	+12
 *	+-----------------------+
 *	|       Failure Point   | 	+8
 *	+-----------------------+
 *	|       SPB             |	+4
 *	+-----------------------+
 *	|       HB              | <-- B	+0
 *	+-----------------------+
 */

#define	Safety	d7
#define	SPB	d6
#define	HB	d5
#define SP	a7
#define E	a6

#ifdef MacOS
#define H	a2
#else /* MacOS */
#define H	a5
#define Fail a2
#endif /* MacOS */

#define TR	a4
#define B	a3
#define S	a1

#define	chpt_HB	0
#define chpt_SPB 4
#define chpt_Fail 8
#define chpt_NextClause 8
#define chpt_B 12
#define chpt_size 16

#define DOUBLE_4 MMK_FUNCTOR(TK_DDOUBLE,4)

/* External References */

#ifdef MacOS
	externdata Fail
	
	externcode call_resolve_reference
	externcode wm_docut
	externcode wm_docut2
	externcode wm_try_me
	externcode wm_trust_me
	externcode jump_validate_dbref
	externcode cmp_gettokstring
	externcode cmp_int_double
	externcode cmp_double_double
	externcode wm_unify
	externcode find_token
	externcode cmp_sym_uia
	externcode cmp_uia_uia
	externcode decr_icount
	externcode gc
	externcode enter_Prolog
	externcode wm_abort
	externcode int_get_module
	externcode int_get_goal_tokid
	externcode next_choice_in_a_deleted_clause
	externcode probe_token
	externcode wm_colon
	externcode resolve_reference
	externcode cmp_obj_str
	externcode heap_overflow

	externdata wm_heapbase
	externdata wm_trigger
	externdata wm_safety
	externdata wm_in_Prolog
	externdata wm_cutaddr
	externdata gv_setcnt
	externdata wm_spying
	externdata wm_normal
	externdata wm_regs
	externdata wm_regidx
	externdata wm_interrupt_caught
	externdata wm_aborted
	externdata wm_overcode
#endif

/*
 *
 * Macro Name:	deref
 * Description:	Implements the dereference loop
 * Parameters:	Src		-- Source argument (any addressing mode)
 *		Dst		-- Destination register (must be an A register)
 *		GroundLabel	-- label to branch to when ground
 * Input Registers:
 *		None.
 * Output Registers:
 *		d0		-- for variable case (fall through), has same
 *				   value as Dst; for ground case (at
 *				   GroundLabel), low word will have 2 bit type
 * Other Registers:
 *		None.
 * Internal Labels:
 *		1000
 *
 */


#macro	deref	Src, Dst, GroundLabel
	move.l	Src,	d0
1000:	move.l	d0,	Dst
	and.w	#MTP_TAGMASK,	d0
	bne	GroundLabel
	move.l	(Dst),	d0
	cmp.l	Dst,	d0
	bne.s	1000b
#endm


/*
 *
 * Macro Name:	deref_d1
 * Description:	Implements the dereference loop using d1 for output tag
 * Parameters:	Src		-- Source argument (any addressing mode)
 *		Dst		-- Destination register (must be an A register)
 *		GroundLabel	-- label to branch to when ground
 * Input Registers:
 *		None.
 * Output Registers:
 *		d1		-- for variable case (fall through), has same
 *				   value as Dst; for ground case (at
 *				   GroundLabel), low word will have 2 bit type
 * Other Registers:
 *		None.
 * Internal Labels:
 *		1000
 *
 */


#macro	deref_d1 Src, Dst, GroundLabel
	move.l	Src,	d1
1000:	move.l	d1,	Dst
	and.w	#MTP_TAGMASK,	d1
	bne	GroundLabel
	move.l	(Dst),	d1
	cmp.l	Dst,	d1
	bne.s	1000b
#endm

/*
 * Macro Name: Template
 * Description:
 * Parameters:
 * Input Registers:
 * Output Registers:
 * OtherRegisters:
 * Internal Labels:
 */

/*
 * Macro Name:		fail
 * Description:		Causes failure
 * Parameters:
 * Input Registers:	Fail	-- contains the point to fail to
 * Output Registers:
 * OtherRegisters:
 * Internal Labels:
 *
 *	==================================
 *	MAC NOTE
 *	----------------------------------
 *	
 *	Since, on the Mac, we are storing the Fail address in a memory
 *	location as opposed to an A register, we must load the fail address
 *	into an A register and then jump to that address.
 *	=================================
 */

#ifdef MacOS
#macro	fail
	movea.l	Fail,a0
	jmp	(a0)
#endm
#else	/* MacOS */
#macro	fail
	jmp	(Fail)
#endm
#endif	/* MacOS */

/*
 * Macro Name:		tag_bne
 * Description:		branch if not tag
 *			If the value in d0 is not the same as Tag, a branch
 *			to Label is taken.  This macro should be placed at
 *			a ground label of a dereference loop or after a
 *			tag_ext macro.
 * Parameters:		Tag	-- Tag to compare against
 *			Label	-- place to branch to if
 * Input Registers:	d0	-- 2 bit tag
 * Output Registers:	d0	-- garbage
 * Other Registers:
 * Internal Labels:
 */

#macro	tag_bne	Tag, 	Label
	sub.w	#Tag, d0		; do comparison -- translator
					; will convert this to a quick
					; instruction if possible
	bne.s	Label			; branch to label if not equal
#endm

/*
 * Macro Name:		ctag_bne
 * Description:		branch if not constant tag
 *			The tag is extracted from Src (into d0) and compared
 *			against Tag.  If not equal, execution will continue
 *			at label
 * Parameters:		Tag	-- Constant tag to compare against
 *			Src	-- Source register
 *			Label	-- place to continue execution at if
 *				   Src does not have the same tag as Tag
 * Input Registers:	None.
 * Output Registers:	d0	-- tag remainder
 * Other Registers:
 * Internal Labels:
 */

#macro	ctag_bne Tag,	Src,	Label
	move.l	Src,	d0		; put Src in d0
	and.w	#MTP_CONSTMASK, d0	; get tag
	sub.w	#Tag, d0		; do comparison -- translator
					; will convert this to a quick
					; instruction if possible
	bne.s	Label			; branch to label if not equal
#endm


/*
 * Macro Name:		tag_ext
 * Description:		Extracts the tag out of the source argument into d0.
 *			This is often performed before a tag_swX macro.  The
 *			ground case of the dereference loop leaves the tag in
 *			d0, however, so a tag_ext may not be needed.
 * Parameters:		Src	-- source argument (probably an A-Register)
 * Input Registers:	None
 * Output Registers:	d0	-- 2 bit tag
 * Other Registers:	
 * Internal Labels:
 */

#macro	tag_ext	Src
	move.l	Src,	d0		; put argument in d0
	and.w	#MTP_TAGMASK, d0	; extract tag
#endm

/*
 * Macro Name:		tag_swc
 * Description:		For ground objects, will branch to the StructL or ListL
 *			label depending on tag in d0.  Will fall through on
 *			constants.  This macro should be used at the ground
 *			label for a dereference loop or after a tag_ext macro.
 *			
 * Parameters:
 *			StructL	-- place to branch to for structure
 *			ListL	-- place to branch to for list
 * Input Registers:	d0	-- 2 bit tag
 * Output Registers:	d0	-- tag minus 2
 * Other Registers:
 * Internal Labels:
 */

#macro	tag_swc	StructL, ListL
	subq.w	#MTP_LIST, d0		; do list comparison
	beq.s	ListL			; branch if list
	bcs.s	StructL			; branch if structure
	; fall through for constants
#endm

#ifdef MacOS
#macro	tag_swc_long	StructL, ListL
	subq.w	#MTP_LIST, d0		; do list comparison
	beq	ListL			; branch if list
	bcs	StructL			; branch if structure
	; fall through for constants
#endm
#endif

/*
 * Macro Name:		tag_sws
 * Description:		For ground objects, will branch to the ListL or ConstL
 *			label depending on tag in d0.  Will fall through on
 *			structures.  This macro should be used at the ground
 *			label of a dereference loop or after a tag_ext macro.
 * Parameters:
 *			ListL	-- place to branch to for list
 *			ConstL	-- place to branch to for constants
 * Input Registers:	d0	-- 2 bit tag
 * Output Registers:	d0	-- tag minus 2
 * Other Registers:
 * Internal Labels:
 */

#macro	tag_sws	ListL, ConstL
	subq.w	#MTP_LIST, d0		; do list comparison
	beq.s	ListL			; branch if list
	bhi.s	ConstL			; branch if constant
	; fall through for structures
#endm

/*
 * Macro Name:		tag_swl
 * Description:		For ground objects, will branch to the StructL or ConstL
 *			label depending on tag in d0.  Will fall through on
 *			structures.  This macro should be used at the ground
 *			label of a dereference loop or after a tag_ext macro.
 * Parameters:
 *			ListL	-- place to branch to for list
 *			ConstL	-- place to branch to for constants
 * Input Registers:	d0	-- 2 bit tag
 * Output Registers:	d0	-- tag minus 2
 * Other Registers:
 * Internal Labels:
 */

#macro	tag_swl	StructL, ConstL
	subq.w	#MTP_LIST, d0		; do list comparison
	bcs.s	StructL			; branch if structure
	bhi.s	ConstL			; branch if constant
	; fall through for lists
#endm

/*
 * Macro Name: 		bind
 * Description:		Binds Obj to Var and trails if necessary
 * Parameters:		Obj	-- Object
 * 			Var	-- Variable (must be an A reg)
 * Input Registers:
 * Output Registers:
 * OtherRegisters:	HB and SPB are compared against for the trailing.
 *			TR will be used for trailing and modified as appropriate
 * Internal Labels:	1000
 */

#macro	bind	Obj,	Var
	move.l	Obj,	(Var)		; do the binding
	cmp.l	Var,	HB		; see if HB is bigger
	bls.s	1000f			; branch if so
	cmp.l	Var,	SPB		; see if SPB is bigger
	bhi.s	1000f			; skip trailing if so
	move.l	Var,	-(TR)
1000:
#endm

/*
 * Macro Name:		untrail
 * Description:		performs the untrailing operation
 * Parameters:		Entry	-- entry point into the untrailing operation
 * Input Registers:	TR	-- trail pointer
 *			B	-- top choice point pointer (in memory)
 * Output Registers:	TR	-- will have value of B on exit
 * Other Registers:	a0	-- scratch
 * Internal Labels:	1000
 */

#macro	untrail	Entry
1000:	move.l	(TR)+,	a0		; get trail entry
	move.l	a0,	(a0)		; set trail entry to unbound
Entry:	cmp.l	B,	TR		; see if we need to untrail more
	bcs.s	1000b			; branch if so

#endm


/*
 * Macro Name:		gcinfo
 * Description:		Sets up the gcmagic information for builtins
 * Parameters:		Msk	-- argument mask
 *			NArgs	-- number of arguments
 *			NPV	-- size of environment
 */

#macro	gcinfo	Msk,	NArgs,	NPV
	long	(NPV << 16) | NArgs	; environment / argument sizes
	long	Msk			; argument usage mask
	long	-1			; end of clause marker
	long	0			; builtin indicator
#endm


/*
 * Macro Name:		callC0
 * Description:		Calls a 0-ary C function without updating shadows
 * Parameters:		func	-- function to call
 * Other Registers:
 */

#macro	callC0	func
	clr.l	wm_in_Prolog		; no longer in Prolog
	jsr	func
	move.l	#1,	wm_in_Prolog
	move.l	wm_safety, Safety
#endm

/*
 * Macro Name:		callC1
 * Description:		Calls a unary C function without updating shadows
 * Parameters:		func	-- function to call
 *			arg1	-- first and only argument
 * Other Registers:
 */

#macro	callC1	func,	arg1
	clr.l	wm_in_Prolog		; no longer in Prolog
	move.l	arg1,	-(SP)		; set up first argument
	jsr	func			; call the function
	addq.l	#4,	SP		; nuke argument
	move.l	#1,	wm_in_Prolog	; back in Prolog
	move.l	wm_safety, Safety	; update the safety register
#endm

/*
 * Macro Name:		callC2
 * Description:		Calls a binary C function without updating shadows
 * Parameters:		func	-- function to call
 *			arg1	-- first argument
 *			arg2	-- second argument
 * Other Registers:
 */


#macro	callC2	func,	arg1,	arg2
	clr.l	wm_in_Prolog		; no longer in Prolog
	move.l	arg2,	-(SP)		; set up second argument
	move.l	arg1,	-(SP)		; set up first argument
	jsr	func			; call the function
	addq.l	#8,	SP		; nuke arguments
	move.l	#1,	wm_in_Prolog	; back in Prolog
	move.l	wm_safety, Safety	; update the safety register
#endm


/*
 * Macro Name:		callC4
 * Description:		Calls a 4-ary C function without updating shadows
 * Parameters:		func	-- function to call
 *			arg1	-- first argument
 *			arg2	-- second argument
 *			arg3	-- third argument
 *			arg4	-- fourth argument
 * Other Registers:
 */

#macro	callC4	func,	arg1,	arg2,	arg3,	arg4
	clr.l	wm_in_Prolog		; no longer in Prolog
	move.l	arg4,	-(SP)		; set up fourth argument
	move.l	arg3,	-(SP)		; set up third argument
	move.l	arg2,	-(SP)		; set up second argument
	move.l	arg1,	-(SP)		; set up first argument
	jsr	func			; call the function
	add.l	#16,	SP		; nuke arguments
	move.l	#1,	wm_in_Prolog	; back in Prolog
	move.l	wm_safety, Safety	; update the safety register
#endm
