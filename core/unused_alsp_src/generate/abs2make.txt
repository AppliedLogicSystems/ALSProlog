
 		abs2make.pro
	Abstract Makefile Transformer

	Copyright (c) 1995 Applied Logic Systems, Inc.
 
 Author:	Ken Bowen
 Code Date:	06/06/95
 Doc  Date:	08/18/95

abs2make is a macro expander/transformer which converts "abstract makefiles"
into the concrete makefile templates (or even concrete makefiles) used in
the implementation and maintenance of ALS Prolog.  Presumably it will be
of use in other settings also.

Comment: The macros in an abs2make source are "metalevel" macros in that
they are processed to create other expressions which are usually also 
macros which are processed (by make) ... The occurrences of '$' are 
ground occurrences, and do not signify a macro argument in the abs2make 
source (but they will become part of an expression being output which is 
a macro argument in the makefile being created.)  Macro arguments in
the abs2make source are signified with '&'.

Source files for abs2make have extension 'abs'; for example: generic.abs.
The source files contain prolog terms, of particular forms.  A source
file must have the following general form:

SCHEMA

DEFINITIONS

Note that Prolog comments may be freely interspersed, since we process the
source file with the Prolog reader.  SCHEMA is a single term of the
form
	schema(L).

where L is a list of specifiers.  DEFINITIONS is a sequence of zero or more
defining expressions.  Roughly , the processing of a source file proceeds
as follows:

1.  Read the source file into memory (and close it).
2.  Open the output file.
3.  Process the list L, in order, according to the DEFINITIONS (and the
    context -- to be defined later), emitting zero or more output expressions
    into the output file.
4.  Close the output file.

The elements of L, the specifiers, are Prolog terms.

SCHEMA ::= schema(<schema list>)

<schema list> ::= [<schema seq>]

<schema seq> ::= <schema elt> | <schema elt><schema seq>

<schema elt> ::= <atom> | cmnt(<atom>)
			| <specifier equation>
			| dep(<atom>)
			| rule(<atom))
			| irule(<atom))
			| <explict dep specifier>
			| <case specifier>

Note that <atom> includes any atom, including quoted atoms.
----------------------------------------------------------------
	The syntax is generally recursive, but not all 
	combinations necessarily have semantic meaning, or
	will even be processed without failure.  Removing
	the unwanted failure cases should be straight-forward.
----------------------------------------------------------------
<specifier equation> ::= 

	<Left Specifier> = <Right Specifier>

	Examples:
		gforfiles_c  = ext(gforfiles,c)  qual one_per_line,
		~'OTHERFILES' = ext('OTHERFILES',c),

<Left Specifier> ::=  <atom> | ~<atom> 

	[Note: ~ has the semantic effect of suppressing macro expansion
                 in the expression to which it applies.]

<Right Specifier> ::=  <atom> | ~<atom> | <amacro expr> 
			| <cat expr> | <Specifier List>
                        | <ext spec list> | <qual ext list> 

	Examples:
		'SIORUN'
		~'OTHERFILES'
		&(object)
		'$(gfiles_' + &(object)

<amacro expr> ::= &(<atom>)

	Examples:
		&(object)
		&(context_name)

<cat expr> ::= <Right Specifier> + <Right Specifier>

	Examples:
		'$(gfiles_' + &(object)
		'$(gfiles_' + &(object) + ')'

<Specifier List> ::=  [ <Specifier Seq> ]

	Examples:
		[bsio,siolex]
		['$(gforfiles_c) $(gpckgfiles_c) $(glibfiles_c)']

<Specifier Seq>  ::= <Right Specifier> | <Right Specifier><Specifier Seq>

<ext spec list> ::= ext(<Right Specifier>, <Right Specifier)

	Examples:
		ext(gforfiles,c)
		ext(bdb,      &(object))
		ext([bsio,siolex],h)

<qual ext list> ::= <ext spec list> qual <qual term>

	Examples:
		ext(gforfiles,c) qual one_per_line
		ext(bdb,      &(object)) qual one_per_line
		ext([bsio,siolex],h) qual one_per_line

<qual term> ::= one_per_line                [other probably later]

--------------------------------------

<explict dep specifier> ::=  <Right Specifier> : <Right Specifier>

--------------------------------------

<case specifier> ::= case(<case spec expr>, <spec cases list>)

	Examples:
        	case(&(context_name),[
                	(msw31:noop),
                	(_:[ cmnt(4),
        			~'GENFILES' = ext('GENFILES',h),
        			'LEXRUN',
        			'SIORUN' ] ) ] )

<case spec expr> ::= <amacro expr>

	Examples:
		&(context_name)

<spec cases list> ::= [<spec branches seq>]

<spec branches seq> ::= <spec branch> | <spec branch><spec branches seq>

<spec branch> ::= (<spec case tag> : <schema list> )
			| (<spec case tag> : <schema elt> )
	Examples:
               	(msw31:noop)
		(djgpp:(exeformat = coff))
		(_:[ cmnt(4), ~'GENFILES' = ext('GENFILES',h), 'SIORUN' ])

===============================================================

<DEFINITIONS> ::=  <DEFINER> | <DEFINER><DEFINITIONS>

<DEFINER> ::= <eqn_definer> | <deps_on_definer>
		| <cmnt_definer> | <irule_definer>
		| <rule_definer> 

<eqn_definer> ::= <atom_or_amacro> = <def_eqn_right>

	Examples:
		'CPPFLAGS' = &(cpp_includes) + &(cpp_defines).
		&(cpp_defines) = '-DHAVE_CONFIG_H'.
		'OTHERFILES' = [alsglue].
		
<atom_or_amacro> ::= <atom> | <amacro>

<def_eqn_right> ::= <Right Specifier>

-------------------------------------------------------

<deps_on_definer> ::= <atom_or_amacro> depends_on <Right Specifier>

	Examples:
		generated depends_on ['${GENFILES}'].

-------------------------------------------------------

<cmnt_definer> ::= cmnt(<atom>) = <Right Specifier>

	Examples:
		cmnt(1) = ['How to build everything'].
		cmnt(2) = ['Define CPPFLAGS and the default rule for translating',
                           'C source files to object files'].
		cmnt(0) = ['        generic.mkf',
               '    Copyright (c) 1994-95 Applied Logic Systems, Inc.',
               '  ',
               'Makefile fragment to be included by each Makefile ',
               'for building ALS-Prolog on ' + &(context_name),
               '  ',
               'Generated by abs2make from generic.abs: '+date+' - '+time].

-------------------------------------------------------

<irule_definer> ::= 
	irule(<atom_or_amacro>) = 
		irule(<atom_or_macro>,<atom_or_macro>,<Right Specifier>).

		[It is required that in irule(A) = irule(B,C,X), that A=B.]

	Examples:
		irule(c) = irule(c,&(object), 
				['$(CC) -c $(CPPFLAGS) $(CFLAGS) $(X_CFLAGS) $<']).

-------------------------------------------------------

<rule_definer> ::=
	rule(<atom_or_amacro>) = 
		rule(<atom_or_macro>,<deps_list>,<action_list>).

		[It is required that in rule(A) = rule(B,D,X), that A=B.]

	Examples:
		rule('magic.h') =
    			rule('magic.h',
            			[generate/'magic.c', 'defs.h', 'aconfig.h', 
					     'oconfig.h', 'config.h', 'tconfig.h'],
            			['${CC} $(CPPFLAGS) -o magic $(srcdir)/generic/generate/magic.c',
             			 '$(MAGICRUN)',
             			 '-rm magic'  ] ).

<deps_list> ::= [<dep_seq>]

<dep_seq> ::= <path expr> | <path expr><dep_seq>

<path expr> ::= <atom> | <atom>/<path expr>

<action_list> ::= [<action seq>]

<action seq> ::= <Right specifier>

=========================================================================================

Know contexts (expands as os converage expands):
	unix, djgpp, mac, msw31, 

Pre-defined macro variables (supplied by system - no & required):

	date
	time
	
Pre-defined macro variables (supplied by contexts - need & application):

context_name = unix	mac		djgpp	msw31
path_sep = '/'	':'	'/'	'/'
local_sep = '/'	':'	'\\'	'\\'
search_path_sep = ':'	':'	';'	';'
object = o	obj	o	obj
invoke = ''	''	'go32'	''

===============================================

Invoking abs2make:

export abs2make/3.
abs2make(SrcFile,TgtFile,ContextName)

	Command-line form 
	   ( use alspro abs2make -g  abs2make_cl -p <switches>)
export abs2make_cl/0.
abs2make_cl

	<switches> ::= -src <file>.abs -tgt <file>.<ext> -ctx <CTX> 

 | 		-src: The source abstract file to process:
 |                      Arg format:  <file>.abs
 |
 |      -tgt: The target output file:
 |                      Arg format:  <file>.<ext>
 |
 |      -ctx: The context to use:
 |                      unix, djgpp, mac, msw31, ...
 |
 |      -termout: Ignore -tgt and output to terminal

===============================================
	
