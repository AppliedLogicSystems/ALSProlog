#include "assembly.88k"
#include "tokens.h"

	text
;
; Creation:  Brian K. Short   May 1988
;
;	Copyright (c) 1989 Motorola, Inc.
;	Copyright (c) 1989 Applied Logic Systems, Inc.
;
; functor.s --  Code for Builtin Functor/3
;
; Modified: Scott Medeiros	Sep 1992	big structures support
;
;  REGISTERS
;
;  A1	argument 1
;  A2	argument 2
;  A3	argument 3
;  CP	return address
;  OldE	old environment pointer
;  
	global _wm_functor

_wm_functor:

_f1:
	bb1	BGND,	A1,	_fgnd		; dereference A1
	ld	tmp1,	A1,	BIAS		;
	cmp	tmp2,	A1,	tmp1		;
	bb0.n	eq,	tmp2,	_f1		;
	addu	A1,	tmp1,	0		;
_f2:
;
; First argument is a variable.  Need to dereference the other
; arguments and build structure if everything is alright.
;

_f3:
	bb1	BGND,	A2,	_f5		; dereference A2
	ld	tmp1,	A2,	BIAS		;
	cmp	tmp2,	A2,	tmp1		;
	bb0.n	eq,	tmp2,	_f3		;
	addu	A2,	tmp1,	0		;
_f4:
;
; The first and second arguments are vars -- Fail
;
	jmp	Fail				;

_f5:
	bb1	BGND,	A3,	_f6		; dereference A3
	ld	tmp1,	A3,	BIAS		;
	cmp	tmp2,	A3,	tmp1		;
	bb0.n	eq,	tmp2,	_f5		;
	addu	A3,	tmp1,	0		;
;
; The first and third arguments are vars -- Fail
;
	jmp	Fail				;

;
; The first argument is var, the others are nonvar.
;
_f6:
	bb0	BNUM,	A3,	_fail		; integer(A3)?
	bb1	BUIA,	A3,	_fail		;

	extu	T3,	A3,	26<0>		; check value 
				; A3 holds tagged value  ; T3 - untagged value

	bcnd	lt0,	T3,	_fail		; fail if arity < 0

;
; The first arg is a variable, the second a nonvar, and the last
; is a non-negative integer
;
	bb0	BSYM,	A2,	_fnotsym	; symbol(A2)?

						; A2 is symbol for sure

	bb1	BUIA,	A2,	_fuia		; uia(A2)?
	bcnd	eq0,	T3,	_fgotsym	;
;
; The second argument is a symbol (not uia), build structure.
;
_fbuild:
	cmp	tmp2,	T3,	1023		; see if arity is escape arity
	bb1	eq,	tmp2,	_fnotdot	; if so, no way it can be dot/2
	; now check for dot/2  (0 <= arity < 1023)

	mak	tmp1,	T3,	10<16>		; shift the arity
	or	A2,	A2,	tmp1		; insert the arity

	addu	tmp1,	r0,	lo16(TK_DOT)	;
	or.u	tmp1,	tmp1,	TSYM+0x0002	; build dot functor

	cmp	tmp2,	A2,	tmp1		; 
	bb1	eq,	tmp2,	_fgotdot	; functor is dot/2?
;
; The first arg is var, second is not dot.
;
_fnotdot:					; build some structure

;	extu	A3,	A3,	26<0>		;  ?? A3 already untagged ??

	or.u	UArg1,	H,	TSTRUCT		; struct pointer to heap

	cmp	tmp1,	T3,	1023		; see if arity is too big
	bb1.n	lo,	tmp1,	1f		; branch for a normal size struct
	addu	H,	H,	4		; advance heap for non-big
	set	A2,	A2,	10<16>		; make the arity 1023
	st	A2,	H,	BIAS-4		; store functor/arity
						; advanced H past spot
	addu	H,	H,	4		; and now inc for first arg
	br.n	_fargs
	st	A3,	H,	BIAS-4		; store big arity after functor


1:	st	A2,	H,	BIAS-4		; store functor/arity
_fargs:

	st	H,	H,	BIAS		;
	subu	T3,	T3,	1		;
	bcnd.n	gt0,	T3,	_fargs		; done?
	addu	H,	H,	4		;

	addu	UArg2,	A1,	0		;
	addu	r1,	CP,	0		; return
	br.n	unify				; bind var & new struct
	addu	E,	OldE,	0		;

; 
; The second argument is the symbol dot.  Check arity and build list.
;
_fgotdot:

	or.u	UArg1,	H,	TLIST		; list pointer to heap

	st	H,	H,	BIAS		; push unbounds
	addu	H,	H,	4		; 
	st	H,	H,	BIAS		;
	addu	H,	H,	4		; 

	addu	UArg2,	A1,	0		; 
	addu	r1,	CP,	0		; return
	br.n	unify				; bind new list & var
	addu	E,	OldE,	0		; 

;
; The first arg is a var, the second argument is a uia, and the third is 
; an integer.  Need to get symbol to build struct.  A2 should get setup
; with a good symbol pointer to build the structure.  (symbolic UIA only)
;
_fuia:
;
; Need to setup the string address of uia in A2 for call to find_token.
; --right here A1=unbound, A2=symbolic uia, and 0<A3
;

	addu	E,	OldE,	0		; use up OldE
;
; Here is where we call find_token to get the token.  A pointer to
; the UIA string is passed.  The token should come back in r2.
;
	clr	UArg1,	A2,	6<26>		; get uia pointer

	subu	SP,	SP,	8
	st	r1,	SP,	BIAS

	bsr.n	_Find_token			; get the token back
	addu	UArg1,	UArg1,	BIAS+4		;

	ld	r1,	SP,	BIAS
	addu	SP,	SP,	8

	or	tmp1,	T3,	TSYM		; setup tag/arity
	mak	A2,	tmp1,	16<16>		; 
	or	A2,	A2,	UArg1		; the symbol/functor/arity

	bcnd	eq0,	T3,	_fgotsym 	; if arity is 0

	or.u	UArg1,	H,	TSTRUCT		; struct pointer
	cmp	tmp1,	T3,	1023		; see if arity is escape arity
	bb1.n	lo,	tmp1,	1f		; branch for a normal size struct
	addu	H,	H,	4		; advance heap in delay slot
	set	A2,	A2,	10<16>		; store functor/arity
						; make the arity 1023
	st	A2,	H,	BIAS-4		; advanced H past spot
	addu	H,	H,	4		; and now inc for first arg
	br.n	_fargg
	st	A3,	H,	BIAS-4		; store big arity after functor

1:	st	A2,	H,	BIAS-4		; store functor/arity
_fargg:
	st	H,	H,	BIAS		;
	subu	T3,	T3,	1		;
	bcnd.n	gt0,	T3,	_fargg		; done?
	addu	H,	H,	4		;

	addu	r1,	CP,	0		; return (OldE already set)
	br.n	unify				; bind var & new struct
	addu	UArg2,	A1,	0		;

;
; The first arg is a var, the second is a uia, and the last is the
; integer arity value 0.  Just bind the var and the (symbolic) uia.
;
_fvaruia:

	addu	UArg1,	A1,	0		; setup the var
	addu	UArg2,	A2,	0		; setup the uia

	addu	r1,	CP,	0		; return
	br.n	unify				; bind var/uia
	addu	E,	OldE,	0		;

;
; The first arg is a var, the second argument is not a symbolic
; constant (symbol/uia) but is ground, and the third is an integer.
;
_fnotsym:

	bb0	BNUM,	A2,	_fail		; arity of const's is 0

	extu	A3,	T3,	26<0>		; get integer arity
	bcnd	ne0,	T3,	_fail		; only arity 0 can match

;
; The first arg is a var, the second argument a constant, the last zero.
;
_fgotsym:

	addu	UArg1,	A1,	0		; bind first and second
	addu	UArg2,	A2,	0		;

	addu	r1,	CP,	0		; return
	br.n	unify				;
	addu	E,	OldE,	0		;


;
; The first argument is ground.
;
_fgnd:

	bb1	BLIST,	A1,	_flist		; list(A1)?
	bb1	BNUM,	A1,	_fconst		; constant(A1)?
	bb1	BSYM,	A1,	_fconst		; constant(A1)?
;
; First argument is a structure.
;
_fstruct:
	clr	tmp3,	A1,	6<26>		; make address
	ld	A1,	tmp3,	BIAS		; get functor

	addu	UArg1,	A2,	0		; get second arg
	bsr.n	unify				; unify the functors
	and.u	UArg2,	A1,	0xfc00		; remove the arity	

	extu	tmp1,	A1,	10<16>		; extract the arity
	cmp	tmp2,	tmp1,	1023		; see if arity is escape arity
	bb0.n	eq,	tmp2,	1f		; branch for a non-big structure
	or.u	UArg1,	tmp1,	TINT		; tag it as an integer
	ld	UArg1,	tmp3,	BIAS+4		; get big arity (already tagged)
1:	addu	UArg2,	A3,	0		; get the third arg

	addu	r1,	CP,	0		; return
	br.n	unify				; unify the arities
	addu	E,	OldE,	0		;

_fret:
	jmp.n	CP				; return
	addu	E,	OldE,	0		;


;
; First argument is a list.
;
_flist:

	addu	tmp1,	r0,	lo16(TK_DOT)	; make dot the functor
	or.u	UArg1,	tmp1,	TSYM		;
	bsr.n	unify				; unify dot & second arg
	addu	UArg2,	A2,	0		; second arg (functor)

	addu	tmp1,	r0,	2		; make arity 2
	or.u	UArg1,	tmp1,	TINT		;
	addu	UArg2,	A3,	0		; third arg (arity)

	addu	r1,	CP,	0		; return
	br.n	unify				; unify arity & third arg
	addu	E,	OldE,	0		;	


;
; First argument is a constant. (integer/float/symbol/uia)
;
_fconst:

	addu	UArg1,	A1,	0		; get first arg
	bsr.n	unify				; unify symbols
	addu	UArg2,	A2,	0		; get second arg

	or.u	UArg1,	r0,	TINT		; make integer 0
	addu	UArg2,	A3,	0		; get third arg

	addu	r1,	CP,	0		; return
	br.n	unify				; unify arity 0
	addu	E,	OldE,	0		;
	
	data
