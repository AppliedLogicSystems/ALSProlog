#include "assembly.88k"
#include "tokens.h"

; 
; Creation:	Craig Thornley
;		April 17, 1989
;
;	Copyright (c) 1989 Motorola, Inc.
;
; vec_prims.88k	contains prototype vector builtins
;
; Modified:	April 24, 1989	CT	split from vectest.88k
;					added vlength
;		April 25, 1989	CT	added varg_first & varg_last
;		April 27, 1989	CT	changed name to vec_prims.88k
;		March  7, 1992	SM	added utility routine vget_intargs_1n3

; make_vector(L,V)
; varg(N,V,A)
; varg_first(N,V,Vout)
; varg_last(N,V,Vout)
; vlength(V,L)
;
;

	text
	global	_make_vector
	global	_varg



; Vectors are basically floats with fences larger than 3 words.  All elements
; of the vector are doubles whether or not they can be represented as integers.
; Syntactically, vectors are created using lists 
; and then calling make_vector(X,Y) with the list as the first
; argument and a variable that will be the vector as the second argument.
;
; X = [1,2.3,8.0003,-44.2],
; make_vector(X,Y).
;
; will bind Y to a vector with 4 double precision numbers



_make_vector:
	
@derefA1:					; dereference first arg
	bb1	BGND,	A1,	@gotA1		; if ground get out
	ld	tmp1,	A1,	BIAS		; dereference
	cmp	A1,	A1,	tmp1		; compare the two
	bb0.n	eq,	A1,	@derefA1	; if not the same go again
	addu	A1,	tmp1,	ZERO		; put value back into A1

@gotA1:
	bb0	BLIST,	A1,	@vprims_fail	; if not a list, fail

@derefA2:
	bb1	BGND,	A2,	@vprims_fail	; if ground fail
	ld	tmp1,	A2,	BIAS		; dereference
	cmp	S,	A2,	HB		; do early trail check
	cmp	A2,	A2,	tmp1		; compare the two
	bb0.n	eq,	A2,	@derefA2	; if not the same go again
	addu	A2,	tmp1,	ZERO		; put value back into A2
	
	; Here we know A1 is a list and A2 is a variable.
	; tmp2 contains the count of elements in new vector

	or.u	T1,	H,	TFLT		; set T1 to float pointer
	bb1.n	hs,	S,	@A2cont		; branch if A2 >= HB
	st	T1,	A2,	BIAS		;  but first bind A2 to T1
	cmp	S,	A2,	SPB		; SPB check
	bb1	lo,	S,	@A2cont		; branch if A2 < SPB
	subu	TR,	TR,	4		; get new trail entry
	st	A2,	TR,	ZERO		; and trail the bugger

@A2cont:
	; tmp2 contains the word count of the vector + 1
	; UArg1 contains address where next vector element
	; will be placed.  After all elements have been put into
	; the vector UArg1 will be used to construct the fence

	addu	tmp2,	ZERO,	1		; tmp2 starts at 1
	addu	UArg1,	ZERO,	BIAS+4		; UArg1 starts at BIAS+ a fence

_get_elems:
	clr	A1,	A1,	6<26>		; get address of list
	ld	tmp1,	A1,	BIAS		; load car of list
	bsr	put_elem			; put first elem

	ld	A1,	A1,	BIAS+4		; get cdr of list
@ge_derefA1:
	bb1	BGND,	A1,	@ge_cont	; if ground get out
	ld	tmp1,	A1,	BIAS		; dereference
	cmp	A1,	A1,	tmp1		; compare the two
	bb0.n	eq,	A1,	@ge_derefA1	; if not the same go again
	addu	A1,	tmp1,	ZERO		; put value back into A1
	br	@vprims_fail

@ge_cont:
	bb1	BLIST,	A1,	_get_elems	; if another list, recurse

	addu	tmp1,	ZERO,	lo16(TK_NIL)	; make sure the cdr is nil
	or.u	tmp1,	tmp1,	TSYM
	cmp	A1,	tmp1,	A1
	bb0	eq,	A1,	@vprims_fail	; if not [], fail
	
	; this block of code puts the fences around the vector
	; and moves the heap 
	or	tmp1,	ZERO,	tmp2		; build the fence
	or.u	tmp1,	tmp1,	TFNC		; for the vector
	st	tmp1,	H,	BIAS		; store first fence
	st	tmp1,	H,	UArg1		; store second fence
	addu	UArg1,	UArg1,	4		; add 4 for second fence
	addu	H,	H,	UArg1		; and bump the heap
	jmp.n	CP
	addu	E,	OldE,	ZERO		; reset environment

	


	; put_elem finds an argument in tmp1 and determines what type
	; it is.  If not a number we fail.  Bummer!
put_elem:
@pe_derefA1:
	bb1	BGND,	tmp1,	@pe_cont	; if ground get out
	ld	A3,	tmp1,	BIAS		; dereference
	cmp	tmp1,	tmp1,	tmp2		; compare the two
	bb0.n	eq,	tmp1,	@pe_derefA1	; if not the same go again
	addu	tmp1,	A3,	ZERO		; put value back into tmp1

@pe_cont:
	bb0	BNUM,	tmp1,	@vprims_fail	; fail if not a number
	bb0	BUIA,	tmp1,	@convert_int	; branch if integer
	; we have a float
	extu	tmp1,	tmp1,	26<0>		; get address of float
	ld	T3,	tmp1,	BIAS+4		; jump fence to get 1st half
	br.n	@storeT3T4
	ld	T4,	tmp1,	BIAS+8		; get 2nd half of double

@convert_int:
	ext	T3,	tmp1,	26<0>		; strip tag off of integer
	flt.ds	T3,	T3			; convert to double

@storeT3T4:
	st	T3,	H,	UArg1		; put first half of double
	addu	UArg1,	UArg1,	4		; move for next word
	st	T4,	H,	UArg1	 	; put second half of double
	addu	UArg1,	UArg1,	4		; move again
	jmp.n	r1				; return to calling sub
	addu	tmp2,	tmp2,	2		; increment tmp2





	; varg(+N,+V,?Arg) Arg is unified with the Nth element of vector V
	; Notice that V is bound and ground which means that varg won't bind
	; the Nth element of V.

_varg:
	bsr	@vget_twoargs			; go get first two args
	ld	tmp1,	A2,	BIAS		; load fence
	clr	tmp1,	tmp1,	6<26>		; get word count
	add	A1,	A1,	A1		; convert to words
	cmp	tmp2,	A1,	tmp1		; compare
	bb0	lt,	tmp2,	@vprims_fail	; too big? fail

	mul	A1,	A1,	4		; convert to bytes
	addu	A2,	A2,	A1		; add 'em in
	ld	tmp1,	A2,	BIAS-4		; load the doubles

	br.n	_punify_answer			; see sca_reals.88k
	ld	tmp2,	A2,	BIAS




	; @vget_twoargs ensures that there is an integer in A1
	; and a vector in A2.  When finished, A1 contains the integer
	; and A2 contains the pointer to the first fence of the vector.

@vget_twoargs:
@vargderefA1:
	bb1	BGND,	A1,	@varggr1	; if ground get 2nd arg
	ld	tmp1,	A1,	BIAS		; dereference
	cmp	A1,	A1,	tmp1		; compare the two
	bb0.n	eq,	A1,	@vargderefA1	; if not the same go again
	addu	A1,	tmp1,	ZERO		; put value back into A1
	jmp	Fail				; unbound, so fail
@varggr1:
	bb0	BNUM,	A1,	@vprims_fail	; fail if A1 not number
	bb1	BUIA,	A1,	@vprims_fail	; fail if A1 float
	ext	A1,	A1,	26<0>		; get integer
	bcnd	le0,	A1,	@vprims_fail	; fail if negative

@vargderefA2:
	bb1	BGND,	A2,	@varggr2	; if ground get out
	ld	tmp1,	A2,	BIAS		; dereference
	cmp	A2,	A2,	tmp1		; compare the two
	bb0.n	eq,	A2,	@vargderefA2	; if not the same go again
	addu	A2,	tmp1,	ZERO		; put value back into A2
	jmp	Fail				; unbound, so fail

@varggr2:
	bb0	BNUM,	A2,	@vprims_fail	; fail if not a number
	bb0	BUIA,	A2,	@vprims_fail	; must be vector
	jmp.n	r1
	clr	A2,	A2,	6<26>		; get address of fence



	; vget_intargs_1_n3 dereferences A1 and A3, succeeding if both are bound to
	; integer terms.  Furthermore, A1 >=0, and A3>0.
	; The untagged integers are left in A1 and A3.

	global	_vget_intargs_1n3

_vget_intargs_1n3:
	deref	A1,	2f
	fail
2:	; A1 must be an int, >=0
	bb0	BNUM,	A1,	@vprims_fail	; fail if A1 not number
	bb1	BUIA,	A1,	@vprims_fail	; fail if A1 float
	ext	A1,	A1,	26<0>		; get integer
	bcnd	lt0,	A1,	@vprims_fail	; fail if negative	

	deref	A3,	3f
	fail
3:	; A3 must be an int, > 0
	bb0	BNUM,	A3,	@vprims_fail	; fail if A1 not number
	bb1	BUIA,	A3,	@vprims_fail	; fail if A1 float
	ext	A3,	A3,	26<0>		; get integer
	bcnd	le0,	A3,	@vprims_fail	; fail if negative or zero
	jmp	RET	


	global _varg_first
	global _varg_last

	; varg_first(+N,+V,-Vout) the first N elements of vector V are put
	; into a new vector Vout.

_varg_first:
	bsr	@vget_twoargs
	bsr	@bindA3

	addu	UArg1,	UArg1,	BIAS+4		; jump fence for new vector
	addu	UArg2,	A2,	BIAS+4		; same for old vector
	addu	tmp1,	A1,	ZERO		; number of words to copy
		
	bsr	_copywords			; call the copy routine

	jmp.n	CP
	addu	E,	OldE,	ZERO		; reset env


_varg_last:
	bsr	@vget_twoargs
	bsr	@bindA3

	addu	UArg1,	UArg1,	BIAS+4		; jump fence for new vector
	subu	tmp1,	tmp1,	A1		; offset into old vector
	addu	UArg2,	A2,	BIAS+4		; same for old vector
	mul	tmp2,	tmp1,	4		; convert offset to bytes
	addu	UArg2,	UArg2,	tmp2		; add the offset
	addu	tmp1,	A1,	ZERO		; number of words to copy

	bsr	_copywords			; call the copier

	jmp.n	CP
	addu	E,	OldE,	ZERO		; reset env



	; @bindA3 dereferences A3, failing if not unbound, and binds
	; it to a TFLT of the appropriate length for varg_first and
	; varg_last.  When it returns A3 will be bound to the new vector,
	; UArg1 contains pointer to new vector (first fence), A2 contains 
	; pointer to old vector, tmp1 contains the number of words in old
	; vector (no fences included), and A1 contains the number of words
	; wanted in resultant vector

@bindA3:
@varg_derefA3:
	bb1	BGND,	A3,	@vprims_fail	; fail if ground
	ld	tmp1,	A3,	BIAS		; dereference
	cmp	S,	A3,	HB		; early trail check
	cmp	A3,	tmp1,	A3		; compare
	bb0.n	eq,	A3,	@varg_derefA3	; if not same, go again
	addu	A3,	tmp1,	ZERO		; but first put back into A3

	; A3 ready to get bound 
	; A1 contains integer count in elements
	; A2 contains pointer to first fence of old vector

	ld	tmp1,	A2,	BIAS		; load the fence
	clr	tmp1,	tmp1,	6<26>		; get word count to next fence
	subu	tmp1,	tmp1,	1		; # of words in vector
	addu	A1,	A1,	A1		; multiply by 2
	cmp	tmp2,	A1,	tmp1		; compare sizes
	bb1	hi,	tmp2,	@vprims_fail	; fail if request too big

	; bind A3 to TFLT
	or.u	UArg1,	H,	TFLT		; set UArg1 to float pointer
	bb1.n	hs,	S,	@A3cont		; branch if A2 >= HB
	st	UArg1,	A3,	BIAS		;  but first bind A3
	cmp	S,	A3,	SPB		; SPB check
	bb1	lo,	S,	@A3cont		; branch if A3 < SPB
	subu	TR,	TR,	4		; get new trail entry
	st	A3,	TR,	ZERO		; and trail it

@A3cont:
	clr	UArg1,	UArg1,	6<26>		; set UArg1 to ptr to new vec
	; make a fence for the new vector
	addu	tmp2,	A1,	1		; build the fence
	or.u	tmp3,	tmp2,	TFNC
	st	tmp3,	H,	BIAS		; store first fence
	mul	tmp2,	tmp2,	4		; convert to bytes
	addu	H,	H,	tmp2		; bump heap to next fence
	st	tmp3,	H,	BIAS		; store second fence
	addu	H,	H,	4		; bump heap past fence

	jmp	r1



	; copywords assumes a pointer (BIAS already included) to new location
	; in UArg1, a pointer to the old location in UArg2, and number of words
	; to copy in tmp1
	global _copywords

_copywords:
	subu	tmp1,	tmp1,	1		; prepare counter for loop
	
@cploop:
	ld	tmp2,	UArg2[tmp1]		; load last element
	st	tmp2,	UArg1[tmp1]		; store last element
	bcnd.n	ne0,	tmp1,	@cploop		; if not zero, go again
	subu	tmp1,	tmp1,	1		; decrement count

	jmp	r1




	global _vlength
	; vlength(+V,?Length) Length is the number of elements in vector V.

_vlength:
@vlderefA1:
	bb1	BGND,	A1,	@vlgr1		; if ground get 2nd arg
	ld	tmp1,	A1,	BIAS		; dereference
	cmp	S,	A1,	HB		; do early trail check
	cmp	A1,	A1,	tmp1		; compare the two
	bb0.n	eq,	A1,	@vlderefA1	; if not the same go again
	addu	A1,	tmp1,	ZERO		; put value back into A1
	jmp	Fail				; unbound, so fail
@vlgr1:
	bb0	BNUM,	A1,	@vprims_fail	; fail if A1 not number
	bb0	BUIA,	A1,	@vprims_fail	; fail if A1 not a float
	clr	A1,	A1,	6<26>		; get address of fence
	ld	A1,	A1,	BIAS		; load fence
	clr	A1,	A1,	6<26>		; get word # to next fence
	subu	A1,	A1,	1		; subtract 1
	extu	A1,	A1,	26<1>		; div by 2

	or.u	A1,	A1,	TINT		; set integer tag

@vlderefA2:
	bb1	BGND,	A2,	@vlgr2		; if ground get out
	ld	tmp1,	A2,	BIAS		; dereference
	cmp	A2,	A2,	tmp1		; compare the two
	bb0.n	eq,	A2,	@vlderefA2	; if not same go again
	addu	A2,	tmp1,	ZERO		; but first put val into A2	
	
	bb1.n	hs,	S,	@vlfinish	; branch if A2 >= HB
	st	A1,	A2,	BIAS		;  but first bind A2
	cmp	S,	A2,	SPB		; SPB check
	bb1	lo,	S,	@vlfinish	; branch if A3 > SPB
	subu	TR,	TR,	4		; get trail entry
	st	A2,	TR,	ZERO		; and trail the thing
	br	@vlfinish

	; A2 unbound so bind it to INT in A1
@vlgr2:
	cmp	tmp1,	A1,	A2		; compare two
	bb0	eq,	tmp1,	@vprims_fail	; if not equal, fail
	
@vlfinish:
	jmp.n	CP
	addu	E,	OldE,	ZERO		; reset env



@vprims_fail:
	jmp	Fail


