#include "assembly.88k"
#include "tokens.h"

	text
;
; Creation:  Brian K. Short   May 1988
; 
;	Copyright (c) 1989 Motorola, Inc.
;	Copyright (c) 1989 Applied Logic Systems, Inc.
;
; compare.s --  Code for Builtin Compare/3 (oh boy!)
;
; Modified: Scott Medeiros	Sep 1992	bug fix, big structures support
;
;  REGISTERS
;
;  A1	argument 1	(relational op)
;  A2	argument 2	(first term)
;  A3	argument 3	(second term)
;  CP	return address
;  
	global _wm_compare

_wm_compare:

	bsr.n	compare				; return if equal
	addu	E,	OldE,	0		;

	addu	UArg1,	r0,	lo16(TK_EQ)	; setup equality
	or.u	UArg1,	UArg1,	TSYM		;

	addu	r1,	CP,	0		; return (all the way)
	br.n	unify				; 
	addu	UArg2,	A1,	0		; setup relational op
;
; Compare two terms to determine relation.  Return only when equal.
;
compare:
_c1:
	bb1	BGND,	A2,	_cmp_g1		; dereference A2
	ld	tmp1,	A2,	BIAS
	cmp	tmp2,	A2,	tmp1
	bb0.n	eq,	tmp2,	_c1
	addu	A2,	tmp1,	0
;
; The first term is a var.
;
_c2:
	bb1	BGND,	A3,	_cmp_lt		; dereference A3
	ld	tmp1,	A3,	BIAS
	cmp	tmp2,	A3,	tmp1
	bb0.n	eq,	tmp2,	_c1
	addu	A3,	tmp1,	0
;
; Both terms are vars, compare them.
;
	cmp	tmp1,	A2,	A3		; compare variables
	bb1	eq,	tmp1,	_cmp_eq		;
;
; The terms are distinct variables.
;
	bb1	hi,	tmp1,	  _cmp_gt	; var1 > var2 ?
;
; The first term is less than the second.
;
_cmp_lt:
	addu	UArg1,	r0,	lo16(TK_LESS)	; setup less than
	or.u	UArg1,	UArg1,	TSYM		;

	addu	r1,	CP,	0		; return (all the way)
	br.n	unify				;
	addu	UArg2,	A1,	0		; setup relational op
;
; The two terms are equal.
;
_cmp_eq:					; terms are equal
	jmp	r1				; return (one time)
;
; First term is ground, second is unknown, not dereferenced.
;
_cmp_g1:

	bb1	BGND,	A3,	_cgnd12		; dereference A3
	ld	tmp1,	A3,	BIAS	
	cmp	tmp2,	A3,	tmp1
	bb0.n	eq,	tmp2,	_cmp_g1
	addu	A3,	tmp1,	0
;
; Second term is var, so greater than.
;

;
; The first term is greater than the second.
;
_cmp_gt:

	addu	UArg1,	r0,	lo16(TK_GRT)	; setup greater than
	or.u	UArg1,	UArg1,	TSYM		;

	addu	r1,	CP,	0		; return (all the way)
	br.n	unify				;
	addu	UArg2,	A1,	0		; setup relational op

_cgnd12:
;
; Both terms are nonvar and dereferenced.  Need to compare them.
;
	cmp	tmp1,	A2,	A3		; compare terms
	bb1	eq,	tmp1,	_cmp_eq		; equal terms?
;
; Terms are nonvar, but not equal.  Do some stuff.
;
	bb1	BLIST,	A2,	_cmp_list1	; first term list?
	bb0	BSTRC,	A2,	_cmp_const1	; first term const?
;
; Must be a structure, nothing else left.
;
_cmp_struct1:

	bb1	BLIST,	A3,	_struct_list	; list(A3)?
	bb0	BSTRC,	A3,	_cmp_gt		; structure > const
;
; The two terms are both structures, need to compare them.
;
; 9/18/92 Big Structures mods by Scott Medeiros (and a bug fix - compare arities
; 		_before_ check for identical functors)
_struct_struct:

	clr	A2,	A2,	6<26>		; get struct addresses
	clr	A3,	A3,	6<26>		;

	ld	UArg1,	A2,	BIAS		; get functor/arity #1
	extu	tmp1,	UArg1,	10<16>		; get arity 1
	ld	UArg2,	A3,	BIAS		; get functor/arity #2
	extu	tmp2,	UArg2,	10<16>		; get arity 2

	cmp	tmp3,	tmp1,	tmp2		; compare arities
	bb1	lt,	tmp3,	_cmp_lt		; first structure has smaller arity, hence <
	bb1	gt,	tmp3,	_cmp_gt		; first structure has greater arity, hence >

	cmp	tmp3,	tmp1,	1023		; check for escape arity
	bb0	eq,	tmp3,	1f		; no big structures involved, so continue
	ld	tmp1,	A2,	BIAS+4		; get big arity 1
	ld	tmp2,	A3,	BIAS+4		; get big arity 2
	cmp	tmp3,	tmp1,	tmp2		; compare big arities
	bb1	lo,	tmp3,	_cmp_lt		; first structure has smaller arity, hence <
	bb1	hi,	tmp3,	_cmp_gt		; first structure has greater arity, hence >
	; big arities are the same, set up base addresses for fetching args  -- skip over arity
	clr	tmp2,	tmp1,	6<26>		; nuke integer tag from arity
	addu	A2,	A2,	BIAS+4		; base address of object 1
	br.n	_ssmatch
	addu	A3,	A3,	BIAS+4		; base address of object 2


1:	cmp	tmp1,	UArg1,	UArg2		; now compare functors (arities are same)
	bb1	lt,	tmp1,	_cmp_lt		; functor1 < functor2
	bb1	gt,	tmp1,	_cmp_gt		; functor1 > functor2
	; arities are the same, set up base addresses for fetching args
	addu	A2,	A2,	BIAS		; base address of object 1
	addu	A3,	A3,	BIAS		; base address of object 2


; functor and arity the same, must process the arguments <sigh>
	
;
; A2 and A3 are the base addresses of the objects,
; UArg1 and UArg2 are the functor/arity pairs,
; tmp1 and tmp2 are the arities.
; Thing to do is look at the args.
;
_ssmatch:

	subu	SP,	SP,	8		; save the arity
	st	r1,	SP,	0x0+BIAS
	st	tmp2,	SP,	0x4+BIAS

	bsr	_symbol_symbol	

	ld	r1,	SP,	0x0+BIAS
	ld	UArg1,	SP,	0x4+BIAS	; restore arity into UArg1
	addu	SP,	SP,	8
;
; The functor strings are equal, so look at the arities.
;

;*****
; Modified by Craig Thornley to compare args in proper order
; October 5, 1988.
;
; Functors and arity are identical, so compare the args.
;
	or	UArg2,	r0,	1		; arg count 
	cmp	tmp1,	UArg2,	UArg1		; how many do we compare
	bb1	lo,	tmp1,	_carndd		; arity greater than 1	

	ld	A2,	A2[UArg2]		; only one arg, do it
	br.n	compare
	ld	A3,	A3[UArg2]

_carndd:

	subu	SP,	SP,	0x14		; push the stack
	st	r1,	SP,	0x0+BIAS
	st	A2,	SP,	0x4+BIAS
	st	A3,	SP,	0x8+BIAS

	ld	A2,	A2[UArg2]		; load arg1 
	ld	A3,	A3[UArg2]		; load arg2

	st	UArg1,	SP,	0xC+BIAS	; save arity
	bsr.n	compare				; compare the args
	st	UArg2,	SP,	0x10+BIAS	; save arg count

_cstop:
;
; Return here if they are equal.
;
	ld	A2,	SP,	0x4+BIAS	; reload addresses
	ld	A3,	SP,	0x8+BIAS	;
	ld	UArg1,	SP,	0xC+BIAS	; get arity 
	ld	UArg2,	SP,	0x10+BIAS	; get arg count 

	addu	UArg2,	UArg2,	1		; bump arg count
	ld	A2,	A2[UArg2]		; 
	ld	A3,	A3[UArg2]		;
	
	cmp	tmp1,	UArg2,	UArg1		; compare arg count & arity
	bb1.n	lo,	tmp1,	compare		; compare if more than 1 arg
	st	UArg2,	SP,	0x10+BIAS	; save arg count
;
; All of the args so far are equal, compare the last one and continue.
;
	ld	r1,	SP,	0x0+BIAS	; return (once)
	br.n	compare				;
	addu	SP,	SP,	0x14		; pop stack
;*****

;
; The first term is a structure, the second is a list.
;
_struct_list:

	clr	A2,	A2,	6<26>		; get struct addresses
	clr	A3,	A3,	6<26>		;

	addu	A3,	A3,	BIAS-4		; offset the list
	addu	A2,	A2,	BIAS		

	ld	UArg1,	A2,	0		; get functor/arity
	extu	tmp1,	UArg1,	10<16>		; get arity
	cmp	tmp3,	tmp1,	1023		; check for escape arity
	bb0	eq,	tmp3,	1f		; branch for usual size struct
	ld	tmp1,	A2,	4		; get big arity into tmp1

1:	addu	UArg2,	r0,	lo16(TK_DOT)	; functor is dot
	or	tmp2,	ZERO,	2		; arity = 2
	br.n	_ssmatch			; match the structs
	or.u	UArg2,	UArg2,	TSYM+0x2	; add arity/tag
;
; The first term is a list, the second is a structure.
;
_list_struct:

	clr	A2,	A2,	6<26>		; get addresses
	clr	A3,	A3,	6<26>		;

	addu	A2,	A2,	BIAS-4		; offset the list
	addu	A3,	A3,	BIAS		; offset the list

	ld	UArg2,	A3,	0		; get functor/arity
	extu	tmp1,	UArg2,	10<16>		; get arity
	cmp	tmp3,	tmp1,	1023		; check for escape arity
	bb0	eq,	tmp3,	1f		; branch for usual size struct
	ld	tmp1,	A3,	4		; get big arity into tmp1

1:	addu	UArg1,	r0,	lo16(TK_DOT)	; functor is dot	
	or	tmp2,	ZERO,	2		; arity = 2
	br.n	_ssmatch			; match the structs
	or.u	UArg1,	UArg1,	TSYM+0x2	; add arity/tag

;
; First term is list, second is unknown ground object.
;
_cmp_list1:

	bb1	BNUM,	A3,	_cmp_gt		; list > const
	bb1	BSYM,	A3,	_cmp_gt		; list > const

;
; First term is list, second is list or structure.
;
	bb1	BSTRC,	A3,	_list_struct	; struct(A3)?

;
; Both are lists, compare them.
;
_list_list:

	cmp	tmp1,	A2,	A3		; same list?
	bb1	eq,	tmp1,	_cmp_eq		;

	clr	A2,	A2,	6<26>		; get addresses
	clr	A3,	A3,	6<26>		;

	subu	SP,	SP,	0x10		; push stack
	st	r1,	SP,	0x0+BIAS	;
	st	A2,	SP,	0x4+BIAS	;
	st	A3,	SP,	0x8+BIAS	;

	ld	A2,	A2,	BIAS		; first car
	bsr.n	compare				; compare the car's
	ld	A3,	A3,	BIAS		; second car
						; return only if equal

	ld	A2,	SP,	0x4+BIAS	;
	ld	A3,	SP,	0x8+BIAS	;
	ld	r1,	SP,	0x0+BIAS	; pop the stack

	ld	A2,	A2,	BIAS+4		; get cdrs
	ld	A3,	A3,	BIAS+4		;

	br.n	compare				; compare cdr's
	addu	SP,	SP,	0x10		;

;
; First term is constant, second is unknown ground object.
;
_cmp_const1:

	bb1	BSTRC,	A3,	_cmp_lt		; const < struct
	bb1	BLIST,	A3,	_cmp_lt		; const < list
;
; Both terms are constants, need to compare them.
;
_const_const:

	bb1	BSYM,	A2,	_sym_const	; symbol(A2)?
	bb1	BSYM,	A3,	_cmp_lt		; number < symbol
;
; The two terms are numbers.  Need to compare them.
;
	bb1	BUIA,	A2,	_float_num	; float(A2)?
	bb1	BUIA,	A3,	_int_float	; float(A3)?
;
; Both terms are integers.  Need to compare them.
;
	ext	A2,	A2,	26<0>		; get (signed) ints
	ext	A3,	A3,	26<0>		;

	cmp	tmp1,	A2,	A3		; compare them
	bb1	gt,	tmp1,	_cmp_gt		;
	bb1	lt,	tmp1,	_cmp_lt		;

	jmp	r1				; equal (return)

;
; The first term is a uia and the second is an unknown symbolic type.
;
_uia_sym:
	bb0	BUIA,	A3,	_uia_symbol	; uia(A3)?
;
; Both terms are uia's.
;
_uia_uia:
	clr	A2,	A2,	6<26>		; uia addresses
	clr	A3,	A3,	6<26>		;

	addu	UArg1,	A2,	BIAS+4		; jump the fence
	br.n	_cmp_strings			;
	addu	UArg2,	A3,	BIAS+4		;

;
; The first term is a uia and the second is a symbol.
;
_uia_symbol:

	subu	SP,	SP,	8
	st	r1,	SP,	BIAS+0x0

	bsr.n	_Token_name			; UArg1=token 
	extu	UArg1,	A3,	26<0>		;

	ld	r1,	SP,	BIAS+0x0
	addu	SP,	SP,	8

	addu	UArg2,	UArg1,	0		; swap the arg

	clr	A2,	A2,	6<26>		; address of uia
	br.n	_cmp_strings			;
	addu	UArg1,	A2,	BIAS+4		; jump the fence

; 
; The first term is a symbol and the second is a uia.
;
_symbol_uia:

	subu	SP,	SP,	8
	st	r1,	SP,	BIAS+0x0

	bsr.n	_Token_name			; UArg1=token 
	extu	UArg1,	A2,	26<0>		;

	ld	r1,	SP,	BIAS+0x0
	addu	SP,	SP,	8

	clr	A3,	A3,	6<26>		; address of uia
	br.n	_cmp_strings			;
	addu	UArg2,	A3,	BIAS+4		; jump the fence


;
; The first term is a float and the second is an unknown numeric type.
;
_float_num:
	bb0	BUIA,	A3,	_float_int	; integer(A3)?
;
; Both are floats, compare them.
;
_float_float:
	clr	A2,	A2,	6<26>		; get addresses
	clr	A3,	A3,	6<26>		; 
	
	ld	tmp1,	A2,	BIAS+0x4	; get double 1
	ld	tmp3,	A3,	BIAS+0x4	; get double 2
	ld	tmp2,	A2,	BIAS+0x8	;
	ld	tmp4,	A3,	BIAS+0x8	;

	fcmp.sdd tmp1,	tmp1,	tmp3		; compare the doubles
	bb1	gt,	tmp1,	_cmp_gt		; greater than
	bb1	lt,	tmp1,	_cmp_lt		; less than

	jmp 	r1				; equal (return)


;
; The first term is a float and the second is an integer.
;
_float_int:

	ext	A3,	A3,	26<0>		; get the signed int
 	flt.ds	tmp3,	A3			; make a double

	clr	A2,	A2,	6<26>		; get the address
	ld	tmp1,	A2,	BIAS+0x4	;
	ld	tmp2,	A2,	BIAS+0x8	;

	fcmp.sdd tmp1,	tmp1,	tmp3		; compare the doubles
	bb1	gt,	tmp1,	_cmp_gt		; greater than
	bb1	lt,	tmp1,	_cmp_lt		; less than

	jmp 	r1				; equal (return)

;
; The first term is an integer and the second is a float.
;
_int_float:
	ext	A2,	A2,	26<0>		; get the signed int
 	flt.ds	tmp3,	A2			; make a double

	clr	A3,	A3,	6<26>		; get the address
	ld	tmp1,	A3,	BIAS+0x4	;
	ld	tmp2,	A3,	BIAS+0x8	;

	fcmp.sdd tmp1,	tmp3,	tmp1		; compare the doubles
	bb1	gt,	tmp1,	_cmp_gt		; greater than
	bb1	lt,	tmp1,	_cmp_lt		; less than

	jmp 	r1				; equal (return)

;
; The first term is a symbolic constant.  The second is an unknown
; type of constant.  Compare the terms.
;
_sym_const:

	bb0	BSYM,	A3,	_cmp_gt		; symbol > number

;
; Both terms are symbolic constants.
;
	bb1	BUIA,	A2,	_uia_sym	; uia(A2)?
	bb1	BUIA,	A3,	_symbol_uia	;

	addu	UArg1,	A2,	0
	addu	UArg2,	A3,	0

;
; Both terms are symbols, compare them.
;
_symbol_symbol:

	extu	UArg1,	UArg1,	16<0>		; extract the tokens
	extu	UArg2,	UArg2,	16<0>

	cmp	tmp3,	UArg1,	UArg2		; compare the tokens
	bb1	eq,	tmp3,	_cret		

	subu	SP,	SP,	8
	st	r1,	SP,	BIAS

	bsr	_Token_name			; token in UArg1

	addu	tmp3,	UArg1,	0
	addu	UArg1,	UArg2,	0

	bsr	_Token_name			;  token in Uarg1

	ld	r1,	SP,	BIAS
	addu	SP,	SP,	8

	addu	UArg2,	UArg1,	0
	addu	UArg1,	tmp3,	0

;
; Compare two strings with base addresses in UArg1 and UArg2.
; Returns if they are equal, and calls appropriate routine, otherwise.
;
_cmp_strings:

	addu	tmp3,	r0,	0		; init counter

_cstrings:

	ld.bu	tmp1,	UArg1[tmp3]		; get chars
	ld.bu	tmp2,	UArg2[tmp3]		;

	addu	tmp3,	tmp3,	1		; count chars

	cmp	tmp4,	tmp1,	tmp2		;
	bb1	hi,	tmp4,	_cmp_gt		; string1 > string2
	bb1	lo,	tmp4,	_cmp_lt		; string1 < string2

	bcnd	ne0,	tmp1,	_cstrings	; NULL?
;
; Just Return.
;
_cret:
	jmp	r1				; return

	data
