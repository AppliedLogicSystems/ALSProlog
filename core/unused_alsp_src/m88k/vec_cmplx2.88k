#include "assembly.88k"
;
; Creation:	Craig Thornley
;		May 1, 1989
;
;	Copyright (c) 1989 Motorola, Inc.
;
; vec_cmplx2.88k contains complex vector builtins
;
; Modified:	May 2, 1989	CT	wrote vcc_dot and vcjc_dot
;		May 3, 1989	CT	wrote vc_conj, vc_neg and vc_sum
;					added _get_complexUArg1
;					also wrote vcsc_mul
;					what a productive day! I should get
;					a raise!!!!!!!
;		May 15, 1989	CT	changed complex_unifier to handle
;					dotted pair with unbound vars
;		June 19, 1989	CT	fixed but in get_complexUArg1
;		March 28, 1990	CT	fixed dereferencing bug in 
;					get_complexUArg1
;		March 7, 1992	SM	added vc_select
;		March 23, 1992	SM	added vcsr_mul
;		When		Who	What
;
;
;
; vcc_dot(+V1,+V2,-A)
; vcjc_dot(+V1,+V2,-A)
; vc_conj(+V1,-V2)
; vc_neg(+V,-V2)
; vc_sum(+V1,-A)
; vcsc_mul(+V1,+C,-V2)
; vcsr_mul(+V1,+R,-V2)
; vc_select(+Offset,+V1,+increment,-V2)
	
	global	_vcc_dot
	global	_vcjc_dot
	global	_vc_conj
	global	_vc_neg
	global	_vc_sum
	global	_vcsc_mul
	global	_vcsr_mul
	global	_vc_select
	global	_complex_unifier
	global	_get_complexUArg1


_vcc_dot:

	bsr	_get_2vecs
	; on return, A1 has address of the first vector and A2 has address of
	; second vector, both of which are not BIASED 
	; tmp3 has number of bytes in vector (16 bytes per element with complex
	; vectors).

	; I want the answer to be in T1-T4 so I can call complex_unifier

	bsr	_do_vccdot			; calculate the ugly beast
	bsr.n	_complex_unifier		; for call to complex unifier
	addu	UArg1,	A3,	ZERO		; put A3 into UArg1

	jmp.n	CP
	addu	E,	OldE,	ZERO	

	; Ernie's code

_do_vccdot:

	addu	A1,	A1,	BIAS		; add in BIAS to pointers
	addu	A2,	A2,	BIAS

	st	A3,	E,	48
	st	r25,	E,	44
	st	r24,	E,	40
	st	r23,	E,	36
	st	r22,	E,	32
	st	r21,	E,	28
	st	r20,	E,	24
	st	r19,	E,	20
	st	r18,	E,	16
	st	r17,	E,	12
	st	r16,	E,	8
	st	r15,	E,	4
	st	r14,	E,	0

; tmp3 contains # of words in vector on the way in
; _n	r2	A3	parameter(integer)	number of words in vector
; _sx	r3	A1	parameter(address)	vector base address
; _sy	r4	A2	parameter(address)	vector base address
;
; Register Usage in _vccdot subroutine:
;
; r3		A1	_sx+0
; r4		A2	_sy+0
; r6,r7		tmp1,2	sx[i].real
; r8,r9		UArg1,2	sy[i].real
; r10,r11	r14,r15	sx[i].imag
; r12,r13	r16,r17	sy[i].imag
; r14,r15	T1,T2	answer.real
; r16,r17	T3,T4	answer.imag
; r18,r19		sx[i].real*sy[i].real
; r20,r21		sx[i].imag*sy[i].imag
; r22,r23		sx[i].real*sy[i].imag
; r24,r25		sx[i].imag*sy[i].real
;
; Program Overview: Complex vector structure in C terms is defined as - 
; "typedef struct COMPLEX { double real,imag } complex;".  According to the
; calling format, vccdot expects two vector addresses with a memory format
; as the following figure represents:
;
;	_sx+0		:	upper 4 bytes of sx[0].real
;	_sx+4		:	lower 4 bytes of sx[0].real
;	_sx+8		:	upper 4 bytes of sx[0].imag
;	_sx+12	:	lower 4 bytes of sx[0].imag
;	. . .
;	_sx+(n*4-4)	:	hi32(sx[n-1].real)
;	_sx+(n*4-3)	:	lo32(sx[n-1].real)
;	_sx+(n*4-2)	:	hi32(sx[n-1].imag)
;	_sx+(n*4-1)	:	lo32(sx[n-1].imag)
;
; The following MC88100 Assembly code is a straight forward, top-down 
; approach to calculating the complex dot product (without conjugation).  The
; number of vector elements is multiplied by 4 to calculate the number of 4
; byte words in a complex vector.  The vector elements are traversed in a
; bottom-up style with respect to array index values, i.e. use complex array
; element n-1, n-2, ... , 3, 2, 1, 0.  The r2 register is used as a word offset
; from the vector base address in a load scale instruction.  Both vector
; elements are loaded into the registers according to the table of register
; usage listed above.  The elements are multiplied with 4 fmul.ddd instructions.
; The multiplied results are placed in registers 18-25 and then added to
; generate the two results:
;
;	temp.real = sx[i].real*sy[i].real - sx[i].imag*sy[i].imag
;	temp.imag = sx[i].real*sy[i].imag + sx[i].imag*sy[i].real
;
; Each element product is then accumulated in the fashion of (C code example):
;	answer.real += temp.real;
;	answer.imag += temp.imag;
; and the accumulated value is returned in registers 2-5 for a C interface.


	mul	A3,	tmp3,	2		; convert to words
	sub	A3,	A3,	1		; sub to create 0 index offset
	or	T1,	r0,	r0		; 0 accumulator registers, i.e.
	or	T2,	r0,	r0		; 0 answer.real and answer.imag
	or	T3,	r0,	r0
	or	T4,	r0,	r0
	
@vccdotloop:

	ld	r15,	A1[A3]			; load lo32(sx[i].imag)
	ld	r17,	A2[A3]			; load lo32(sy[i].imag)
	sub	A3,	A3,	1		; decrement vector index/counter
	ld	r14,	A1[A3]			; load hi32(sx[i].imag)
	ld	r16,	A2[A3]			; load hi32(sy[i].imag)
	sub	A3,	A3,	1		; decrement vector index/counter
	ld	tmp2,	A1[A3]			; load lo32(sx[i].real)
	ld	UArg2,	A2[A3]			; load lo32(sy[i].real)
	sub	A3,	A3,	1		; decrement vector index/counter
	ld	tmp1,	A1[A3]			; load hi32(sx[i].real)
	ld	UArg1,	A2[A3]			; load hi32(sy[i].real)
	sub	A3,	A3,	1		; decrement vector index/counter

	fmul.ddd	r18,	tmp1,	UArg1	; sx[i].real*sy[i].real
	fmul.ddd	r20,	r14,	r16	; sx[i].imag*sy[i].imag
	fmul.ddd	r22,	tmp1,	r16	; sx[i].real*sy[i].imag
	fmul.ddd	r24,	r14,	UArg1	; sx[i].imag*sy[i].real
     
	fsub.ddd	r18,	r18,	r20	; temp.real
	fadd.ddd	r22,	r22,	r24	; temp.imag
	fadd.ddd	T1,	T1,	r18	; answer.real += temp.real
	bcnd.n	ge0,	A3,	@vccdotloop
	fadd.ddd	T3,	T3,	r22	; answer.imag += temp.imag
	
	ld	A3,	E,	48
	ld	r25,	E,	44
	ld	r24,	E,	40
	ld	r23,	E,	44
	ld	r22,	E,	32
	ld	r21,	E,	28
	ld	r20,	E,	24
	ld	r19,	E,	20
	ld	r18,	E,	16
	ld	r17,	E,	12
	ld	r16,	E,	8
	ld	r15,	E,	4
	ld	r14,	E,	0
	
	jmp	r1



	; vcjc_dot is essentially the same as vcc_dot except that a subtraction
	; and addition are swaped.  For comments, see vcc_dot

_vcjc_dot:

	bsr	_get_2vecs
	bsr	_do_vcjcdot			; calculate the ugly beast
	bsr.n	_complex_unifier		; for call to complex unifier
	addu	UArg1,	A3,	ZERO		; put A3 into UArg1

	jmp.n	CP
	addu	E,	OldE,	ZERO	

	; Ernie's code

_do_vcjcdot:

	addu	A1,	A1,	BIAS		; add in BIAS to pointers
	addu	A2,	A2,	BIAS

	st	A3,	E,	48
	st	r25,	E,	44
	st	r24,	E,	40
	st	r23,	E,	36
	st	r22,	E,	32
	st	r21,	E,	28
	st	r20,	E,	24
	st	r19,	E,	20
	st	r18,	E,	16
	st	r17,	E,	12
	st	r16,	E,	8
	st	r15,	E,	4
	st	r14,	E,	0

	; register usage same as vcc_dot

	mul	A3,	tmp3,	2		; convert to words
	sub	A3,	A3,	1		; sub to create 0 index offset
	or	T1,	r0,	r0		; 0 accumulator registers, i.e.
	or	T2,	r0,	r0		; 0 answer.real and answer.imag
	or	T3,	r0,	r0
	or	T4,	r0,	r0
	
@vcjcdotloop:

	ld	r15,	A1[A3]			; load lo32(sx[i].imag)
	ld	r17,	A2[A3]			; load lo32(sy[i].imag)
	sub	A3,	A3,	1		; decrement vector index/counter
	ld	r14,	A1[A3]			; load hi32(sx[i].imag)
	ld	r16,	A2[A3]			; load hi32(sy[i].imag)
	sub	A3,	A3,	1		; decrement vector index/counter
	ld	tmp2,	A1[A3]			; load lo32(sx[i].real)
	ld	UArg2,	A2[A3]			; load lo32(sy[i].real)
	sub	A3,	A3,	1		; decrement vector index/counter
	ld	tmp1,	A1[A3]			; load hi32(sx[i].real)
	ld	UArg1,	A2[A3]			; load hi32(sy[i].real)
	sub	A3,	A3,	1		; decrement vector index/counter

	fmul.ddd	r18,	tmp1,	UArg1	; sx[i].real*sy[i].real
	fmul.ddd	r20,	r14,	r16	; sx[i].imag*sy[i].imag
	fmul.ddd	r22,	tmp1,	r16	; sx[i].real*sy[i].imag
	fmul.ddd	r24,	r14,	UArg1	; sx[i].imag*sy[i].real
     
	; the only difference between vcc_dot and vcjc_dot is in the
	; next two lines.
	fadd.ddd	r18,	r18,	r20	; temp.real
	fsub.ddd	r22,	r22,	r24	; temp.imag
	fadd.ddd	T1,	T1,	r18	; answer.real += temp.real
	bcnd.n	ge0,	A3,	@vcjcdotloop
	fadd.ddd	T3,	T3,	r22	; answer.imag += temp.imag
	
	ld	A3,	E,	48
	ld	r25,	E,	44
	ld	r24,	E,	40
	ld	r23,	E,	44
	ld	r22,	E,	32
	ld	r21,	E,	28
	ld	r20,	E,	24
	ld	r19,	E,	20
	ld	r18,	E,	16
	ld	r17,	E,	12
	ld	r16,	E,	8
	ld	r15,	E,	4
	ld	r14,	E,	0
	
	jmp	r1




	; _vc_conj negates the imaginary components of a complex vector

_vc_conj:
	bsr	_get_vecA1

	addu	UArg2,	A3,	A3		; # of words in new vector
	bsr.n	_bind_vecUArg1			; bind A2 to new vector
	addu	UArg1,	A2,	ZERO		; but first put A2 into UArg1

	; at this point A1 is a biased pointer to the old vector, while
	; UArg1 is a biased pointer to the new vector.
	; UArg2 has # of words in vector

; Register Usage in _vcc_conj routine:
; UArg2		number of words in vector
; A1		old vector base address
; UArg1		new vector base address
; tmp1,2 	sx[i].real
; tmp3,4	sx[i].imag
;
;	_sx+0		:	upper 4 bytes of sx[0].real
;	_sx+4		:	lower 4 bytes of sx[0].real
;	_sx+8		:	upper 4 bytes of sx[0].imag
;	_sx+12	:	lower 4 bytes of sx[0].imag
;	. . .
;	_sx+(n*4-4)	:	hi32(sx[n-1].real)
;	_sx+(n*4-3)	:	lo32(sx[n-1].real)
;	_sx+(n*4-2)	:	hi32(sx[n-1].imag)
;	_sx+(n*4-1)	:	lo32(sx[n-1].imag)
;
;

	sub	UArg2,	UArg2,	1		; sub to create 0 index offset
@vcconjloop:
	ld	tmp4,	A1[UArg2]		; load lo32(sx[i].imag)
	sub	UArg2,	UArg2,	1		; decrement vector index/counter
	ld	tmp3,	A1[UArg2]		; load hi32(sx[i].imag)
	sub	UArg2,	UArg2,	1		; decrement vector index/counter
	ld	tmp2,	A1[UArg2]		; load lo32(sx[i].real)
	sub	UArg2,	UArg2,	1		; decrement vector index/counter
	ld	tmp1,	A1[UArg2]		; load hi32(sx[i].real)
	add	UArg2,	UArg2,	3		; set vector index for store 

	xor.u	tmp3,	tmp3,	0x8000		; change sign bit in imaginary

	st	tmp4,	UArg1[UArg2]		; lo32(sz[i].imag)
	sub	UArg2,	UArg2,	1		; walk down with index/counter
	st	tmp3,	UArg1[UArg2]		; hi32(sz[i].imag)
	sub	UArg2,	UArg2,	1
	st	tmp2,	UArg1[UArg2]		; lo32(sz[i].real)
	sub	UArg2,	UArg2,	1
	st	tmp1,	UArg1[UArg2]		; hi32(sz[i].real)
	bcnd.n	gt0,	UArg2,	@vcconjloop
	sub	UArg2,	UArg2,	1

	jmp.n	CP
	addu	E,	OldE,	ZERO	


	; _vc_neg negates a complex vector: negate both components

_vc_neg:
	bsr	_get_vecA1

	addu	UArg2,	A3,	A3		; # of words in new vector
	bsr.n	_bind_vecUArg1			; bind A2 to new vector
	addu	UArg1,	A2,	ZERO		; but first put A2 into UArg1

	sub	UArg2,	UArg2,	1		; sub to create 0 index offset
@vcnegloop:
	ld	tmp4,	A1[UArg2]		; load lo32(sx[i].imag)
	sub	UArg2,	UArg2,	1		; decrement vector index/counter
	ld	tmp3,	A1[UArg2]		; load hi32(sx[i].imag)
	sub	UArg2,	UArg2,	1		; decrement vector index/counter
	ld	tmp2,	A1[UArg2]		; load lo32(sx[i].real)
	sub	UArg2,	UArg2,	1		; decrement vector index/counter
	ld	tmp1,	A1[UArg2]		; load hi32(sx[i].real)
	add	UArg2,	UArg2,	3		; set vector index for store 

	xor.u	tmp3,	tmp3,	0x8000		; change sign bit in imaginary
	xor.u	tmp1,	tmp1,	0x8000		; change sign bit in real

	st	tmp4,	UArg1[UArg2]		; lo32(sz[i].imag)
	sub	UArg2,	UArg2,	1		; walk down with index/counter
	st	tmp3,	UArg1[UArg2]		; hi32(sz[i].imag)
	sub	UArg2,	UArg2,	1
	st	tmp2,	UArg1[UArg2]		; lo32(sz[i].real)
	sub	UArg2,	UArg2,	1
	st	tmp1,	UArg1[UArg2]		; hi32(sz[i].real)
	bcnd.n	gt0,	UArg2,	@vcnegloop
	sub	UArg2,	UArg2,	1

	jmp.n	CP
	addu	E,	OldE,	ZERO	




	; _vc_sum sums the elements in a complex vector binding the
	; second argument to the complex result.

_vc_sum:
	bsr	_get_vecA1
	addu	S,	A3,	A3		; # of words in new vector

	; I want the answer to be in T1-T4 so I can call complex_unifier

	bsr	_do_vcsum			; calculate the ugly beast
	bsr.n	_complex_unifier		; for call to complex unifier
	addu	UArg1,	A2,	ZERO		; put A2 into UArg1

	jmp.n	CP
	addu	E,	OldE,	ZERO	


; A1 is pointer to vector, S has # of words
; A2 still has second argument to Prolog clause

_do_vcsum:
	sub	S,	S,	1		; sub to create 0 index offset

	addu	T1,	ZERO,	ZERO
	addu	T2,	ZERO,	ZERO
	addu	T3,	ZERO,	ZERO
	addu	T4,	ZERO,	ZERO

@vcsumloop:
	ld	UArg2,	A1[S]			; load lo32(sx[i].imag)
	sub	S,	S,	1		; decrement vector index/counter
	ld	UArg1,	A1[S]			; load hi32(sx[i].imag)
	sub	S,	S,	1		; decrement vector index/counter
	ld	tmp2,	A1[S]			; load lo32(sx[i].real)
	sub	S,	S,	1		; decrement vector index/counter
	ld	tmp1,	A1[S]			; load hi32(sx[i].real)

	fadd.ddd T3,	T3,	UArg1		; add imaginary components
	fadd.ddd T1,	T1,	tmp1		; add real components

	bcnd.n	gt0,	S,	@vcsumloop
	sub	S,	S,	1

	jmp	r1




	; _vcsc_mul multiplies the elements in the vector found in A1 with
	; the complex scalar found in A2 producing a new vector in A3

_vcsc_mul:
	addu	S,	A3,	ZERO		; save A3 from next routine
	bsr	_get_vecA1			; get vector from A1
	bsr.n	_get_complexUArg1		; get complex from A2
	addu	UArg1,	A2,	ZERO		; but first put A2 in UArg1

	addu	UArg2,	A3,	A3		; # of words in new vector
	bsr.n	_bind_vecUArg1			; bind A3 to a new vector
	addu	UArg1,	S,	ZERO		; original A3

	; at this point we have T1-T4 with complex scalar, A1 with BIASED
	; pointer to old vec, UArg1 with BIASED pointer to new vec, and
	; UArg2 with # of words in vec

	bsr	_do_vcscmul

	jmp.n	CP
	addu	E,	OldE,	ZERO	


_do_vcscmul:

	; this feels like hacking, but...
	; I need to move registers around because double precision
	; arithmetic needs consecutive registers

	addu	A2,	UArg1,	ZERO		; pointer to new vec
	subu	A3,	UArg2,	1		; decrement counter


	st	r25,	E,	44
	st	r24,	E,	40
	st	r23,	E,	36
	st	r22,	E,	32
	st	r21,	E,	28
	st	r20,	E,	24
	st	r19,	E,	20
	st	r18,	E,	16
	st	r17,	E,	12
	st	r16,	E,	8
	st	r15,	E,	4
	st	r14,	E,	0

; Register Usage in _vcscmul subroutine:
;
; A3		S	number of words in vector
; A1		A1	old vector base address
; A2		A3	new vector base address
; T1,T2			scalar.real	
; T3,T4			scalar.imag	
; tmp1,2	tmp1,2	sx[i].real
; UArg1,2	T3,T4	sx[i].imag
; r14,r15		sx[i].real*sy[i].real + sx[i].imag*sy[i].imag
; r16,r17		sx[i].real*sy[i].imag - sx[i].imag*sy[i].real
; r18,r19		sx[i].real*sy[i].real
; r20,r21		sx[i].imag*sy[i].imag
; r22,r23		sx[i].real*sy[i].imag
; r24,r25		sx[i].imag*sy[i].real
;
;	temp.real = x.real*y.real - x.imag*y.imag (ac - bd)
;	temp.imag = x.real*y.imag + x.imag*y.real (ad + bc)i
;


@vcscmulloop:
	ld	UArg2,	A1[A3]			; load lo32(sx[i].imag)
	sub	A3,	A3,	1		; decrement vector index/counter
	ld	UArg1,	A1[A3]			; load hi32(sx[i].imag)
	sub	A3,	A3,	1		; decrement vector index/counter
	ld	tmp2,	A1[A3]			; load lo32(sx[i].real)
	sub	A3,	A3,	1		; decrement vector index/counter
	ld	tmp1,	A1[A3]			; load hi32(sx[i].real)
	add	A3,	A3,	3		; set vector index for store 

	fmul.ddd r18,	tmp1,	T1		; x.real*y.real ac
	fmul.ddd r20,	UArg1,	T3		; x.imag*y.imag bd
	fmul.ddd r22,	tmp1,	T3		; x.real*y.imag ad
	fmul.ddd r24,	UArg1,	T1		; x.imag*y.real bc

	fsub.ddd r14,	r18,	r20		; temp.real (ac - bd)
	fadd.ddd r16,	r22,	r24		; temp.imag (ad + bc)i
	st	r17,	A2[A3]			; lo32(sz[i].imag)
	sub	A3,	A3,	1		; walk down with index/counter
	st	r16,	A2[A3]			; hi32(sz[i].imag)
	sub	A3,	A3,	1
	st	r15,	A2[A3]			; lo32(sz[i].real)
	sub	A3,	A3,	1
	st	r14,	A2[A3]			; hi32(sz[i].real)
	bcnd.n	gt0,	A3,	@vcscmulloop
	sub	A3,	A3,	1


	ld	r25,	E,	44
	ld	r24,	E,	40
	ld	r23,	E,	36
	ld	r22,	E,	32
	ld	r21,	E,	28
	ld	r20,	E,	24
	ld	r19,	E,	20
 	ld	r18,	E,	16
	ld	r17,	E,	12
	ld	r16,	E,	8
	ld	r15,	E,	4
	ld	r14,	E,	0
	
	jmp	r1


	; welcome to 1992.

	; vcsr_mul(+ComplexVector,+Scalar,-VectorDilation) is an analogue to vcsc_mul/3.
	; _vcsr_mul multiplies the elements in the vector found in A1 with
	; the real scalar found in A2 producing a new vector in A3

_vcsr_mul:
	addu	S,	A3,	ZERO		; save A3 from next routine
	bsr	_get_vecA1			; get vector from A1
	deref	A2,	2f
	fail
2:	bb0	BNUM,	A2,	@cmplx_fail	; must be a num
	bb1	28,	A2,	3f		; this bit set for floats
	; we have an integer
	ext	tmp1,	A2,	26<0>		; get the integer (sign extend)
	br.n	4f
	flt.ds	T1,	tmp1			; and put the double in T1-T2
3:	; we have a float
	extu	tmp1,	A2,	26<0>		; get address of float term on heap
	ld	T1,	tmp1,	BIAS+4		; jump fence to get first half of double
	ld	T2,	tmp1,	BIAS+8		; and the second half

4:	; real scalar in T1-T2

	addu	UArg2,	A3,	A3		; # of words in new vector
	bsr.n	_bind_vecUArg1			; bind A3 to a new vector
	addu	UArg1,	S,	ZERO		; original A3

	; at this point we have T1-T2 with real scalar, A1 with BIASED
	; pointer to old vec, UArg1 with BIASED pointer to new vec, and
	; UArg2 with # of words in vec

	bsr	_do_vcsrmul

	jmp.n	CP
	addu	E,	OldE,	ZERO	


_do_vcsrmul:


; Register Usage in _vcscmul subroutine:
;
; UArg2			number of words in vector
; A1			old vector base address
; UArg1			new vector base address
; T1,T2			scalar (real)	
; tmp1,2		sx[i].real
; T3,T4			sx[i].imag
	
	subu	UArg2,	UArg2,	1		; decrement counter

@vcsrmulloop:
	ld	T4,	A1[UArg2]			; load lo32(sx[i].imag)
	sub	UArg2,	UArg2,	1		; decrement vector index/counter
	ld	T3,	A1[UArg2]			; load hi32(sx[i].imag)
	sub	UArg2,	UArg2,	1		; decrement vector index/counter
	fmul.ddd T3,	T3,	T1		; multiply imaginary comp. by T1-T2
	ld	tmp2,	A1[UArg2]			; load lo32(sx[i].real)
	sub	UArg2,	UArg2,	1		; decrement vector index/counter
	ld	tmp1,	A1[UArg2]			; load hi32(sx[i].real)
	add	UArg2,	UArg2,	3		; set vector index for store 
	fmul.ddd tmp1,	tmp1,	T1		; multiply real comp. by T1-T2

	st	T4,	UArg1[UArg2]			; lo32(sz[i].imag)
	sub	UArg2,	UArg2,	1		; walk down with index/counter
	st	T3,	UArg1[UArg2]			; hi32(sz[i].imag)
	sub	UArg2,	UArg2,	1
	st	tmp2,	UArg1[UArg2]			; lo32(sz[i].real)
	sub	UArg2,	UArg2,	1
	st	tmp1,	UArg1[UArg2]			; hi32(sz[i].real)
	bcnd.n	gt0,	UArg2,	@vcsrmulloop
	sub	UArg2,	UArg2,	1

	jmp	RET



	; vc_select(+Offset,+V,+Incr,-VOut) the "subvector" VOut is
	; returned, starting at V+Incr, and skipping Incr complex numbers (@4 words)
	; until the end of the vector.
	; The only reason this couldn't be _vselect (instead of _vc_select and
	; _vr_select) is that one _or_ two floats must be transferred at each chosen
	; vector element.  Have duplicate code (macroize if possible) for efficiency,
	; avoiding painful real/complex test.

_vc_select:
	bsr	_vget_intargs_1n3			; A1 and A3 are integer terms
		; dereference them, failing if not ints greater than 0 else
		; leave untagged ints in A1 and A3

	bsr	_get_vecA2			; inspired by the old _get_vecA1
		; A2 must be a vector term (double), leaves pointer to first vector
		; el in A2, and leaves raw vector length (# of doubles in vector) in tmp3

	; Register Usage:
	;	A1: Offset (in # complex elements) >= 0
	;	A2: points to first el in input vector
	; 	A3: Increment (in # complex elements) > 0
	; 	tmp3: length of input vector (in # doubles)

	; now calculate the size of the new vector to be made
	
		mak	T3,	A1,	0<1>		; mul by 2 (unsigned)
		mak	A3,	A3,	0<1>		; complex to double increment (*2)
		cmp	tmp4,	T3,	tmp3		; offset vs. input vector len
		bb1.n	ge,	tmp4,	@cmplx_fail	; offset too big
		sub	tmp2,	tmp3,	T3		; get double len til end of vector
		sub	tmp2,	tmp2,	2		; adjust for first element (already known)
		div	tmp4,	tmp2,	A3		; divide by increment to get length
							; of new vector.  A3 <> 0
							; tmp4 := # additional doubles past first
							; in new vector
		mak	tmp4,	tmp4,	0<2>		; els * 4 = words
		addu	UArg2,	tmp4,	4		; and adjust for first el
		; bindvecUArg1 expects #words in UArg2

		bsr.n	_bind_vecUArg1			; create new Vector of length UArg2
		ld	UArg1,	E,	BIAS+20		; get A4 off the arg/env stack


		; now populate the new vector, UArg1 points to first vector el (biased)
		; A2 still points to the first el of the input vector (biased)
		; A3 is the Increment (in #complexes)
		; A1 is the Offset (in #complexes)
		; UArg1 points to new vector's first el
		; UArg2 is the length of new vector in words

		mak	T3,	A1,	0<4>		; mul by 16 (unsigned) to get byte offset
		addu	tmp4,	A2,	T3		; tmp4 := base & to start transfer
			; Add (byte) offset to start of input vector

		; for transfers, can't use doubleword instructions, cuz the heap isn't
		; doubleword aligned

		; load the stride into A2 (first el & no longer needed) before the loop
		mak	A2,	A3,	0<3>		; wordstride := 8 * doubleincr

@select_loop:	ld	tmp2,	tmp4,	ZERO		; first word to copy
		ld	tmp1,	tmp4,	4		; get second word to copy
		ld 	T3,	tmp4,	8		; get third word to copy
		subu	UArg2,	UArg2,	4		; 4 fewer words left to copy
		ld 	T4,	tmp4,	12		; get fourth word to copy
		st	tmp2,	UArg1,	ZERO		; write first word
		st	tmp1,	UArg1,	4		; write second word
		addu	tmp4,	tmp4,	A2		; bump source & by stride
		st	T3,	UArg1,	8		; write third word
		st 	T4,	UArg1,	12		; write fourth word
	
		bcnd.n	gt0,	UArg2,	@select_loop	; as long as more doubles to copy
		addu	UArg1,	UArg1,	16		; bump destination &

		jmp.n	CP				; all done
		addu	E,	OldE,	ZERO		; reset env
		
	
	



	; complex_unifier dereferences the term found in UArg1 and
	; binds it to a dotted-pair representing a complex scalar.
	; The complex number should be in T1 thru T4, with the first
	; two holding the real part and the second two the imaginary.

	; NOTE: has been modified to handle an argument of [R|I] instead
	; of just an unbound variable. 

_complex_unifier:

@cu_derefUArg1:
	bb1	BGND,	UArg1,	@notvar		; dereference UArg1
	ld	tmp1,	UArg1,	BIAS
	cmp	S,	UArg1,	HB		; early trail check
	cmp	UArg1,	tmp1,	UArg1
	bb0.n	eq,	UArg1,	@cu_derefUArg1
	addu	UArg1,	tmp1,	ZERO

	or.u	tmp1,	H,	TLIST		; set tmp1 to pointer to list
	bb1.n	hs,	S,	@cu_cont	; branch if UArg1 > hb
	st	tmp1,	UArg1,	BIAS		;  but first bind UArg1
	cmp	S,	UArg1,	SPB		; spb check
	bb1	lo,	S,	@cu_cont	; branch if UArg1 < spb
	subu	TR,	TR,	4		; get trail entry
	st	UArg1,	TR,	ZERO		; and trail it

@cu_cont:
	addu	tmp1,	ZERO,	3		; build fence for floats
	or.u	tmp1,	tmp1,	TFNC		
	st	tmp1,	H,	BIAS+8		; first fence of car
	st	T1,	H, 	BIAS+12		; real 
	st	T2,	H,	BIAS+16		; number
	st	tmp1,	H,	BIAS+20		; second fence of cdr
	st	tmp1,	H,	BIAS+24		; first fence of car
	st	T3,	H,	BIAS+28		; imaginary
	st	T4,	H,	BIAS+32		; number
	st	tmp1,	H,	BIAS+36		; final fence
	addu	tmp2,	H,	8		; pointer for car
	or.u	tmp2,	tmp2,	TFLT
	st	tmp2,	H,	BIAS		; store car
	addu	tmp2,	tmp2,	16		; pointer for cdr
	st	tmp2,	H,	BIAS+4		; store cdr
	; h+0 is car
	; h+4 is cdr
	; h+8 is first fence of car
	; h+12 is hi32 of first (T1)
	; h+16 is lo32 of first (T2)
	; h+20 is second fence of car
	; h+24 is first fence of cdr
	; h+28 is hi32 of second (T3)
	; h+32 is lo32 of second (T4)
	; h+36 is second fence of cdr

	addu	H,	H,	40		; bump heap past new stuff	

	jmp	r1

	; At this point we don't have an unbound variable so we now must
	; look for a dotted pair with two unbounds.  If that's what we find
	; we will bind each var to floats whose values are in T1-T4.
@notvar:
	bb0	BLIST,	UArg1,	@cmplx_fail	; not list, fail
	clr	UArg1,	UArg1,	6<26>		; get address of list
	ld	tmp1,	UArg1,	BIAS		; load car
	ld	tmp2,	UArg1,	BIAS+4		; load cdr

@cu_deref1:
	bb1	BGND,	tmp1,	@cmplx_fail	; dereference the car
	ld	UArg1,	tmp1,	BIAS
	cmp	S,	tmp1,	HB		; trail check
	cmp	tmp1,	tmp1,	UArg1		
	bb0.n	eq,	tmp1,	@cu_deref1
	addu	tmp1,	UArg1,	ZERO		

	or.u	UArg1,	H,	TFLT		; set UArg1 to pointer to float
	bb1.n	hs,	S,	@cu_deref2	; 
	st	UArg1,	tmp1,	BIAS		; bind the var
	cmp	S,	tmp1,	SPB		; spb check
	bb1	lo,	S,	@cu_deref2
	subu	TR,	TR,	4		; get trail entry
	st	tmp1,	TR,	ZERO		; and trail it

@cu_deref2:
	bb1	BGND,	tmp2,	@cmplx_fail	; dereference the car
	ld	UArg2,	tmp2,	BIAS
	cmp	S,	tmp2,	HB		; trail check
	cmp	tmp2,	tmp2,	UArg2		
	bb0.n	eq,	tmp2,	@cu_deref1
	addu	tmp2,	UArg2,	ZERO		

	addu	UArg1,	UArg1,	16		; 4 words away from other one
	bb1.n	hs,	S,	@cu_cont2	; 
	st	UArg1,	tmp2,	BIAS		; bind the var
	cmp	S,	tmp2,	SPB		; spb check
	bb1	lo,	S,	@cu_cont2
	subu	TR,	TR,	4		; get trail entry
	st	tmp2,	TR,	ZERO		; and trail it

@cu_cont2:
	addu	tmp1,	ZERO,	3		; build fence for floats
	or.u	tmp1,	tmp1,	TFNC
	st	tmp1,	H,	BIAS+0		; first fence real
	st	T1,	H,	BIAS+4		; real
	st	T2,	H,	BIAS+8		; number
	st	tmp1,	H,	BIAS+12		; second fence real
	st	tmp1,	H,	BIAS+16		; first fence imaginary
	st	T3,	H,	BIAS+20		; imaginary
	st	T4,	H,	BIAS+24		; number
	st	tmp1,	H,	BIAS+28		; second fence imaginary
	addu	H,	H,	32		; bump heap past new stuff

	jmp	r1

	

	; _get_complexUArg1 dereferences UArg1, failing if it is not bound
	; to a dotted_pair (complex number) of which the car and cdr are
	; bound to either integers or floats.  If an integer is found it
	; will be converted to a float.  The real part will be left in
	; T1 and T2 while the imaginary part will be in T3 and T4

_get_complexUArg1:

@gc_derefUArg1:
	bb1	BGND,	UArg1,	@gc_cont	; normal dereference
	ld	tmp1,	UArg1,	BIAS
	cmp	UArg1,	tmp1,	UArg1
	bb0.n	eq,	UArg1,	@gc_derefUArg1
	addu	UArg1,	tmp1,	ZERO
	jmp	Fail

@gc_cont:
	bb0	BLIST,	UArg1,	@cmplx_fail	; not a list, fail
	clr	UArg1,	UArg1,	6<26>		; get address
	ld	tmp1,	UArg1,	BIAS		; load car

@gc_derefcar:
	bb1	BGND,	tmp1,	@gc_cont2	; normal dereference
	ld	tmp2,	tmp1,	BIAS
	cmp	tmp1,	tmp2,	tmp1
	bb0.n	eq,	tmp1,	@gc_derefcar
	addu	tmp1,	tmp2,	ZERO
	jmp	Fail				; unbound, fail
@gc_cont2:
	bb0	BNUM,	tmp1,	@cmplx_fail	; not a number, fail	
	bb1	BUIA,	tmp1,	@gc_flt1	; if float, branch
	ext	tmp1,	tmp1,	26<0>		; get integer
	br.n	@gc_cdr				; do cdr
	flt.ds	T1,	tmp1			; convert to float
@gc_flt1:
	clr	tmp1,	tmp1,	6<26>		; get address
	ld	T2,	tmp1,	BIAS+8		; low half of float
	ld	T1,	tmp1,	BIAS+4		; high half of float

@gc_cdr:
	ld	tmp1,	UArg1,	BIAS+4 		; load cdr
@gc_derefcdr:
	bb1	BGND,	tmp1,	@gc_cont3	; normal dereference
	ld	tmp2,	tmp1,	BIAS
	cmp	tmp1,	tmp2,	tmp1
	bb0.n	eq,	tmp1,	@gc_derefcdr
	addu	tmp1,	tmp2,	ZERO
	jmp	Fail				; unbound, fail
@gc_cont3:
	bb0	BNUM,	tmp1,	@cmplx_fail	; not a number, fail
	bb1	BUIA,	tmp1,	@gc_flt2	; if float, branch	
	ext	tmp1,	tmp1,	26<0>		; get integer 
	jmp.n	r1
	flt.ds	T3,	tmp1			; convert
@gc_flt2:
	clr	tmp1,	tmp1,	6<26>		; get address
	ld	T4,	tmp1,	BIAS+8		; low half
	ld	T3,	tmp1,	BIAS+4		; high half

	jmp	r1



@cmplx_fail:
	jmp	Fail

