;
; sio.88k		-- blindingly fast stream I/O primitives
; 	Copyright (c) 1991-92 Applied Logic Systems, Inc.
;	Copyright (c) 1992    Motorola Inc.
;
; Author: Kevin A. Buettner (88k port by Scott Medeiros)
; Creation: 10/23/91 (88k port 9/1/92)
; Revision History:
;	


#include "assembly.88k"
#include "mtypes.h"
#include "tokens.h"
#include "bsio.h"


	text
	global	_wm_sio_gbyte
	; sio_get_byte(+StreamDescriptor,?B)
_wm_sio_gbyte:
	deref	A1,	1f			; deref first arg
gbfail: fail					; fail if variable
1:	bb0	BSTRC,	A1,	gbfail		; stream descriptor (SD) must be a struct
	clr	A1,	A1,	6<26>		; nuke the tag
	ld	tmp1,	A1,	BIAS		; fetch functor
	; need to do a 32-bit compare (20 bits of symbol, 8 bits of arity)
	;(MMK_FUNCTOR(SIO_SD_FUNCTOR,SIO_SD_ARITY)) should appear instead of
	; 	0xc00f0062
	;or.u	tmp2,	ZERO,	hi16(0xc00f0062)
	;or	tmp2,	tmp2,	lo16(0xc00f0062)
	or.u	tmp2,	ZERO,	hi16(MMK_FUNCTOR(SIO_SD_FUNCTOR,SIO_SD_ARITY))
	or	tmp2,	tmp2,	lo16(MMK_FUNCTOR(SIO_SD_FUNCTOR,SIO_SD_ARITY))

	cmp	tmp3,	tmp1,	tmp2		; SD must be just right functor/arity
	bb1	ne,	tmp3,	gbfail		; else fail
	ld	tmp4,	A1,	BIAS+4		; fetch first SD argument (UIA buffer)
	deref	tmp4,	gb1arg			; dereference first SD argument 
	fail					; oops- fail
gb1arg: bb0	BUIA, 	tmp4,	gbfail		; fail if not UIA
	clr	tmp4,	tmp4,	6<26>		; nuke the tag, leaving UIA heap &
	add	tmp2,	tmp4,	4		; tmp2 points at start of UIA buffer area
						; (+4 is for UIA fence jumping)
	ld	tmp3,	tmp2,	BIAS+sio_FLAGS	; get the flags
	and	tmp3,	tmp3,	SIOF_READ	; see if read mode is set
	bcnd	ne0,	tmp3,	1f		; branch if so
	; otherwise we've tried an illegal read
	addu	T3,	ZERO,	SIOE_ILLREAD 	; 88k quirk - can only write a reg
		; this method of loading up a constant only works cuz we know they
		; fit in 16 bits
		; generally, need two or instructions to load up 32-bit constant
	st	T3,	tmp2,	BIAS+sio_ERRCODE ; OK, write it out
	fail					; and fail - illegal read
1:	deref	A2,	2f			; dereference second argument
	br	1f				; continue if variable
2:	bb0	BNUM,	A2,	gbinarg		; arg invalid if not integer
	bb1	BUIA,	A2,	gbinarg		; fail for doubles
	ext	tmp1,	A2,	26<0>		; get integer (sign-extended 26 -> 32)
	bcnd	lt0,	tmp1,	gbinarg		; arg invalid if less than zero
	cmp	tmp3,	tmp1,	255		; arg:255
	bb1	gt,	tmp3,	gbinarg		; arg invalid if greater than 255

1:	; second arg is valid (variable or integer)
	; tmp2 still points at start of UIA buffer
	ld	T3,	tmp2,	BIAS+sio_CPOS	; get the current character position
	ld	tmp3,	tmp2,	BIAS+sio_LPOS	; get # of chars in current buffer
		; T3 holds current character position
	cmp	tmp4,	T3,	tmp3		; see if we've gone too far
	bb1	lt,	tmp4,	1f		; branch if we haven't
	addu	tmp1,	ZERO,	SIOE_READ	; zero-extended 16 bit constant
	st	tmp1,	tmp2,	BIAS+sio_ERRCODE ; write out read error
	fail					; and fail - we need a new buffer
1:	addu	tmp1,	ZERO,	SIOE_NORMAL	; zero-extended 16 bit constant
	st	tmp1,	tmp2,	BIAS+sio_ERRCODE ; no error
	addu	T3,	T3,	1		; advance character position
	st	T3,	tmp2,	BIAS+sio_CPOS	; write back to memory
	; now read from the SIO_BUFFER associated with the UIA area
	; move.b sio_BUFFER-1(a0,d1), d0
	; 88k cannot do this in one instruction!
	addu	tmp1,	tmp2,	T3		; generate intermediate address
	ld.bu	T4,	tmp1,	BIAS+sio_BUFFER-1 ; put byte (zero-extended) into T4
			; sio_BUFFER-1 cuz char pos (T3) has already been incremented
	cmp	tmp3,	T4,	10		; see if we have a newline
	bb1	ne,	tmp3,	1f		; branch if we don't
	ld	tmp1,	tmp2,	BIAS+sio_LINENUM ; get current line number
	addu	tmp1,	tmp1,	1		; advance line number if we had newline
	st	tmp1,	tmp2,	BIAS+sio_LINENUM ; and store new line number
1:	or	UArg1,	ZERO,	A2		; set up UArg1 for call to wm_unify
	or.u	UArg2,	T4,	TINT		; slap on integer tag, and set up
						; UArg2 for call to wm_unify
	or	RET,	CP,	ZERO		; return to CP
	br.n	_wm_unify			; call the unifier
	addu	E,	OldE,	ZERO		; reset env and return through unifier

gbinarg:
	addu	tmp1,	ZERO,	SIOE_INARG	; zero-extended 16 bit constant
	st	tmp1,	tmp2,	BIAS+sio_ERRCODE ; store input arg invalid error code
	fail					; and fail
		
	text
	global	_wm_sio_pbyte
	; sio_get_byte(+StreamDescriptor,+B)
_wm_sio_pbyte:
	deref	A1,	1f			; deref first arg
pbfail: fail					; fail if variable
1:	bb0	BSTRC,	A1,	pbfail		; SD must be a struct
	clr	A1,	A1,	6<26>		; nuke the tag
	ld	tmp1,	A1,	BIAS		; fetch functor
	; need to do a 32-bit compare (20 bits of symbol, 8 bits of arity)
	;(MMK_FUNCTOR(SIO_SD_FUNCTOR,SIO_SD_ARITY)) should appear instead of
	;	0xc00f0062
	;or.u	tmp2,	ZERO,	hi16(0xc00f0062)
	;or	tmp2,	tmp2,	lo16(0xc00f0062)
	or.u	tmp2,	ZERO,	hi16(MMK_FUNCTOR(SIO_SD_FUNCTOR,SIO_SD_ARITY))
	or	tmp2,	tmp2,	lo16(MMK_FUNCTOR(SIO_SD_FUNCTOR,SIO_SD_ARITY))
	cmp	tmp3,	tmp1,	tmp2		; SD must be just right functor/arity
	bb1	ne,	tmp3,	pbfail		; else fail
	ld	tmp4,	A1,	BIAS+4		; fetch first SD argument (UIA buffer)
	deref	tmp4,	pb1arg			; dereference first SD argument 
	fail					; oops- fail
pb1arg: bb0	BUIA, 	tmp4,	pbfail		; fail if not UIA
	clr	tmp4,	tmp4,	6<26>		; nuke the tag, leaving UIA heap &
	add	tmp2,	tmp4,	4		; tmp2 points at start of UIA buffer area
						; (+4 is for UIA fence jumping)
	ld	tmp3,	tmp2,	BIAS+sio_FLAGS	; get the flags	into tmp3
	ld	T3,	tmp2,	BIAS+sio_LPOS	; put last position in T3
	and	tmp4,	tmp3,	SIOF_WRITE	; see if in write mode
	bcnd	ne0,	tmp4,	1f		; branch if we are
	; otherwise we've tried an illegal write
	addu	T4,	ZERO,	SIOE_ILLWRITE	; 88k quirk - can only write a reg
		; this method of loading up a constant only works cuz we know they
		; fit in 16 bits
		; generally, need two or instructions to load up 32-bit constant
	st	T4,	tmp2,	BIAS+sio_ERRCODE ; OK, write it out
	fail					; and fail - illegal write
	and	tmp4,	tmp3,	(SIOF_READ|SIOF_EOF) ; examine read and EOF flags
	cmp	T4,	tmp4,	SIOF_READ	; see if only the read flag is set
	bb1	ne,	T4,	1f		; branch if not
	bcnd	ne0,	T3,	1f		; branch if last pos != 0
	;
	; If we've fallen through to this point, we are
	;	in read_write mode,
	;	the buffer is empty,
	;	and end-of-file has not been encountered
	; So we need to fill the buffer up if possible	
	;
	addu	T4,	ZERO,	SIOE_READ	; rewrite buffer -- 16 bit constant
	st	T4,	tmp2,	BIAS+sio_ERRCODE ; write it out
	fail					; and fail
1:
	deref	A2,	pb2ndarg		; dereference second argument
	; invalid argument if variable
pbinarg:
	addu	T4,	ZERO,	SIOE_INARG	; invalid arg -- 16 bit constant
	st	T4,	tmp2,	BIAS+sio_ERRCODE ; write it out
	fail					; and fail
pb2ndarg:
	bb0	BNUM,	A2,	pbinarg		; arg invalid if not integer
	bb1	BUIA,	A2,	pbinarg		; fail for doubles
	; second arg is valid (integer)
	; tmp2 still points at start of stream_buffer
	; T3 still holds LPOS (buffer character count)
	; tmp3 still holds the flags
	ld	UArg2,	tmp2,	BIAS+sio_CPOS	; put the current char pos into UArg2
	; now write to the SIO_BUFFER associated with the UIA area
	; move.b d4, sio_BUFFER(a0,d1) 
	; 88k can't do this in one instruction
	; 88k tag in hi bits, so don't need an instruction to mess with tag
	; but we need to do it later anyway
	addu	tmp1,	tmp2,	UArg2		; generate intermediate address
	st.b	A2,	tmp1,	BIAS+sio_BUFFER	; write the char to memory
	add	UArg2,	UArg2,	1		; advance the current char position
	cmp	tmp1,	UArg2,	T3		; see if past LPOS
	bb1	le,	tmp1,	1f		; branch if not
	st	UArg2,	tmp2,	BIAS+sio_LPOS	; store to memory
	or	T3,	ZERO,	UArg2		; update shadow in register also
1:	st	UArg2,	tmp2,	BIAS+sio_CPOS	; store the character position
	or	tmp3,	tmp3,	SIOF_DIRTY	; or dirty flag into rest of flags
						; buffer contents have been modified
	st	tmp3,	tmp2,	BIAS+sio_FLAGS	; set the flags

	; We now need to check the flags and the LPOS value to see if the
	; buffer needs to be written.  If it does, we will fail with
	; ERRCODE set to SIOE_WRITE.	

	and	tmp1,	tmp3,	SIOF_BBYTE	; see if byte buffering is in effect
	bcnd 	ne0,	tmp1,	pbwrbuf		; branch if so - write out buffer
	and	tmp1,	tmp3,	SIOF_BLINE	; see if line buffering is in effect
	bcnd	eq0,	tmp1,	1f		; branch if not
	clr	tmp4,	A2,	6<26>		; nuke the tag (hi bits)
	cmp	tmp1,	tmp4,	10		; see if last char in buffer was newline
	bb1	eq,	tmp1,	pbwrbuf		; branch if so - write out buffer
1:	ld	UArg1,	tmp2,	BIAS+sio_BFSIZE	; get buffer size
	cmp	tmp1,	UArg1,	T3		; see if buffer full
	bb1	eq,	tmp1,	pbwrbuf		; if so, write out buffer

	addu	UArg1,	ZERO,	SIOE_NORMAL	; successful completion, 16 bit const
	st	UArg1,	tmp2,	BIAS+sio_ERRCODE ; write it out
	jmp.n	CP				; return sequence
	addu	E,	OldE,	ZERO		; reset env

pbwrbuf:
	; we will come here if the buffer needs to be written out
	addu	UArg1,	ZERO,	SIOE_WRITE	; buffer needs to be written out
	st	UArg1,	tmp2,	BIAS+sio_ERRCODE ; write this out to SD memory
	fail					; and fail




