#include "assembly.88k"
#include "tokens.h"
;
; Creation:	Scott Medeiros
;		March 13, 1992
;
;	Copyright (c) 1992 Motorola, Inc.
;
; list_prims.88k contains some vector-like list builtins
;
; Modified:	
;		March 14, 1992	SM	added lrr_mul	
;		March 16, 1992	SM	added lcc_dot
;		March 17, 1992	SM	added lcc_mul
;		March 18, 1992	SM	added lcc_add, lcc_sub, lsplit/3
;		March 19, 1992	SM	added lsplit/4 (_lsplit2) and implemented lsplit/3 
;					more efficiently
;		When		Who	What
;


	global	_lrr_dot

	; lrr_dot(+L1,+L2,-DP) computes dot product DP of real-valued lists.
	; The lists must contain only real (or integer) components, else lrr_dot fails.
	; If the lists have different lengths, lrr_dot fails as well.

_lrr_dot:

; prologue

	deref	A1,	2f			; dereference L1
	fail
2:	deref	A2,	3f			; dereference L2	
	fail
3:	bb0	BLIST,	A1,	@lfail		; fail if not a list
	bb0	BLIST,	A2,	@lfail		; fail if not a list

	addu	UArg1,	ZERO,	ZERO		; initialize dp accumulator
	addu	UArg2,	ZERO,	ZERO

@lrr_loop:
	clr	A1,	A1,	6<26>		; get address of list L1
	ld	T1,	A1,	BIAS		; load car
	ld	A1,	A1,	BIAS+4		; load cdr

	clr	A2,	A2,	6<26>		; get address of list L2
	ld	T3,	A2,	BIAS		; load car
	ld	A2,	A2,	BIAS+4		; load cdr


	deref	T1,	2f			; dereference car
	fail
2:	deref	T3,	3f			; dereference car
	fail


3:	bb0	BGND,	T1,	@lfail		; fail if not bound
	bb0	BNUM,	T1,	@lfail		; fail if not a number
	; extract numerical value, and store for computation
	bb1	28,	T1,	3f		; this bit set for floats
	; we have an integer
	ext	tmp1,	T1,	26<0>		; get the integer
	br.n	4f
	flt.ds	T1,	tmp1			; put the double in T1-T2	
3:	; we have a float
	extu	tmp1,	T1,	26<0>		; get address of float term on heap
	ld	T1,	tmp1,	BIAS+4		; jump fence to get first half of double
	ld	T2,	tmp1,	BIAS+8		; and the second half

4:	; do the same thing, but for A2 and put float in T3-T4
	bb0	BGND,	T3,	@lfail		; fail if not bound
	bb0	BNUM,	T3,	@lfail		; fail if not a number
	; extract numerical value, and store for computation
	bb1	28,	T3,	5f		; this bit set for floats
	; we have an integer
	ext	tmp1,	T3,	26<0>		; get the integer
	br.n	6f
	flt.ds	T3,	tmp1			; put the double in T3-T4	
5:	; we have a float
	extu	tmp1,	T3,	26<0>		; get address of float term on heap
	ld	T3,	tmp1,	BIAS+4		; jump fence to get first half of double
	ld	T4,	tmp1,	BIAS+8		; and the second half

6:	
	; T1-T2 and T3-T4 contain the floats to be multiplied.
	; accumulate answer in UArg1-2
	fmul.ddd tmp1,	T1,	T3		; do the multiply
	fadd.ddd UArg1,	UArg1,	tmp1		; accumulate the result

	; A1 = cdr(L1), A2= cdr(L2)
	bb1	BLIST,	A1,	7f		; another list ==> another iteration
	addu	tmp1,	ZERO,	lo16(TK_NIL)	; make sure the cdr is nil
	or.u	tmp1,	tmp1,	TSYM
	cmp	A1,	tmp1,	A1		
	bb0	eq,	A1,	@lfail		; yuck, malformed list, so fail

	; L1 has nil cdr, L2 must as well
	cmp	A2,	tmp1,	A2
	bb1	ne,	A2,	@lfail

	; OK, we have a valid dot product in UArg1, UArg2
	; Bind result to A3, and return
	or	tmp1,	UArg1,	ZERO		; load tmp1,tmp2 with Answer
	br.n	_punify_answer			; and call punify_answer
	or	tmp2,	UArg2,	ZERO		; which returns

7:
	bb1	BLIST,	A2,	@lrr_loop	; another list ==> another iteration
@lfail:	fail

	


	global	_lrr_mul

	; lrr_mul(+L1,+L2,-L3) computes the real product of two real-valued lists.
	; The lists must contain only real (or integer) components, else lrr_mul fails.
	; If the lists have different lengths, lrr_mul fails as well.

	; Very similar to lrr_dot, but create a list of products componentwise, instead
	; of accumulating a sum.

_lrr_mul:
; prologue

	deref	A1,	2f			; dereference L1
	fail
2:	deref	A2,	3f			; dereference L2	
	fail
3:	bb0	BLIST,	A1,	@lfail		; fail if not a list
	bb0	BLIST,	A2,	@lfail		; fail if not a list

	; Output list represented by term in UArg2.
	or.u	UArg2,	H,	TLIST		; build list starting at H


@lrrm_loop:
	clr	A1,	A1,	6<26>		; get address of list L1
	ld	T1,	A1,	BIAS		; load car
	ld	A1,	A1,	BIAS+4		; load cdr

	clr	A2,	A2,	6<26>		; get address of list L2
	ld	T3,	A2,	BIAS		; load car
	ld	A2,	A2,	BIAS+4		; load cdr


	deref	T1,	2f			; dereference car
	fail
2:	deref	T3,	3f			; dereference car
	fail


3:	bb0	BGND,	T1,	@lfail		; fail if not bound
	bb0	BNUM,	T1,	@lfail		; fail if not a number
	; extract numerical value, and store for computation
	bb1	28,	T1,	3f		; this bit set for floats
	; we have an integer
	ext	tmp1,	T1,	26<0>		; get the integer
	br.n	4f
	flt.ds	T1,	tmp1			; put the double in T1-T2	
3:	; we have a float
	extu	tmp1,	T1,	26<0>		; get address of float term on heap
	ld	T1,	tmp1,	BIAS+4		; jump fence to get first half of double
	ld	T2,	tmp1,	BIAS+8		; and the second half

4:	; do the same thing, but for A2 and put float in T3-T4
	bb0	BGND,	T3,	@lfail		; fail if not bound
	bb0	BNUM,	T3,	@lfail		; fail if not a number
	; extract numerical value, and store for computation
	bb1	28,	T3,	5f		; this bit set for floats
	; we have an integer
	ext	tmp1,	T3,	26<0>		; get the integer
	br.n	6f
	flt.ds	T3,	tmp1			; put the double in T3-T4	
5:	; we have a float
	extu	tmp1,	T3,	26<0>		; get address of float term on heap
	ld	T3,	tmp1,	BIAS+4		; jump fence to get first half of double
	ld	T4,	tmp1,	BIAS+8		; and the second half

6:	
	; T1-T2 and T3-T4 contain the floats to be multiplied.
	; H points at where the car should be

	fmul.ddd tmp1,	T1,	T3		; do the multiply
	; for now, just store a double no matter what (could check for int)
	or.u	UArg1,	ZERO,	TFNC		; fence tag
	or	UArg1,	UArg1,	3		; to bracket fence
	st	UArg1,	H,	BIAS+8		; place the fence
	st	tmp1,	H,	BIAS+12		; store the double out on the heap
	st	tmp2,	H,	BIAS+16		; the heap isn't doubleword aligned, so no st.d
	st	UArg1,	H,	BIAS+20		; place the matching fence

	addu	tmp2,	H,	8		; instead of this, should set H to point +4 from
						; previous iteration
	or.u	tmp1,	tmp2,	TFLT		; tmp1 := tagged double term (points to
						; term just built on the heap)
	st	tmp1,	H,	BIAS		; now make car term on heap
	addu	H,	H,	24		; H points past last fence of double

	; A1 = cdr(L1), A2= cdr(L2)
	bb1	BLIST,	A1,	7f		; another list ==> another iteration
	addu	tmp1,	ZERO,	lo16(TK_NIL)	; make sure the cdr is nil
	or.u	tmp1,	tmp1,	TSYM
	cmp	A1,	tmp1,	A1		
	bb0	eq,	A1,	@lfail		; yuck, malformed list, so fail

	; L1 has nil cdr, L2 must as well
	cmp	A2,	tmp1,	A2
	bb1	ne,	A2,	@lfail

	; The iteration is done.  Just complete L3's list by adding a [] tail
	st	tmp1,	H,	BIAS-20		; remember H points way past the cdr
				; *** Assumes a float was put out on heap
	; OK, we have a valid answer built up in UArg2, unify with A3 and return
	; Bind result to A3, and return

	or	RET,	CP,	ZERO		; the unifier will return to RET
	addu	E,	OldE,	ZERO		; fix up env too
	br.n	_wm_unify			; and call the unifier
	or	UArg1,	A3,	ZERO		; load LH arg to unifier (L3)

7:
	bb0.n	BLIST,	A2,	@lfail		; not a list ==> bad combination, fail
	; need to set up another iteration : just create L3's cdr and branch back
	or.u	tmp1,	H,	TLIST		; cdr is a list, starting at next heap address
						; note that H points way past where the cdr goes
				; *** Assumes a float was put out on heap
	br.n	@lrrm_loop			; another iteration
	st	tmp1,	H,	BIAS-20		; write the cdr out on the heap



	global	_lcc_add

	; lcc_add(+L1,+L2,-L3) computes the complex sum of two complex-valued lists.
	; The lists must contain only dotted pairs of real (or integer) numbers, else
	; lcc_add fails.  If the lists have different lengths, lcc_add fails as well.
	
_lcc_add:

; save some registers on the stack, on top of current environment

	st	r14,	E,	BIAS-4
	st	r15,	E,	BIAS-8
	st	r16,	E,	BIAS-12

; prologue

	deref	A1,	2f			; dereference L1
	fail
2:	deref	A2,	3f			; dereference L2	
	fail
3:	bb0	BLIST,	A1,	@lfail		; fail if not a list
	bb0	BLIST,	A2,	@lfail		; fail if not a list

	; Output list represented by term in UArg2.
	or.u	UArg2,	H,	TLIST		; build list starting at H


@lcca_loop:
	clr	A1,	A1,	6<26>		; get address of list L1
	ld	T1,	A1,	BIAS		; load car
	ld	A1,	A1,	BIAS+4		; load cdr

	clr	A2,	A2,	6<26>		; get address of list L2
	ld	S,	A2,	BIAS		; load car
	ld	A2,	A2,	BIAS+4		; load cdr


	deref	T1,	2f			; dereference car
	fail
2:	deref	S,	3f			; dereference car
	fail


3:	bsr.n	_get_complexUArg1		; get L1 complex element
	addu	UArg1,	T1,	ZERO		; in T1-T4
	
	st	H,	E,	BIAS-40		; save H at start of each iteration

	addu	r14,	T1,	ZERO
	addu	r15,	T2,	ZERO
	st	T3,	E,	BIAS-36		; don't overwrite TR in case of failure
;	addu	r16,	T3,	ZERO		  in _get_complexUArg1 below
	addu	r17,	T4,	ZERO


4:	
	bsr.n	_get_complexUArg1		; get L2 complex element
	addu	UArg1,	S,	ZERO		; in T1-T4 -- S is now free for use as a temp
	ld	r16,	E,	BIAS-36		; load back what was T3 for L1's complex el

	; now complex add r14-r17 with T1-T4, leaving result in T1-T4
	fadd.ddd T1,	r14,	T1
	fadd.ddd T3,	r16,	T3


	; create a dotted pair on the heap, and store a reference to it in the output list
	; note that for now the dotted pair _always_ contains two floats  -- we could 
	; conceivably want to check for integer storage...
	; car at H, cdr at H+4, start the dotted pair at H+8  (10 words worth)
	; H 	--->	car  (the dotted pair) --> H+8
	; H+4	--->	cdr  (to the next dotted pair  H+48, or [])
	; H+8	--->	car  (of the dotted pair) --> H+16
	; H+12 	--->	cdr  (of the dotted pair) --> H+32
	; H+16	--->		Fence
	; H+20 	--->		Float 1
	; H+24	--->		Float 2
	; H+28	--->		Fence
	; H+32	--->		Fence
	; H+36	--->		Float 3
	; H+40	--->		Float 4
	; H+44	--->		Fence
	; H+48	--->	Next dotted pair, unless H+4 = []    <---  NewH
	; ......

	ld	H,	E,	BIAS-40		; reload H

	addu	tmp2,	H,	8		; where the dotted pair starts on heap
	or.u	tmp1,	tmp2,	TLIST		; it's a list
	st	tmp1,	H,	BIAS		; store the car (the dotted pair yet to be made)
	; now build up the car (double) of the dotted pair
	or.u	UArg1,	ZERO,	TFNC		; fence tag
	or	UArg1,	UArg1,	3		; to bracket fence
	st	UArg1,	H,	BIAS+16		; place fence
	st	T1,	H,	BIAS+20		; store high part of double
	st	T2,	H,	BIAS+24		; store low part of double
	st	UArg1,	H,	BIAS+28		; place matching fence
	addu	tmp2,	H,	16		; where the first double starts on heap
	or.u	tmp1,	tmp2,	TFLT		; tmp1 := tagged double term (points to double
						; just built up on heap)
	st	tmp1,	H,	BIAS+8		; store the car of the dotted pair
	; now build up the cdr (double) of the dotted pair
	st	UArg1,	H,	BIAS+32		; place fence
	st	T3,	H,	BIAS+36		; store high part of double
	st	T4,	H,	BIAS+40		; store low part of double
	st	UArg1,	H,	BIAS+44		; place matching fence
	addu	tmp2,	H,	32		; where the second double starts on heap
	or.u	tmp1,	tmp2,	TFLT		; tmp2 := tagged double term (points to double
						; just built up on heap)
	st	tmp1,	H,	BIAS+12		; store the cdr of the dotted pair

	addu	H,	H,	48		; H points past last fence of last double



	; A1 = cdr(L1), A2= cdr(L2)
	bb1	BLIST,	A1,	7f		; another list ==> another iteration
	addu	tmp1,	ZERO,	lo16(TK_NIL)	; make sure the cdr is nil
	or.u	tmp1,	tmp1,	TSYM
	cmp	A1,	tmp1,	A1		
	bb0	eq,	A1,	@lcca_fail	; yuck, malformed list, so fail

	; L1 has nil cdr, L2 must as well
	cmp	A2,	tmp1,	A2
	bb1	ne,	A2,	@lcca_fail

	; The iteration is done.  Just complete L3's list by adding a [] tail
	st	tmp1,	H,	BIAS-44		; H points way past (H+48) destination (H+4)

	; We have a valid answer built up in UArg2, unify with A3 and return
	; Restore the registers before we leave
	; Bind result to A3

	ld	r14,	E,	BIAS-4
	ld	r15,	E,	BIAS-8
	ld	r16,	E,	BIAS-12

	or	RET,	CP,	ZERO		; the unifier will return to RET
	addu	E,	OldE,	ZERO		; fix up E, too
	br.n	_wm_unify			; and call the unifier
	or	UArg1,	A3,	ZERO		; load LH arg to unifier (L3)
						; RH arg already set up in UArg2
	
7:
	bb0.n	BLIST,	A2,	@lcca_fail	; not a list ==> bad combination, fail
	; need to set up another iteration: just create L3's cdr and branch back
	; also, restore valid values for TR, Fail and SPB just in case
	; of failure in get_complexUArg1 at next iteration
	ld	r16,	E,	BIAS-12	
	or.u	tmp1,	H,	TLIST		; cdr is a list, starting at next heap address
			; H+48 (H now points way past where on stack cdr is written
	br.n	@lcca_loop
	st	tmp1,	H,	BIAS-44		; write the cdr here (H+4)

@lcca_fail:
	; restore important registers before failing
	ld	r16,	E,	BIAS-12
	fail


	; lcc_sub(+L1,+L2,-L3) computes the complex difference of two complex-valued lists.
	; The lists must contain only dotted pairs of real (or integer) numbers, else
	; lcc_add fails.  If the lists have different lengths, lcc_add fails as well.
	; IDENTICAL to lcc_add, except for the two fsub.ddd instructions replacing fadd.ddd
	; and change the label names (this could be avoided by using local labels...)
	; *** MUST use macros to show the code sharing.... 

	global 	_lcc_sub

_lcc_sub:
	; save some registers on the stack, on top of current environment

	st	r14,	E,	BIAS-4
	st	r15,	E,	BIAS-8
	st	r16,	E,	BIAS-12

; prologue

	deref	A1,	2f			; dereference L1
	fail
2:	deref	A2,	3f			; dereference L2	
	fail
3:	bb0	BLIST,	A1,	@lfail		; fail if not a list
	bb0	BLIST,	A2,	@lfail		; fail if not a list

	; Output list represented by term in UArg2.
	or.u	UArg2,	H,	TLIST		; build list starting at H


@lccs_loop:
	clr	A1,	A1,	6<26>		; get address of list L1
	ld	T1,	A1,	BIAS		; load car
	ld	A1,	A1,	BIAS+4		; load cdr

	clr	A2,	A2,	6<26>		; get address of list L2
	ld	S,	A2,	BIAS		; load car
	ld	A2,	A2,	BIAS+4		; load cdr


	deref	T1,	2f			; dereference car
	fail
2:	deref	S,	3f			; dereference car
	fail


3:	bsr.n	_get_complexUArg1		; get L1 complex element
	addu	UArg1,	T1,	ZERO		; in T1-T4
	
	st	H,	E,	BIAS-40		; save H at start of each iteration

	addu	r14,	T1,	ZERO
	addu	r15,	T2,	ZERO
	st	T3,	E,	BIAS-36		; don't overwrite TR in case of failure
;	addu	r16,	T3,	ZERO		  in _get_complexUArg1 below
	addu	r17,	T4,	ZERO


4:	
	bsr.n	_get_complexUArg1		; get L2 complex element
	addu	UArg1,	S,	ZERO		; in T1-T4 -- S is now free for use as a temp
	ld	r16,	E,	BIAS-36		; load back what was T3 for L1's complex el

	; now complex add r14-r17 with T1-T4, leaving result in T1-T4
	fsub.ddd T1,	r14,	T1
	fsub.ddd T3,	r16,	T3


	; create a dotted pair on the heap, and store a reference to it in the output list
	; note that for now the dotted pair _always_ contains two floats  -- we could 
	; conceivably want to check for integer storage...
	; car at H, cdr at H+4, start the dotted pair at H+8  (10 words worth)
	; H 	--->	car  (the dotted pair) --> H+8
	; H+4	--->	cdr  (to the next dotted pair  H+48, or [])
	; H+8	--->	car  (of the dotted pair) --> H+16
	; H+12 	--->	cdr  (of the dotted pair) --> H+32
	; H+16	--->		Fence
	; H+20 	--->		Float 1
	; H+24	--->		Float 2
	; H+28	--->		Fence
	; H+32	--->		Fence
	; H+36	--->		Float 3
	; H+40	--->		Float 4
	; H+44	--->		Fence
	; H+48	--->	Next dotted pair, unless H+4 = []    <---  NewH
	; ......

	ld	H,	E,	BIAS-40		; reload H

	addu	tmp2,	H,	8		; where the dotted pair starts on heap
	or.u	tmp1,	tmp2,	TLIST		; it's a list
	st	tmp1,	H,	BIAS		; store the car (the dotted pair yet to be made)
	; now build up the car (double) of the dotted pair
	or.u	UArg1,	ZERO,	TFNC		; fence tag
	or	UArg1,	UArg1,	3		; to bracket fence
	st	UArg1,	H,	BIAS+16		; place fence
	st	T1,	H,	BIAS+20		; store high part of double
	st	T2,	H,	BIAS+24		; store low part of double
	st	UArg1,	H,	BIAS+28		; place matching fence
	addu	tmp2,	H,	16		; where the first double starts on heap
	or.u	tmp1,	tmp2,	TFLT		; tmp1 := tagged double term (points to double
						; just built up on heap)
	st	tmp1,	H,	BIAS+8		; store the car of the dotted pair
	; now build up the cdr (double) of the dotted pair
	st	UArg1,	H,	BIAS+32		; place fence
	st	T3,	H,	BIAS+36		; store high part of double
	st	T4,	H,	BIAS+40		; store low part of double
	st	UArg1,	H,	BIAS+44		; place matching fence
	addu	tmp2,	H,	32		; where the second double starts on heap
	or.u	tmp1,	tmp2,	TFLT		; tmp2 := tagged double term (points to double
						; just built up on heap)
	st	tmp1,	H,	BIAS+12		; store the cdr of the dotted pair

	addu	H,	H,	48		; H points past last fence of last double



	; A1 = cdr(L1), A2= cdr(L2)
	bb1	BLIST,	A1,	7f		; another list ==> another iteration
	addu	tmp1,	ZERO,	lo16(TK_NIL)	; make sure the cdr is nil
	or.u	tmp1,	tmp1,	TSYM
	cmp	A1,	tmp1,	A1		
	bb0	eq,	A1,	@lcca_fail	; yuck, malformed list, so fail

	; L1 has nil cdr, L2 must as well
	cmp	A2,	tmp1,	A2
	bb1	ne,	A2,	@lcca_fail

	; The iteration is done.  Just complete L3's list by adding a [] tail
	st	tmp1,	H,	BIAS-44		; H points way past (H+48) destination (H+4)

	; We have a valid answer built up in UArg2, unify with A3 and return
	; Restore the registers before we leave
	; Bind result to A3

	ld	r14,	E,	BIAS-4
	ld	r15,	E,	BIAS-8
	ld	r16,	E,	BIAS-12

	or	RET,	CP,	ZERO		; the unifier will return to RET
	addu	E,	OldE,	ZERO		; fix up E, too
	br.n	_wm_unify			; and call the unifier
	or	UArg1,	A3,	ZERO		; load LH arg to unifier (L3)
						; RH arg already set up in UArg2
	
7:
	bb0.n	BLIST,	A2,	@lcca_fail	; not a list ==> bad combination, fail
	; need to set up another iteration: just create L3's cdr and branch back
	; also, restore valid values for TR, Fail and SPB just in case
	; of failure in get_complexUArg1 at next iteration
	ld	r16,	E,	BIAS-12	
	or.u	tmp1,	H,	TLIST		; cdr is a list, starting at next heap address
			; H+48 (H now points way past where on stack cdr is written
	br.n	@lccs_loop
	st	tmp1,	H,	BIAS-44		; write the cdr here (H+4)




	global	_lcc_dot

	; lcc_dot(+L1,+L2,-DP) computes dot product DP of complex-valued lists.
	; The lists must contain only dotted pairs of real (or integer) numbers, else
	; lcc_dot fails.  If the lists have different lengths, lcc_dot fails as well.

_lcc_dot:

; save some registers on the stack, on top of current environment

	st	r14,	E,	BIAS-4
	st	r15,	E,	BIAS-8
	st	r16,	E,	BIAS-12
	st	r17,	E,	BIAS-16
	st	r18,	E,	BIAS-20
	st	r19,	E,	BIAS-24
	st	r20,	E,	BIAS-28
	st	r21,	E,	BIAS-32
	st	r22,	E,	BIAS-36
	st	r23,	E,	BIAS-40
	st	r24,	E,	BIAS-44
	st	r25,	E,	BIAS-48

; prologue

	deref	A1,	2f			; dereference L1
	fail
2:	deref	A2,	3f			; dereference L2	
	fail
3:	bb0	BLIST,	A1,	@lfail		; fail if not a list
	bb0	BLIST,	A2,	@lfail		; fail if not a list

	addu	r22,	ZERO,	ZERO		; initialize dp accumulators
	addu	r23,	ZERO,	ZERO
	addu	r24,	ZERO,	ZERO
	addu	r25,	ZERO,	ZERO

@lcc_loop:
	clr	A1,	A1,	6<26>		; get address of list L1
	ld	T1,	A1,	BIAS		; load car
	ld	A1,	A1,	BIAS+4		; load cdr

	clr	A2,	A2,	6<26>		; get address of list L2
	ld	UArg2,	A2,	BIAS		; load car
	ld	A2,	A2,	BIAS+4		; load cdr


	deref	T1,	2f			; dereference car
	fail
2:	deref	UArg2,	3f			; dereference car
	fail


3:	bsr.n	_get_complexUArg1		; get L1 complex element
	addu	UArg1,	T1,	ZERO		; in T1-T4
	addu	r14,	T1,	ZERO
	addu	r15,	T2,	ZERO
	st	T3,	E,	BIAS-52		; don't overwrite H in case of failure
;	addu	r16,	T3,	ZERO		  in _get_complexUArg1 below
	addu	r17,	T4,	ZERO

4:	
	bsr.n	_get_complexUArg1		; get L2 complex element
	addu	UArg1,	UArg2,	ZERO		; in T1-T4
	ld	r16,	E,	BIAS-52		; load back what was T3 for L1's complex el

	; now complex multiply r14-r17 with T1-T4
	fmul.ddd tmp1,	r14,	T1
	fmul.ddd UArg1,	r16,	T3
	fmul.ddd r18,	r14,	T3
	fmul.ddd r20,	r16,	T1
	fsub.ddd T1,	tmp1,	UArg1
	fadd.ddd T3,	r18,	r20

	; accumulate answer in r22-r25
	fadd.ddd r22,	r22,	T1		; accumulate real part
	fadd.ddd r24,	r24,	T3		; accumulate imaginary part


	; A1 = cdr(L1), A2= cdr(L2)
	bb1	BLIST,	A1,	7f		; another list ==> another iteration
	addu	tmp1,	ZERO,	lo16(TK_NIL)	; make sure the cdr is nil
	or.u	tmp1,	tmp1,	TSYM
	cmp	A1,	tmp1,	A1		
	bb0	eq,	A1,	@lcc_fail	; yuck, malformed list, so fail

	; L1 has nil cdr, L2 must as well
	cmp	A2,	tmp1,	A2
	bb1	ne,	A2,	@lcc_fail

	; OK, we have a valid dot product in r22-r24
	; Restore the registers before the call; and set up call to complex unifier too
	; Bind result to A3

	ld	r14,	E,	BIAS-4
	ld	r15,	E,	BIAS-8
	or	T1,	r22,	ZERO
	ld	r16,	E,	BIAS-12
	ld	r17,	E,	BIAS-16
	or	T2,	r23,	ZERO
	ld	r18,	E,	BIAS-20
	ld	r19,	E,	BIAS-24
	or	T3,	r24,	ZERO
	ld	r20,	E,	BIAS-28
	ld	r21,	E,	BIAS-32
	ld	r22,	E,	BIAS-36
	or	T4,	r25,	ZERO
	ld	r23,	E,	BIAS-40
	ld	r24,	E,	BIAS-44
	ld	r25,	E,	BIAS-48

	bsr.n	_complex_unifier		; and call the complex unifier
	or	UArg1,	A3,	ZERO		; bind with A3
	
	jmp.n	CP				; return
	addu	E,	OldE,	ZERO		; restore the environment, Earth citizens!

7:
	bb1	BLIST,	A2,	@lcc_loop	; another list ==> another iteration
@lcc_fail:
	; restore important registers before failing
	ld	r16,	E,	BIAS-12
	ld	r18,	E,	BIAS-20
	ld	r19,	E,	BIAS-24
	ld	r20,	E,	BIAS-28
	ld	r21,	E,	BIAS-32
	ld	r22,	E,	BIAS-36
	ld	r24,	E,	BIAS-44
	ld	r25,	E,	BIAS-48
	fail



	global	_lcc_mul

	; lcc_mul(+L1,+L2,-L3) computes the complex product of two complex-valued lists.
	; The lists must contain only dotted pairs of real (or integer) numbers, else
	; lcc_mul fails.  If the lists have different lengths, lcc_mul fails as well.

	; Very similar to lcc_dot, but create a list of products componentwise, instead
	; of accumulating a sum.

_lcc_mul:

; save some registers on the stack, on top of current environment

	st	r14,	E,	BIAS-4
	st	r15,	E,	BIAS-8
	st	r16,	E,	BIAS-12
	st	r18,	E,	BIAS-20
	st	r19,	E,	BIAS-24
	st	r20,	E,	BIAS-28
	st	r21,	E,	BIAS-32

; prologue

	deref	A1,	2f			; dereference L1
	fail
2:	deref	A2,	3f			; dereference L2	
	fail
3:	bb0	BLIST,	A1,	@lfail		; fail if not a list
	bb0	BLIST,	A2,	@lfail		; fail if not a list

	; Output list represented by term in UArg2.
	or.u	UArg2,	H,	TLIST		; build list starting at H


@lccm_loop:
	clr	A1,	A1,	6<26>		; get address of list L1
	ld	T1,	A1,	BIAS		; load car
	ld	A1,	A1,	BIAS+4		; load cdr

	clr	A2,	A2,	6<26>		; get address of list L2
	ld	S,	A2,	BIAS		; load car
	ld	A2,	A2,	BIAS+4		; load cdr


	deref	T1,	2f			; dereference car
	fail
2:	deref	S,	3f			; dereference car
	fail


3:	bsr.n	_get_complexUArg1		; get L1 complex element
	addu	UArg1,	T1,	ZERO		; in T1-T4
	
	st	H,	E,	BIAS-40		; save H at start of each iteration

	addu	r14,	T1,	ZERO
	addu	r15,	T2,	ZERO
	st	T3,	E,	BIAS-36		; don't overwrite TR in case of failure
;	addu	r16,	T3,	ZERO		  in _get_complexUArg1 below
	addu	r17,	T4,	ZERO


4:	
	bsr.n	_get_complexUArg1		; get L2 complex element
	addu	UArg1,	S,	ZERO		; in T1-T4 -- S is now free for use as a temp
	ld	r16,	E,	BIAS-36		; load back what was T3 for L1's complex el

	; now complex multiply r14-r17 with T1-T4
	fmul.ddd tmp1,	r14,	T1
	or	S,	UArg2,	ZERO		; save UArg2 - the answer (list term)
	fmul.ddd UArg1,	r16,	T3
	fmul.ddd r18,	r14,	T3
	fmul.ddd r20,	r16,	T1
	fsub.ddd T1,	tmp1,	UArg1		; store complex product in T1-T4
	or	UArg2,	S,	ZERO		; restore UArg2 - the answer
	fadd.ddd T3,	r18,	r20


	; create a dotted pair on the heap, and store a reference to it in the output list
	; note that for now the dotted pair _always_ contains two floats  -- we could 
	; conceivably want to check for integer storage...
	; car at H, cdr at H+4, start the dotted pair at H+8  (10 words worth)
	; H 	--->	car  (the dotted pair) --> H+8
	; H+4	--->	cdr  (to the next dotted pair  H+48, or [])
	; H+8	--->	car  (of the dotted pair) --> H+16
	; H+12 	--->	cdr  (of the dotted pair) --> H+32
	; H+16	--->		Fence
	; H+20 	--->		Float 1
	; H+24	--->		Float 2
	; H+28	--->		Fence
	; H+32	--->		Fence
	; H+36	--->		Float 3
	; H+40	--->		Float 4
	; H+44	--->		Fence
	; H+48	--->	Next dotted pair, unless H+4 = []    <---  NewH
	; ......

	ld	H,	E,	BIAS-40		; reload H

	addu	tmp2,	H,	8		; where the dotted pair starts on heap
	or.u	tmp1,	tmp2,	TLIST		; it's a list
	st	tmp1,	H,	BIAS		; store the car (the dotted pair yet to be made)
	; now build up the car (double) of the dotted pair
	or.u	UArg1,	ZERO,	TFNC		; fence tag
	or	UArg1,	UArg1,	3		; to bracket fence
	st	UArg1,	H,	BIAS+16		; place fence
	st	T1,	H,	BIAS+20		; store high part of double
	st	T2,	H,	BIAS+24		; store low part of double
	st	UArg1,	H,	BIAS+28		; place matching fence
	addu	tmp2,	H,	16		; where the first double starts on heap
	or.u	tmp1,	tmp2,	TFLT		; tmp1 := tagged double term (points to double
						; just built up on heap)
	st	tmp1,	H,	BIAS+8		; store the car of the dotted pair
	; now build up the cdr (double) of the dotted pair
	st	UArg1,	H,	BIAS+32		; place fence
	st	T3,	H,	BIAS+36		; store high part of double
	st	T4,	H,	BIAS+40		; store low part of double
	st	UArg1,	H,	BIAS+44		; place matching fence
	addu	tmp2,	H,	32		; where the second double starts on heap
	or.u	tmp1,	tmp2,	TFLT		; tmp2 := tagged double term (points to double
						; just built up on heap)
	st	tmp1,	H,	BIAS+12		; store the cdr of the dotted pair

	addu	H,	H,	48		; H points past last fence of last double



	; A1 = cdr(L1), A2= cdr(L2)
	bb1	BLIST,	A1,	7f		; another list ==> another iteration
	addu	tmp1,	ZERO,	lo16(TK_NIL)	; make sure the cdr is nil
	or.u	tmp1,	tmp1,	TSYM
	cmp	A1,	tmp1,	A1		
	bb0	eq,	A1,	@lccm_fail	; yuck, malformed list, so fail

	; L1 has nil cdr, L2 must as well
	cmp	A2,	tmp1,	A2
	bb1	ne,	A2,	@lccm_fail

	; The iteration is done.  Just complete L3's list by adding a [] tail
	st	tmp1,	H,	BIAS-44		; H points way past (H+48) destination (H+4)

	; We have a valid answer built up in S, unify with A3 and return
	; Restore the registers before we leave
	; Bind result to A3

	ld	r14,	E,	BIAS-4
	ld	r15,	E,	BIAS-8
	ld	r16,	E,	BIAS-12
	ld	r18,	E,	BIAS-20
	ld	r19,	E,	BIAS-24
	ld	r20,	E,	BIAS-28
	ld	r21,	E,	BIAS-32

	or	RET,	CP,	ZERO		; the unifier will return to RET
	addu	E,	OldE,	ZERO		; fix up E, too
	br.n	_wm_unify			; and call the unifier
	or	UArg1,	A3,	ZERO		; load LH arg to unifier (L3)
						; RH arg already set up in UArg2
	

7:
	bb0.n	BLIST,	A2,	@lccm_fail	; not a list ==> bad combination, fail
	; need to set up another iteration: just create L3's cdr and branch back
	; also, restore valid values for TR, Fail and SPB just in case
	; of failure in get_complexUArg1 at next iteration
	ld	r16,	E,	BIAS-12	
	ld	r18,	E,	BIAS-20
	or.u	tmp1,	H,	TLIST		; cdr is a list, starting at next heap address
			; H+48 (H now points way past where on stack cdr is written
	ld	r19,	E,	BIAS-24
	ld	r20,	E,	BIAS-28
	ld	r21,	E,	BIAS-32

	br.n	@lccm_loop
	st	tmp1,	H,	BIAS-44		; write the cdr here (H+4)

@lccm_fail:
	; restore important registers before failing
	ld	r16,	E,	BIAS-12
	ld	r18,	E,	BIAS-20
	ld	r19,	E,	BIAS-24
	ld	r20,	E,	BIAS-28
	ld	r21,	E,	BIAS-32
	fail


#ifdef notdef

	; First attempt at lsplit/3 - get length of list first.  Is slower than second 
	; attempt below.

	global	_lsplit
	; lsplit(+L,-Top, -Bot) splits list L into two halves, Top and Bot.  If L has an odd number
	; of elements, lsplit/3 fails.
	; *** We assume L is not []  -- this maps to vsplit (vc_split, vr_split); lsplit could easily
	; be extended (more precisely, _listlenUArg1 could be) to allow this.

_lsplit:	
	deref	A1,	2f
	fail
2:	bb1.n	BLIST,	A1,	_listlenUArg1	; if a list, get its length in tmp2
	or	UArg1,	A1,	ZERO		; harmless on failure
	fail					; fail				

_listlenUArg1:
	; return length of list found in UArg1 as tmp2.
	addu	tmp2,	ZERO,	ZERO		; initialize counter
@lenloop:
	addu	tmp2,	tmp2,	1		; increment counter
	extu	T4,	UArg1,	26<0>		; unbiased address of car on heap
	addu	T1,	T4,	4		; get &cdr
	ld	T2,	T1,	BIAS		; get the cdr
	deref	T2,	3f			; dereference the cdr
	fail					; fail for bogus lists
3:	bb1.n	BLIST,	T2,	@lenloop	; need another iteration
	or	UArg1,	T2,	ZERO		; car(next) := cdr (harmless when branch not taken)

	; now, check for nil cdr
	addu	T3,	ZERO,	lo16(TK_NIL)
	or.u	T3,	T3,	TSYM		; construct []
	cmp	tmp1,	T2,	T3		; cdr == []?
	bb1	ne,	tmp1,	@lfail		; fail for anything except []
	



	bb1	0,	tmp2,	@lfail		; if length is odd, fail

	extu	T1,	tmp2,	31<1>		; divide by 2

	; We can return both Top and Bot with a very small amount of copying.
	; Top: Copy from el 1 to Len/2th el of list.  Don't make new copies of list els, just
	; bind to existing els.
	; Bot: share it totally. (Make a list term with address = (Len/2 +1)th el of list.

	; T1: list length to create

	
	extu	T2,	A1,	26<0>		; get unbiased heap address of car
	ld	A1,	T2,	BIAS		; load first car
	or.u	UArg2,	H,	TLIST		; make list term

@splitloop:
	st 	A1,	H,	BIAS		; store car
	sub	T1,	T1,	1		; decrement counter
	bcnd	eq0,	T1,	3f
	addu	tmp1,	H,	8
	or.u	tmp2,	tmp1,	TLIST		; create cdr
	st	tmp2,	H,	BIAS+4		; write out cdr
	addu	H,	H,	8		; adjust heap
	ld	T3,	T2,	BIAS+4		; get the source cdr
	deref	T3,	2f
	fail
2:	bb0	BLIST,	T3,	@lfail		; fail if not a list
	extu	T2,	T3,	26<0>		; get unbiased heap address of car
	br.n	@splitloop
	ld	A1,	T2,	BIAS		; load next car for next iteration

3:	; done with iteration, write out [] cdr
	addu	tmp1,	ZERO,	lo16(TK_NIL)
	or.u	tmp1,	tmp1,	TSYM
	st	tmp1,	H,	BIAS+4		; store []
	addu	H,	H,	8

	; UArg2 points to the copied Top List
	; Now simply create Bot
	
	ld	T3,	T2,	BIAS+4		; get source cdr of last el of Top
	deref	T3,	4f
	fail
4:	bb0	BLIST,	T3,	@lfail		; fail if not a list
	extu	T2,	T3,	26<0>		; get unbiased heap address of car
	or.u	T4,	T2,	TLIST		; create Bot

	; UArg2 has Top, T4 has Bot.
	; Call the unifier  (the unifier only nukes tmp1 and tmp2)
	
	bsr.n	_wm_unify
	or	UArg1,	A2,	ZERO		; unify A2 with Top
	
	; Call the unifier again for A3, and return through the unifier.

	or	RET,	CP,	ZERO		; unifier returns to RET
	addu	E,	OldE,	ZERO		; fix up env, too

	or	UArg2,	T4,	ZERO		; load up RH arg for unifier
	br.n	_wm_unify
	or	UArg1,	A3,	ZERO		; load up LH arg for unifier
#endif


#ifdef notdef

	; Second attempt at lsplit/3 in assembler.  Mimicks algortihm found in implementation of
	; lsplit/3 in blt_mth88.pro.  The Prolog implementation is just as good or better than
	; what appears below, so leave it in Prolog.

	global	_lsplit
	; lsplit(+L,-Top, -Bot) splits list L into two halves, Top and Bot.  If L has an odd number
	; of elements, lsplit/3 fails.
	; *** We assume L is not []  -- this maps to vsplit (vc_split, vr_split); lsplit could easily
	; be extended (more precisely, _listlenUArg1 could be) to allow this.

_lsplit:	
	deref	A1,	2f
	fail
2:	bb0	BLIST,	A1,	@lfail		; fail if L is not a list
	extu	T2,	A1,	26<0>		; get heap address of car
	ld	T1,	T2,	BIAS		; load first car into T1
	addu	T3,	T2,	ZERO		; initialize address to be +=2ed along to check for []

	or.u	UArg2,	H,	TLIST		; make list term for Top
	addu	tmp2,	ZERO,	lo16(TK_NIL)
	or.u	tmp2,	tmp2,	TSYM		; tmp2 := []

	; T1: next car to be placed in Top
	; T2: heap address of next car to be placed in Top
	; T3: next car address (dereferenced cdr with tag stripped out leaving heap address) to be
	; checked in the +=2 search for end of list [] - we need to advance by 2.
	;	points to a --> (car1,cdr1->car2,cdr2) pair of list els to be advanced and check cdr2==[]
	; tmp2: [] (constant)

@splitloop:
	st	T1,	H,	BIAS		; store car
	ld	T4,	T3,	BIAS+4		; and get cdr1
	deref	T4,	2f			; dereference it
	fail
2:
	cmp	tmp1,	T4,	tmp2		; cdr == [] ?
	bb1	eq,	tmp1,	@lfail		; Odd length list, fail
	bb0	BLIST,	T4,	@lfail		; cdr must be a list
	extu	tmp1,	T4,	26<0>		; get heap address of car2
	ld	T4,	tmp1,	BIAS+4		; and get cdr2
	deref	T4,	3f			; and dereference it
	fail
3:
	cmp	tmp1,	T4,	tmp2		; cdr == [] ?
	bb1	eq,	tmp1,	@exitspl	; iteration is done?
	bb0	BLIST,	T4,	@lfail		; now cdr must be a list
	extu	T3,	T4,	26<0>		; extract heap address of next car1 in (car1,cdr1->car2,cdr2)
						; for next iteration

	; not done with iteration yet, create cdr for next list
	addu	tmp1,	H,	8
	or.u	T4,	tmp1,	TLIST		; create cdr
	st	T4,	H,	BIAS+4		; write out cdr
	addu	H,	H,	8		; adjust heap
	ld	T4,	T2,	BIAS+4		; get source cdr
	deref	T4,	4f			; and dereference it
	fail
4:	bb0	BLIST,	T4,	@lfail		; fail if not a list
	extu	T2,	T4,	26<0>		; get heap address of next car to be put in Top
	br.n	@splitloop
	ld	T1,	T2,	BIAS		; and load next car to be put in Top for next iteration

@exitspl:
	st	tmp2,	H,	BIAS+4		; write out [] cdr for Top list
	addu	H,	H,	8		; adjust heap

	; UArg2 points to Top list
	; Now simply create Bot

	ld	T4,	T2,	BIAS+4
	deref	T4,	5f
	fail
5:	bb0	BLIST,	T4,	@lfail		; fail if not a list
	extu	tmp1,	T4,	26<0>		; get heap address of first car in Bot list
	or.u	T4,	T4,	TLIST		; create Bot list

	; UArg2 has Top, T4 has Bot.
	; Call the unifier  (the unifier only nukes tmp1 and tmp2)
	
	bsr.n	_wm_unify
	or	UArg1,	A2,	ZERO		; unify A2 with Top
	
	; Call the unifier again for A3, and return through the unifier.

	or	RET,	CP,	ZERO		; unifier returns to RET
	addu	E,	OldE,	ZERO		; fix up env, too

	or	UArg2,	T4,	ZERO		; load up RH arg for unifier
	br.n	_wm_unify
	or	UArg1,	A3,	ZERO		; load up LH arg for unifier
#endif


	global	_lsplit2
	; lsplit(+Len,+L,-Top, -Bot) splits list L into two halves, Top and Bot. 
	; *** We assume L is not []  -- this maps to vsplit (vc_split, vr_split); lsplit could easily
	; be extended (more precisely, _listlenUArg1 could be) to allow this.
	; lsplit/4 behaves a little differently than lsplit/3;  while lsplit/4 fails when Len 
	; is not bound to an even positive integer, it does not check the actual length of the 
	; list.  So lsplit/4 will "split" an odd list but Top and Bot will not be true halves, 
	; obviously.  Also, lsplit/3 splits [] into Top=[] and Bot=[], whereas lsplit/4 is truer
	; to the spirit of vectors and fails for [].

_lsplit2:	
	deref	A2,	2f
	fail
2:	bb0	BLIST,	A2,	@lfail		; fail if L not a list

	deref	A1,	2f
	fail
2:	bb0	BNUM,	A1,	@lfail		; Len must be a number	
	bb1	28,	A1,	@lfail		; sorry, Len must be an integer
	ext	tmp2,	A1,	26<0>		; get integer length
	bcnd	le0,	tmp2,	@lfail		; length must be a positive number


	bb1	0,	tmp2,	@lfail		; if length is odd, fail

	extu	T1,	tmp2,	31<1>		; divide by 2 (unsigned)

	; We can return both Top and Bot with a very small amount of copying.
	; Top: Copy from el 1 to Len/2th el of list.  Don't make new copies of list els, just
	; bind to existing els.
	; Bot: share it totally. (Make a list term with address = (Len/2 +1)th el of list.

	; T1: list length to create

	
	extu	T2,	A2,	26<0>		; get unbiased heap address of car
	ld	A2,	T2,	BIAS		; load first car
	or.u	UArg2,	H,	TLIST		; make list term

@splitloop2:
	st 	A2,	H,	BIAS		; store car
	sub	T1,	T1,	1		; decrement counter
	bcnd	eq0,	T1,	3f
	addu	tmp1,	H,	8
	or.u	tmp2,	tmp1,	TLIST		; create cdr
	st	tmp2,	H,	BIAS+4		; write out cdr
	addu	H,	H,	8		; adjust heap
	ld	T3,	T2,	BIAS+4		; get the source cdr
	deref	T3,	2f
	fail
2:	bb0	BLIST,	T3,	@lfail		; fail if not a list
	extu	T2,	T3,	26<0>		; get unbiased heap address of car
	br.n	@splitloop2
	ld	A2,	T2,	BIAS		; load next car for next iteration

3:	; done with iteration, write out [] cdr
	addu	tmp1,	ZERO,	lo16(TK_NIL)
	or.u	tmp1,	tmp1,	TSYM
	st	tmp1,	H,	BIAS+4		; store []
	addu	H,	H,	8

	; UArg2 points to the copied Top List
	; Now simply create Bot
	
	ld	T3,	T2,	BIAS+4		; get source cdr of last el of Top
	deref	T3,	4f
	fail
4:	bb0	BLIST,	T3,	@lfail		; fail if not a list
	extu	T2,	T3,	26<0>		; get unbiased heap address of car
	or.u	T4,	T2,	TLIST		; create Bot

	; UArg2 has Top, T4 has Bot.
	; Call the unifier  (the unifier only nukes tmp1 and tmp2)
	
	bsr.n	_wm_unify
	or	UArg1,	A3,	ZERO		; unify A3 with Top
	
	; Call the unifier again for A4, and return through the unifier.

	or	RET,	CP,	ZERO		; unifier returns to RET
	ld	UArg1,	E,	BIAS+20		; get fourth argument off stack
	or	UArg2,	T4,	ZERO		; load up RH arg for unifier

	br.n	_wm_unify
	addu	E,	OldE,	ZERO		; fix up env, too
