;
; overflow.88k			-- the heap/trail overflow and exception code
;	Copyright (c) 1988 Applied Logic Systems, Inc.
;
; Author: Kevin A. Buettner
; Date:	7/22/88
; Revision History:
;

#include "assembly.88k"
#include "alssig.h"
	text

	global	_wm_overflow0
	global	_wm_overflow1
	global	_wm_overflow2
	global	_wm_overflow3

_wm_overflow3:
	st	A3,	E,	BIAS+16		; save A3
_wm_overflow2:
	st	A2,	E,	BIAS+12		; save A2
_wm_overflow1:
	st	A1,	E,	BIAS+8		; save A1
_wm_overflow0:
ov0:
	st	CP,	E,	BIAS+4
	st	OldE,	E,	BIAS+0

	bcnd	lt0,	Safety,	@interrupt	; branch if Safety is negative

	;
	; See if we have a stack overflow
	;

;	cmp	tmp1,	StkBot,	SP
;	bb1	lo,	tmp1,	@dogc

;	bsr	_stack_overflow


@dogc:

	;
	; otherwise we have to call the garbage collector
	;

	addu	T1,	r1,	0		; put r1 in T1 for a while
	bsr.n	_wm_try0
	subu	TR,	TR,	16
	addu	CP,	T1,	0		; now put ret addr in cp so
						; that it will be saved
	bsr	save_prolog_regs		; save the registers

	or.u	r10,	r0,	hi16(_wm_in_Prolog)
	st	r0,	r10,	lo16(_wm_in_Prolog)	
						; put zero in wm_in_Prolog
	bsr	_gc				; call the garbage collector
	bsr	setup_prolog_regs		; restore the registers
	addu	T1,	CP,	0		; put ret addr back in T1
						;  so that it won't get
						;  clobbered by the trust
	bsr.n	_wm_trust_u3			; trust away the choice point
	addu	E,	SPB,	0		;  in order to restore the
	addu	SP,	E,	0		;  arguments and hb, etc

	load	tmp2,	_wm_normal		; get normal safety value
						; since an interrupt may
						; have occurred during gc
						; and set the normal safety
						; value less than zero

	subu	tmp1,	TR,	H		; check for heap overflow
	cmp	tmp1,	tmp1,	tmp2		;   again
	bb1	hi,	tmp1,	2f

	extu	tmp2,	tmp2,	0<1>		; halve wm_normal
	store	tmp2,	_wm_normal		; store wm_normal back
	cmp	tmp1,	tmp2,	33792		; make sure we still have
						; enough heap to continue
	bb1	hs,	tmp1,	1f		; branch if so

	bsr	setup_prolog_regs		; restore the registers
	bsr	_heap_overflow
	bsr	save_prolog_regs

1:
	subu	Safety,	r0,	1		; set the safety value
						;  to force an interrupt
	store	Safety,	_wm_safety
	or	tmp2,	r0,	ALSSIG_HEAP_OVERFLOW
	store	tmp2,	_wm_interrupt_caught
	

2:	/* return */
	jmp	T1				; use T1 to return

@interrupt:
	st	r1,	E,	BIAS-4		; save r1 for later
	addu	A1,	r1,	0		; put r1 in A1
	bsr	_int_get_module			; get the module id
	addu	A2,	A1,	0		; put into A2
	ld	A1,	E,	BIAS-4		; get old r1 value into A1
	st	A2,	E,	BIAS-8		; save the module id
	bsr	_int_get_goal_tokid		; get the token id
	ld	CP,	E,	BIAS+4		; load up cp and
	ld	OldE,	E,	BIAS+0		; OldE
	addu	A3,	A1,	0		; put token id/arity  into A3
	ld	A2,	E,	BIAS-8		; put module id into A1

	addu	E,	E,	8		; make E point at first argument
						; 	(biased of course)
	extu	UArg2,	A3,	10<16>		; extract arity into UArg2
	bcnd	eq0,	UArg2,	@int_setflgs

	st	A3,	H,	BIAS		; store the functor
	or.u	A3,	H,	TSTRUCT		; put the structure pointer in A3
	addu	H,	H,	4		; advance h

@int_build_goal:
	ld	S,	E,	BIAS		; get the argument
@bg_deref:
	bb1	BGND,	S,	@bg_ground	; dereference s
	ld	tmp2,	S,	BIAS
	cmp	S,	tmp2,	S
	bb0.n	eq,	S,	@bg_deref
	addu	S,	tmp2,	0

	cmp	tmp2,	S,	HeapBase
	bb1	ge,	tmp2,	@bg_ground	; branch if s >= HeapBase
	st	H,	S,	BIAS		; bind the local variable to
						;  the heap location
	cmp	tmp2,	SPB,	S		; see if we need to trail
	bb1	gt,	tmp2,	@bg_notrail	; branch if not
	subu	TR,	TR,	4		; decrement trail pointer
	st	S,	TR,	0		; trail it
@bg_notrail:
	addu	S,	H,	0		; set s to h
@bg_ground:
	st	S,	H,	BIAS		; store argument on heap
	addu	H,	H,	4		; advance heap pointer
	addu	E,	E,	4		; advance argument pointer
	subu	UArg2,	UArg2,	1		; decrement the counter
	bcnd	gt0,	UArg2,	@int_build_goal	;

@int_setflgs:
	subu	SP,	E,	20		; Allocate five words for
						; cp, OldE, and A1-A3
						;
	or.u	tmp1,	r0,	hi16(_wm_interrupt_caught)
	ld	A1,	tmp1,	lo16(_wm_interrupt_caught)
						; get interrupt flag
	or.u	A1,	A1,	TINT		; tag it as an integer
	st	ZERO,	tmp1,	lo16(_wm_interrupt_caught)
						; zero the interrupt flag
	or.u	tmp1,	r0,	hi16(_wm_normal)
	ld	Safety,	tmp1,	lo16(_wm_normal)
						; set normal interrupts
	or.u	tmp1,	r0,	hi16(_wm_overcode)
	ld	r1,	tmp1,	lo16(_wm_overcode)
						; get the place to jump to

	or.u	tmp1,	r0,	hi16(_wm_safety)
	st	Safety,	tmp1,	lo16(_wm_safety)
						; set the shadow
	jmp.n	r1				; execute the overflow code
	addu	E,	SP,	0		; set e appropriately


	global	_dbg_spycheck
_dbg_spycheck:
	subu	tmp1,	TR,	H		; Get difference between TR and
						; H
	cmp	tmp1,	tmp1,	Safety		; Compare this to Safety
	bb1.n	hs,	tmp1,	@dbg_chkflg	; branch if still normal
	or.u	tmp1,	r0,	hi16(_wm_spying)
	jmp	UArg1				; branch to overflow code

@dbg_chkflg:
	ld	tmp1,	tmp1,	lo16(_wm_spying)
						; get the _wm_spying value
	bcnd	eq0,	tmp1,	@dbg_cont	; continue if not spying
	jmp.n	UArg1				; branch to overflow code
	subu	Safety,	r0,	1		; set safety to the trigger

@dbg_cont:
	jmp	r1

;
; dbg_decr_icount is called in place of an execute entry.  It will call
; decr_icount which will decrement the icount field of a procedure entry
; (hence the name).  When this field becomes zero, indexing will be generated
; and the normal code for an execute entry will be installed in the procedure.
;

	global	_dbg_decr_icount
_dbg_decr_icount:
	subu	tmp1,	TR,	H		; Get difference between TR and
						; H
	cmp	tmp1,	tmp1,	Safety		; compare this to Safety
	bb1.n	hs,	tmp1,	@dodecr		; branch if normal
	or.u	tmp1,	r0,	hi16(_decr_icount)
	jmp	UArg1				; branch to overflow code

@dodecr:
	subu	sp,	sp,	48		; allocate a bunch of c stack
	st	r1,	sp,	32		; save return address
	st	r2,	sp,	36		; save A1
	st	r3,	sp,	40		; save A2
	or	tmp1,	tmp1,	lo16(_decr_icount)
	addu	r2,	r1,	0		; Use return addr for parameter
	jsr.n	tmp1
	st	r4,	sp,	44		; save A3

	ld	r1,	sp,	32		; reload return address
	ld	r2,	sp,	36		; reload A1
	ld	r3,	sp,	40		; reload A2
	ld	r4,	sp,	44		; reload A3
	jmp.n	r1				; branch back to prolog after..
	addu	sp,	sp,	48		; ...resetting sp



	global	_set_prolog_interrupt
_set_prolog_interrupt:
	subu	Safety,	r0,	1		; set the safety value
	jmp	r1				; return to caller
	
	data
