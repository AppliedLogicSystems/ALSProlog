
;
; uia.88k			-- wm_g_uia, wm_p_uia, wm_g_sym
;
;	Copyright (c) 1988 Applied Logic Systems, Inc.
;
; Author: Kevin A. Buettner
; Creation: 7/17/88
; Revision History:
;
;

	
#include "assembly.88k"

	text

	;
	; wm_g_uia is used to match a UIA against some object.
	;
	; UArg1 contains the object to match.
	; r1 points at the fence and the uia data.  The fence contains the
	; 	total number of words occupied by the fence and the uia data.
	;	It  is tagged, so the tag will have to cleared before this
	;	number is useable.
	;

	global	_wm_g_uia
_wm_g_uia:
	
	;
	; Dereference the object in UArg1
	;

@guia_deref:
	bb1	BGND,	UArg1,	@guia_ground
	ld	tmp1,	UArg1,	BIAS
	cmp	tmp2,	tmp1,	UArg1
	bb0.n	eq,	tmp2,	@guia_deref
	addu	UArg1,	tmp1,	0

	;
	; We have a variable.  Must bind it to a copy of the UIA
	;

	sub	SP,	SP,	4		; allocate space off the stack
						; to make things consistent with
						; the put uia code
	or.u	tmp2,	H,	TUIA		; make a UIA pointer in tmp2
	st	tmp2,	UArg1,	BIAS		; do the binding
	cmp	tmp1,	UArg1,	HB		; 
	bb1	hs,	tmp1,	@guia_copy	; branch if UArg1 >= HB
	cmp	tmp1,	UArg1,	SPB		; 
	bb1	lo,	tmp1,	@guia_copy	; branch if UArg1 < SPB
	subu	TR,	TR,	4		; trail the variable
	st	UArg1,	TR,	0		


@guia_copy:
	ld	UArg1,	r1,	0		; load the fence
	mak	tmp1,	UArg1,	16<2>		; shift 16 lsbs left two
	add	UArg2,	r1,	4		; make UArg2 point at string to
						;  copy
	add	r1,	r1,	tmp1		; make r1 point at next
						;  instr to execute
	st	UArg1,	H,	BIAS		; store the first fence
	add	tmp2,	H,	BIAS+4		; unbias H into tmp2
	add	H,	H,	tmp1		; make H point at last fence
	add	H,	H,	4		; advance h to next free word
	sub	tmp1,	tmp1,	4		; decrement counter
	st	UArg1,	tmp2,	tmp1		; store last fence

	;
	; UArg2 points at UIA data to copy
	; tmp1 has the number of bytes to copy
	; tmp2 points at the place to copy the data
	;
	; H has been updated to its new position
	; r1 has been updated to point at the instruction to return to
	; Both of the fences have been stored
	;
	; All that remains is to copy the UIA data...
	;	(We assume that there will be at least one word to copy)
			

@guia_copyloop:
	sub	tmp1,	tmp1,	4		; decrement the count
	ld	UArg1,	UArg2,	tmp1		; get the data to copy
	bcnd.n	gt0,	tmp1,	@guia_copyloop	; loop while count>0
	st	UArg1,	tmp2,	tmp1		; store the data

	ld	UArg1,	SP,	BIAS		; load the UArg1 return value
						; (for p_uia)
	jmp.n	r1				; return...and
	add	SP,	SP,	4		; deallocate the return value

@guia_ground:
	
	;
	; UArg1 contains a ground object which we must match against the UIA
	;

	bb0	BSYM,	UArg1,	@uia_fail	; fail if object is not
						;  symbolic
	ld	tmp1,	r1,	0		; load the fence
	mak	tmp2,	tmp1,	16<2>		; multiply the size by four
	addu	UArg2,	r1,	4		; Make UArg2 point at string
	addu	r1,	r1,	tmp2		; make r1 point at next instr
	subu	SP,	SP,	4		; allocate space on the stack
	st	r1,	SP,	BIAS+0		; save the return value

	bb1.n	BUIA,	UArg1,	@guia_uia	; branch if we are matching
						;  against a uia
	mak	UArg1,	UArg1,	26<0>		; strip the tag off of UArg1
	bsr	_Token_name			; get the string representing
						;  the symbol
	br	@guia_cmpstrings

@guia_uia:
	ld	tmp2,	UArg1,	BIAS		; get the UIA fence
	cmp	tmp2,	tmp2,	tmp1		; compare the fences
	bb1	ne,	tmp2,	@uia_fail	; fail if fences unequal
	add	UArg1,	UArg1,	BIAS+4		; make UArg1 point at beginning
						;  of the string

@guia_cmpstrings:
	;
	; UArg1 and UArg2 point to the strings to compare.  The strings are
	; compared byte by byte and we terminate when either the two bytes
	; don't match or when a zero byte is found after a successful match.
	;

	ld.bu	tmp1,	UArg1,	0		; get a byte
	add	UArg1,	UArg1,	1		; advance a byte
	ld.bu	tmp2,	UArg2,	0		; get another byte
	add	UArg2,	UArg2,	1		; advance the second pointer
	cmp	tmp2,	tmp1,	tmp2		; compare the bytes
	bb1	ne,	tmp2,	@uia_fail	; fail if not equal
	bcnd	ne0,	tmp1,	@guia_cmpstrings ; compare more bytes

	;
	; The strings are equal.  Reload r1 and return
	;

	ld	r1,	SP,	BIAS+0
	jmp.n	r1
	addu	SP,	SP,	4		; deallocate the stack location


	

	;
	; wm_p_uia is call by code which needs to set up a uia in the body
	; of a clause.
	;
	; UArg1 will be set to the appropriate value and the UIA will be
	; copied onto the heap
	;

	global	_wm_p_uia
_wm_p_uia:
	or.u	UArg1,	H,	TUIA		; make a UIA pointer in tmp2
	subu	SP,	SP,	4		; allocate space on the stack
	br.n	@guia_copy			; copy the uia onto the heap
	st	UArg1,	SP,	BIAS		; store return value for later




@uia_fail:
	jmp	Fail				; fail


	;
	; wm_g_sym is called to match a symbol in the head
	; 
	; UArg1 is set to the object to dereference and match
	; UArg2 is partially set to the symbol to match.  The low sixteen
	; 	bits contain the token.  All that remains is to set the
	;	high sixteen bits with the symbol tag
	;


	global	_wm_g_sym
_wm_g_sym:
	or.u	UArg2,	UArg2,	TSYM		; or in the symbol tag

@gsym_deref:
	bb1	BGND,	UArg1,	@gsym_ground	; dereference UArg1
	ld	tmp1,	UArg1,	BIAS
	cmp	S,	UArg1,	HB		; do early trail check
	cmp	tmp2,	tmp1,	UArg1
	bb0.n	eq,	tmp2,	@gsym_deref
	addu	UArg1,	tmp1,	0

@gsym_bind:
	bb1.n	hs,	S,	@gsym_cont	; branch if UArg1 >= hb
	st	UArg2,	UArg1,	BIAS		; -- but first do the binding
	cmp	S,	UArg1,	SPB		; do spb check
	bb1	lo,	S,	@gsym_cont	; branch if UArg1 < spb
	subu	TR,	TR,	4		; allocate a new trail entry
	st	UArg1,	TR,	0		; and trail UArg1
@gsym_cont:
	jmp	r1				; return to caller


	;
	; wm_u_sym is called in read mode to perform the symbol matching
	;
	; UArg1 contains the address (biased) of the object to match
	; UArg2 contains a partially built symbol.  As before, we must or
	;	in the tag to make it a complete symbol
	;

	global	_wm_u_sym
_wm_u_sym:

	or.u	UArg2,	UArg2,	TSYM		; or in the symbol tag

@usym_deref:
	ld	tmp1,	UArg1,	BIAS		; load the object
	cmp	tmp2,	tmp1,	UArg1		; compare object and address
	bb1	eq,	tmp2,	@usym_var	; branch if equal (got a var)
	bb0.n	BGND,	tmp1,	@usym_deref	; loop on reference
	add	UArg1,	tmp1,	0		;  -- but first setup new UArg1

	;
	; Here is some more gsym code which just so happens to be the same
	; code that usym wants to use for matching ground objects.  Fortunately,
	; usym falls into it...
	;
      
@gsym_ground:
	bb0	BSYM,	UArg1,	@uia_fail	; fail if UArg1 not symbolic
	bb1	BUIA,	UArg1,	@gsym_uia	; branch if UArg1 is a UIA
	cmp	tmp1,	UArg1,	UArg2		; compare the objects
	bb1	ne,	tmp1,	@uia_fail	; fail if not equal
	jmp	r1				; return to caller

@gsym_uia:
	sub	SP,	SP,	4		; allocate space on stack
	st	r1,	SP,	BIAS		; save r1 on the stack
	mak	tmp1,	UArg1,	26<0>		; strip tag off of UArg1
	mak	UArg1,	UArg2,	26<0>		; put stripped UArg2 in UArg1
	add	UArg2,	tmp1,	BIAS+4		; make UArg2 point at UIA string
	bsr	_Token_name			; get the string representing
						;   the token
	br	@guia_cmpstrings


@usym_var:
	cmp	tmp1,	UArg1,	HB		;
	bb1.n	hs,	tmp1,	@gsym_cont	; branch if UArg1 >= HB
	st	UArg2,	UArg1,	BIAS		;  -- but first do the binding
	subu	TR,	TR,	4		; allocate new trail cell
	jmp.n	r1				; return to caller
	st	UArg1,	TR,	0		;  -- but first trail the var

;
; _wm_g_dbl	-- matches a double
;
;	UArg1 contains the object to match
;	tmp1 and tmp2 contain the low and hi halves of the double
;
;
;


global	_wm_g_dbl
_wm_g_dbl:
@gdbl_deref:
	bb1	BGND,	UArg1,	@gdbl_ground	; dereference UArg1
	ld	UArg2,	UArg1,	BIAS
	cmp	S,	UArg1,	HB		; do early trail check
	cmp	UArg1,	UArg2,	UArg1
	bb0.n	eq,	UArg1,	@gdbl_deref
	addu	UArg1,	UArg2,	0

	;
	; Have to bind a variable
	;

	st	tmp1,	H,	BIAS+4		; store value part of double
	st	tmp2,	H,	BIAS+8		;
	or	tmp1,	ZERO,	3		; build a fence for doubles
	or.u	tmp1,	tmp1,	TFNC
	st	tmp1,	H,	BIAS		; store first fence
	st	tmp1,	H,	BIAS+12		; store second fence
	or.u	UArg2,	H,	TFLT		; set up UArg2 with ptr to
						;   Prolog double.
	br.n	@gsym_bind			; Do the binding,
	addu	H,	H,	16		;   but first advance the heap

@gdbl_ground:
	bb0	BNUM,	UArg1,	@uia_fail	; fail if not a number
	bb0	BUIA,	UArg1,	@uia_fail	; fail if not a uia (double)

	clr	UArg1,	UArg1,	6<26>		; nuke the tag
	ld	UArg2,	UArg1,	BIAS+4		; get first part of double
	cmp	UArg2,	tmp1,	UArg2		; see if equal
	bb1	ne,	UArg2,	@uia_fail	; fail if not equal
	ld	UArg2,	UArg1,	BIAS+8		; get second part of double
	cmp	UArg2,	tmp2,	UArg2		; see if equal
	bb1	ne,	UArg2,	@uia_fail	; fail if not equal
	jmp	r1				; else continue
	
	;
	; wm_p_unsafe is called to perform the put_unsafe instruction
	; 
	; UArg1 is set to the object to dereference.  On exit it will
	; 	contain the dereferenced object.
	;


	global	_wm_p_unsafe


@punsafe_cont:
	jmp	r1				; return to caller

_wm_p_unsafe:

@punsafe_deref:
	bb1	BGND,	UArg1,	@punsafe_cont	; dereference UArg1
	ld	tmp1,	UArg1,	BIAS
	cmp	tmp2,	UArg1,	HeapBase	; do early test
	cmp	UArg1,	tmp1,	UArg1
	bb0.n	eq,	UArg1,	@punsafe_deref
	addu	UArg1,	tmp1,	0

	bb1	hs,	tmp2,	@punsafe_cont	; branch if on heap
	cmp	tmp2,	UArg1,	SPB		; see if we need to trail
	bb1.n	lo,	tmp2,	@after_trail	; branch if no trailing needed
	st	H,	H,	BIAS		; make a variable on heap
	subu	TR,	TR,	4		; push an entry onto the
	st	UArg1,	TR,	0		;	trail
@after_trail:
	st	H,	UArg1,	BIAS		; bind variable to top of stack
	addu	UArg1,	H,	0		; move top of heap to UArg1
	jmp.n	r1				; return to caller
	addu	H,	H,	4		; 	whilst advancing h


	;
	; wm_u_lval implements the write mode part of the unify local value
	;	instruction.
	;
	; UArg1 is set to the object to dereference
	; UArg2 is set to the address on the heap to bind (bias not yet added
	;	in)
	;

	global	_wm_u_lval

_wm_u_lval:

@ulval_deref:
	bb1	BGND,	UArg1,	@ulval_cont	; dereference UArg1
	ld	tmp1,	UArg1,	BIAS
	cmp	tmp2,	UArg1,	HeapBase	; do early test
	cmp	UArg1,	tmp1,	UArg1
	bb0.n	eq,	UArg1,	@ulval_deref
	addu	UArg1,	tmp1,	0

	bb1	hs,	tmp2,	@ulval_cont	; branch if on heap
	cmp	tmp1,	UArg1,	SPB		; see if we need to trail
	bb1.n	lo,	tmp1,	@ulval_afttrail	; branch if not
	st	UArg2,	UArg1,	BIAS		; but bind the variable first
	subu	TR,	TR,	4		; push the entry on
	st	UArg1,	TR,	0		;	the trail

@ulval_afttrail:
	jmp.n	r1				; return whilst
	st	UArg2,	UArg2,	BIAS		; 	making heap loc a variable
	
@ulval_cont:
	jmp.n	r1
	st	UArg1,	UArg2,	BIAS		; set the heap location

	;
	; wm_u_int implements the read mode case for unify_integer
	;
	; UArg1 contains the heap location to match
	; UArg2 contains the integer (tagged) which we are expecting
	;
	global	_wm_u_int
_wm_u_int:

@uint_deref:
	ld	tmp1,	UArg1,	BIAS		; load the object
	cmp	tmp2,	tmp1,	UArg1		; compare object and address
	bb1	eq,	tmp2,	@uint_var	; branch if equal (got a var)
	bb0.n	BGND,	tmp1,	@uint_deref	; loop on reference
	add	UArg1,	tmp1,	0		;  -- but first setup new UArg1

	;
	; got a ground object.  Need to match it.
	;
	cmp	tmp1,	UArg1,	UArg2		; see if objects are equal
	bb1	ne,	tmp1,	@uia_fail	; fail if not equal
@uint_return:
	jmp	r1

@uint_var:
	cmp	tmp1,	UArg1,	HB		; see if we need to trail
	bb1.n	hs,	tmp1,	@uint_return	; branch if not
	st	UArg2,	UArg1,	BIAS		;   while binding the variable
	subu	TR,	TR,	4		; make a new trail entry
	jmp.n	r1				;   and while returning
	st	UArg1,	TR,	0		;   store UArg1 on it

	data
