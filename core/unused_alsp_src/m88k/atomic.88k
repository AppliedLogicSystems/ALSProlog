#include "assembly.88k"
;
; Creation:  Brian K. Short   May 1988
;
;	Copyright (c) 1989 Motorola, Inc.
;	Copyright (c) 1989 Applied Logic Systems, Inc.
;
; atomic.s -- Code for various simple builtins:
;   --atomic, atom, integer, nonvar, number, var
;
		text
;
; Code for Builtin Atomic/1
;
	global	_wm_atomic
_wm_atomic:

_atomic1:

	bb1	BGND,	A1,	_atomic2	; dereference A1
	ld	tmp1,	A1,	BIAS
	cmp	tmp2,	tmp1,	A1
	bb0.n	eq,	tmp2,	_atomic1
	addu	A1,	tmp1,	0
;
; A1 is non-variable.
;
	jmp	Fail

;
; A1 is ground object.
;
_atomic2:

	bb1	BNUM,	A1,	_atomic3	; number(A1)?
	bb0	BSYM,	A1,	_fail		; symbol(A1)?

_atomic3:

	jmp.n	CP				; must be atomic
	addu	E,	OldE,	0


;
; Code for Builtin Number/1
;
	global	_wm_number
_wm_number:

_number1:

	bb1	BGND,	A1,	_number2	; dereference A1
	ld	tmp1,	A1,	BIAS
	cmp	tmp2,	tmp1,	A1
	bb0.n	eq,	tmp2,	_number1
	addu	A1,	tmp1,	0
;
; A1 is a variable.
;
	jmp	Fail

;
; A1 is non-variable.
;
_number2:

	bb0	BNUM,	A1,	_fail		; number?

	jmp.n	CP
	addu	E,	OldE,	0
	

;
; Code for Builtin Float/1
;
	global	_wm_float

_wm_float:
_float1:

	bb1	BGND,	A1,	_float2		; dereference A1
	ld	tmp1,	A1,	BIAS
	cmp	tmp2,	tmp1,	A1
	bb0.n	eq,	tmp2,	_float1
	addu	A1,	tmp1,	0
;
; A1 is a variable.
;
	jmp	Fail

;
; A1 is non-variable.
;
_float2:

	bb0	BUIA,	A1,	_fail		; float?
	bb0	BNUM,	A1,	_fail		;

	jmp.n	CP
	addu	E,	OldE,	0
	

;
; Code for Builtin Integer/1
;
	global	_wm_integer
_wm_integer:

_integer1:

	bb1	BGND,	A1,	_integer2	; dereference A1
	ld	tmp1,	A1,	BIAS
	cmp	tmp2,	tmp1,	A1
	bb0.n	eq,	tmp2,	_integer1
	addu	A1,	tmp1,	0
;
; A1 is a variable.
;
	jmp	Fail

;
; A1 is non-variable.
;
_integer2:

	bb0	BNUM,	A1,	_fail		; integer?
	bb1	BUIA,	A1,	_fail		; 

	jmp.n	CP
	addu	E,	OldE,	0


;
; Code for Builtin Atom/1
;
	global	_wm_atom
_wm_atom:

_atom1:

	bb1	BGND,	A1,	_atom2		; dereference A1
	ld	tmp1,	A1,	BIAS
	cmp	tmp2,	tmp1,	A1
	bb0.n	eq,	tmp2,	_atom1
	addu	A1,	tmp1,	0
;
; A1 is a variable.
;
	jmp	Fail

;
; A1 is non-variable.
;
_atom2:

	bb0	BSYM,	A1,	_fail		; atom?

	jmp.n	CP
	addu	E,	OldE,	0


;
; Code for Builtin Nonvar/1
;
	global	_wm_nonvar
_wm_nonvar:

_nonvar1:

	bb1	BGND,	A1,	_nonvar2		; dereference A1
	ld	tmp1,	A1,	BIAS
	cmp	tmp2,	tmp1,	A1
	bb0.n	eq,	tmp2,	_nonvar1
	addu	A1,	tmp1,	0
;
; A1 is a variable.
;
	jmp	Fail

;
; A1 is non-variable.
;
_nonvar2:

	jmp.n	CP
	addu	E,	OldE,	0


;
; Code for Builtin Var/1
;
	global	_wm_var
_wm_var:

_var1:

	bb1	BGND,	A1,	_fail		; dereference A1
	ld	tmp1,	A1,	BIAS
	cmp	tmp2,	tmp1,	A1
	bb0.n	eq,	tmp2,	_var1
	addu	A1,	tmp1,	0
;
; A1 is a variable.
;
	jmp.n	CP
	addu	E,	OldE,	0


;
; Code for Builtin Eq/2
;
	global	_wm_eq
_wm_eq:

_eq1:

	bb1	BGND,	A1,	_eq2		; dereference A1
	ld	tmp1,	A1,	BIAS
	cmp	tmp2,	tmp1,	A1
	bb0.n	eq,	tmp2,	_eq1
	addu	A1,	tmp1,	0
_eq2:
	bb1	BGND,	A2,	_eq3		; dereference A2
	ld	tmp1,	A2,	BIAS
	cmp	tmp2,	tmp1,	A2
	bb0.n	eq,	tmp2,	_eq2
	addu	A2,	tmp1,	0
_eq3:
	cmp	tmp1,	A1,	A2		; eq(A1,A2)?
	bb0	eq,	tmp1,	_fail		;

	jmp.n	CP
	addu	E,	OldE,	0

;
; Code for Builtin Neq/2
;
	global	_wm_noneq
_wm_noneq:

_neq1:

	bb1	BGND,	A1,	_neq2		; dereference A1
	ld	tmp1,	A1,	BIAS
	cmp	tmp2,	tmp1,	A1
	bb0.n	eq,	tmp2,	_neq1
	addu	A1,	tmp1,	0
_neq2:
	bb1	BGND,	A2,	_neq3		; dereference A2
	ld	tmp1,	A2,	BIAS
	cmp	tmp2,	tmp1,	A2
	bb0.n	eq,	tmp2,	_neq2
	addu	A2,	tmp1,	0
_neq3:
	cmp	tmp1,	A1,	A2		; neq(A1,A2)?
	bb1	eq,	tmp1,	_fail		;

	jmp.n	CP
	addu	E,	OldE,	0

	data
