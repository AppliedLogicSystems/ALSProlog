#include "assembly.88k"

	text


;
; Creation:  Brian Keith Short  May 1988
;
;	Copyright (c) 1989 Motorola, Inc.
;	Copyright (c) 1989 Applied Logic Systems, Inc.
;
; unify.s --  code for the unifier
;
; To call the unifier, push the stack, then save what is necessary.
; The 4-word frame is not popped or restored on return.  To restore,
; reload the appropriate registers, and pop the stack.
;
; The stack grows toward lower addresses.  Pushing decrements the
; address, popping increments.  The 4 values saved are the return
; address, an arg count (if needed), and pointers to the base of
; the object being unified.
;
; Modified: Scott Medeiros 	Sep 1992	big structures support
;
;  REGISTERS
;
;    UArg1	first argument
;    UArg2	second argument
;    r1		return address
;    tmp1	safe temporary
;    tmp2	safe temporary
;
	align	16

	global _wm_unify
_wm_unify:

	global	unify
unify:

_u1:       
	bb1	BGND,	UArg1,	_ugnd1			; drf UArg1
	ld	tmp1,	UArg1,	BIAS			;
	cmp	tmp2,	tmp1,	UArg1			;
	bb0.n	eq,	tmp2,	_u1			;
	addu	UArg1,	tmp1,	0			;
;
; UArg1 is a variable
;
_u2:
	bb1	BGND,	UArg2,	_ugnd2			; drf UArg2
	ld	tmp1,	UArg2,	BIAS			;
	cmp	tmp2,	tmp1,	UArg2			;
	bb0.n	eq,	tmp2,	_u2			;
	addu	UArg2,	tmp1,	0			;
;
; Both UArg1 and UArg2 are variables.
;
	cmp	tmp1,	UArg1,	UArg2
	bb1	eq,	tmp1,	_uret			; if(Arg1=Arg2) ret
	bb0	lo,	tmp1,	_E2			; if(Arg1<Arg2)

	cmp	tmp1,	UArg1,	HeapBase		; if heap?(Arg1)
	bb0	hs,	tmp1,	_E1			; 

	cmp	tmp1,	UArg2,	HB			;
	bb1.n	hs,	tmp1,	_uret			;
	st	UArg1,	UArg2,	BIAS			; UArg2 := UArg1

	subu	TR,	TR,	4			; trail
	jmp.n	r1					; return
	st	UArg2,	TR,	0			;

_E1:							; env/env env/heap
	cmp	tmp1,	UArg1,	SPB			;
	bb1.n	lo,	tmp1,	_uret			;
	st	UArg2,	UArg1,	BIAS			; UArg1 := UArg2
	subu	TR,	TR,	4			; trail
	jmp.n	r1					; return
	st	UArg1,	TR,	0			;

_E2:							; Arg1 > Arg2
	cmp	tmp1,	UArg2,	HeapBase		; if heap?(Arg2)
	bb0	lo,	tmp1,	_E3			;

	cmp	tmp1,	UArg2,	SPB			; Trail Check
	bb1.n	lo,	tmp1,	_uret			;
	st	UArg1,	UArg2,	BIAS			; UArg2 := UArg1
	subu	TR,	TR,	4			; trail
	jmp.n	r1					; return
	st	UArg2,	TR,	0			;

_E3:							; heap/heap
	cmp	tmp1,	UArg1,	HB			;
	bb1.n	hs,	tmp1,	_uret			;
	st	UArg2,	UArg1,	BIAS			; UArg1 := UArg2

	subu	TR,	TR,	4			; trail
	jmp.n	r1					; return
	st	UArg1,	TR,	0			;
;
; UArg1 is nonvar.
;
_ugnd1:

	bb1	BGND,	UArg2,	_ugnd12			; drf UArg2
	ld	tmp1,	UArg2,	BIAS			;
	cmp	tmp2,	tmp1,	UArg2			;
	bb0.n	eq,	tmp2,	_ugnd1			;
	addu	UArg2,	tmp1,	0			;
;
; UArg1 is nonvar, UArg2 is var -- bind 2
;
	cmp	tmp1,	UArg2,	HB			; trail check
	bb1.n	hs,	tmp1,	_uret			;
	st	UArg1,	UArg2,	BIAS			; bind var 1

	cmp	tmp1,	UArg2,	SPB			;
	bb1	lo,	tmp1,	_uret			;
	subu	TR,	TR,	4			;
	jmp.n	r1					; return
	st	UArg2,	TR,	0			; trail var 1
;
; UArg1 is var, UArg2 is nonvar -- bind 1
;
_ugnd2:

	cmp	tmp1,	UArg1,	HB			; trail check
	bb1.n	hs,	tmp1,	_uret			;
	st	UArg2,	UArg1,	BIAS			; bind var 1

	cmp	tmp1,	UArg1,	SPB			;
	bb1	lo,	tmp1,	_uret			;
	subu	TR,	TR,	4			;
	jmp.n	r1					; return
	st	UArg1,	TR,	0			; trail var 1

_uret:
	jmp	r1					; return

;
; Both UArg1 and UArg2 are nonvars.
;
_ugnd12:
	cmp	tmp1,	UArg1,	UArg2			;
	bb1	eq,	tmp1,	_uret			;

	and	tmp2,	UArg1,	UArg2			;
	bb1	BLIST,	tmp2,	_ulist12		; both lists?
	bb1	BSTRC,	tmp2,	_ustruct12		; both structures?
	bb1	BUIA,	tmp2,	_uUIA12			; both UIA's?

	bb1	BUIA,	UArg1,	_uuia_sym		; arg1 UIA?

	bb0	BUIA,	UArg2,	_fail			; arg2 UIA?

;
; Match symbol with uia.
;
_usym_uia:
	bb0	BSYM,	UArg1,	_fail			; 
	addu	tmp1,	UArg1,	0			; exchange them
	addu	UArg1,	UArg2,	0			;
	addu	UArg2,	tmp1,	0			;
;
; Match uia with symbol.
;
_uuia_sym:
	bb0	BSYM,	UArg2,	_fail			; 
	clr	UArg1,	UArg1,	6<26>			;
;
; Probe_token gets the token for the string pointed to by UArg1
;
	subu	SP,	SP,	8
	st	r1,	SP,	BIAS

	bsr.n	_Probe_token				; get the token
	addu	UArg1,	UArg1,	BIAS+4			; jump the fence

	ld	r1,	SP,	BIAS
	addu	SP,	SP,	8

	or.u	UArg1,	UArg1,	TSYM			; put symbol tag on

	cmp	tmp1,	UArg1,	UArg2			; compare symbols
	bb0	eq,	tmp1,	_fail

	jmp	r1					; return

;
; Match two UIA's.  The fences and words are matched.  It is assumed
; that the fence contains a count of words between the fences plus one.
;
; Note: On entry, the UIA's may be either numeric or symbolic.
;    -- tmp2 must be set to the logical AND of the two tags
;
_uUIA12:						; UIA1/UIA2

	bb1.n	BSYM,	tmp2,	_uUIA12top		; symbolic?
	clr	UArg1,	UArg1,	6<26>			;  UIA 1 address

	bb0	BNUM,	tmp2,	_fail			; numeric?

_uUIA12top:

	clr	UArg2,	UArg2,	6<26>			; UIA 2 address

	ld	tmp1,	UArg1,	BIAS			; first fence
	ld	tmp2,	UArg2,	BIAS			; second fence

	addu	UArg1,	UArg1,	BIAS
	addu	UArg2,	UArg2,	BIAS

	cmp	tmp1,	tmp1,	tmp2			; compare fences
	bb0	eq,	tmp1,	_fail			;

	extu	tmp1,	tmp2,	16<0>			; get word count

	subu	SP,	SP,	8			; push stack
	st	tmp3,	SP,	0x0+BIAS		;

_uUIA12topa:
	
	ld	tmp2,	UArg1[tmp1]			; get objects
	ld	tmp3,	UArg2[tmp1]			;

	subu	tmp1,	tmp1,	1			;

	cmp	tmp2,	tmp2,	tmp3			; compare objects
	bb0	eq,	tmp2,	_str_fail		;

	bcnd	gt0,	tmp1,	_uUIA12topa		;

_uUIA12done:

	ld	tmp3,	SP,	0x0+BIAS		; pop stack
	jmp.n	r1					; return
	addu	SP,	SP,	8			;

;
; Unify Lists.
;
_ulist12:

	clr	UArg1,	UArg1,	6<26>			; make addresses
	clr	UArg2,	UArg2,	6<26>			;

	subu	SP,	SP,	16			; push stack
	st	r1,	SP,	0x0+BIAS		;
	st	UArg1,	SP,	0x8+BIAS 		; 
	st	UArg2,	SP,	0xC+BIAS		;

	ld	UArg1,	UArg1,	BIAS			; 
	bsr.n	unify					; unify car's
	ld	UArg2,	UArg2,	BIAS			;

	ld	UArg1,	SP,	0x8+BIAS		; restore
	ld	UArg2,	SP,	0xC+BIAS		;
	ld	r1,	SP,	0x0+BIAS		;

	ld	UArg1,	UArg1,	4+BIAS			; unify cdr's
	ld	UArg2,	UArg2,	4+BIAS			;
	br.n	unify					; 
	addu	SP,	SP,	16			; tail recurse

;
; Unify Structures.
;
_ustruct12:

	; Big Structures mods by Scott Medeiros, 9/18/92


	subu	SP,	SP,	8			; push stack
	st	tmp3,	SP,	BIAS			; push tmp3

	clr	UArg1,	UArg1,	6<26>			; make addresses
	clr	UArg2,	UArg2,	6<26>			;

	ld	tmp1,	UArg1,	BIAS			; functor/arity 1
	ld	tmp2,	UArg2,	BIAS			; functor/arity 2

	addu	UArg1,	UArg1,	BIAS			; bias UArg1
	addu	UArg2,	UArg2,	BIAS			; bias UArg2

	cmp	tmp3,	tmp1,	tmp2			; unify funct/arity
	bb0	eq,	tmp3,	_str_fail		; restore tmp3 before failing

	extu	tmp1,	tmp1,	10<16>			; get arity
	cmp	tmp3,	tmp1,	1023			; check for escape arity
	bb0	eq,	tmp3,	1f			; OK, no big structs
	ld	tmp1,	UArg1,	4			; get big arity 1
	ld	tmp2,	UArg2,	4			; get big arity 2
	cmp	tmp3,	tmp1,	tmp2			; big arity the same?
	bb0	eq,	tmp3,	_str_fail		; restore tmp3 before failing
	clr	tmp1,	tmp2,	6<26>			; nuke integer tag
	addu	UArg1,	UArg1,	4			; bump base address
	addu	UArg2,	UArg2,	4			; bump base address

	; now restore tmp3 <ugh!>
1:	ld	tmp3,	SP,	BIAS			; pull tmp3
	addu	SP,	SP,	8			; pop the stack

	subu	tmp2,	tmp1,	1			; count arg

	bcnd	eq0,	tmp2,	_u_done			; only one arg?

	subu	SP,	SP,	0x10			; push stack

	st	UArg1,	SP,	0x8+BIAS		; 
	st	UArg2,	SP,	0xC+BIAS		;

	ld	UArg1,	UArg1[tmp1]			; Struct 1 Arg
	ld	UArg2,	UArg2[tmp1]			; Struct 2 Arg

	st	r1,	SP,	0x0+BIAS		; push old return

	bsr.n	unify					;
	st	tmp2,	SP,	0x4+BIAS		;
;
; Always return here.
;
_uarg_loop:

	ld	tmp1,	SP,	0x4+BIAS		; count
	ld	UArg1,	SP,	0x8+BIAS		; struct 1
	ld	UArg2,	SP,	0xC+BIAS		; struct 2

	subu	tmp2,	tmp1,	1			; count arg
	st	tmp2,	SP,	0x4+BIAS		; 

	ld	UArg1,	UArg1[tmp1]			; 
	bcnd.n	gt0,	tmp2,	unify			;
	ld	UArg2,	UArg2[tmp1]			;
;
; Unify the last Argument and pop the stack.
;
	ld	r1,	SP,	0x0+BIAS		; skip these
	br.n	unify					; return (all the way)
	addu	SP,	SP,	16			; --all but last
;
; Only one Argument to unify, so just do it.
;
_u_done:
	ld	UArg1,	UArg1[tmp1]			; 
	br.n	unify					; return
	ld	UArg2,	UArg2[tmp1]			;

;
; Failure Point
;
	global	_wm_fail
_wm_fail:
	global	_fail
_fail:
	jmp	Fail					; failure point

_str_fail:
	ld	tmp3,	SP,	BIAS			; pull tmp3
	jmp.n	Fail					; fail, and
	addu	SP,	SP,	8			; pop stack in delay slot

