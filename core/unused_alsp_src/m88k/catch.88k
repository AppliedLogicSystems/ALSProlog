;
; catch.88k	-- implementation of catch, throw, and abort
;	Copyright (c) 1990 Applied Logic Systems, Inc.
;
; Author: Kevin A. Buettner
; Creation:1/4/90
;

#include "assembly.88k"
#include "wint88.h"


	text

;
; wm_abort
;

	global	_wm_abort

_wm_abort:
	br.n	@throwentry
	addu	UArg1,	r0,	0	; No next clause addresses are zero

;
; wm_throw
;

	global	_wm_throw

_wm_throw:
	or.u	UArg1,	r0,	hi16(c22dat)
	ld	UArg1,	UArg1,	lo16(c22dat)
				; get the next clause address to search for
@throwentry:
	or.u	tmp1,	r0,	hi16(_wm_regidx)
	ld	tmp1,	tmp1,	lo16(_wm_regidx)
	or.u	tmp2,	r0,	hi16(_wm_regs)
	or	tmp2,	tmp2,	lo16(_wm_regs)	; get address of _wm_regs
	subu	tmp1,	tmp1,	1		; decrement value of _wm_regidx
	mak	tmp1,	tmp1,	26<6>		; shift left by six
	addu	tmp1,	tmp1,	tmp2		; add to _wm_regs value
	ld	UArg2,	tmp1,	wm_B_idx*4	; get original B and put in UArg2

@throwloop:
	cmp	tmp1,	Fail,	UArg1		; compare Fail with catch22 addr
	bb1	ne,	tmp1,	@throwcont	; continue if not same
	jmp	Fail				; else fail

@throwcont:
	ld	T1,	B,	12		; get next B
	cmp	tmp1,	T1,	UArg2		; see if at end of line
	bb1	ne,	tmp1,	@throw_untr	; branch if not
	addu	tmp2,	r0,	1		; put 1 into tmp2
	or.u	tmp1,	r0,	hi16(_wm_aborted)
	st	tmp2,	tmp1,	lo16(_wm_aborted)
						; put 1 into _wm_aborted
	jmp	Fail				; fail if at end of line

@throw_untr:
	subu	tmp1,	B,	TR
	bcnd	eq0,	tmp1,	@throw_untr_done
	subu	tmp1,	tmp1,	4
@throw_untr_loop:
	ld	tmp2,	TR,	tmp1
	subu	tmp1,	tmp1,	4
	st	tmp2,	tmp2,	BIAS
	bcnd	ge0,	tmp1,	@throw_untr_loop
@throw_untr_done:
	addu	TR,	B,	16		; set tr
	ld	Fail,	B,	0		; load Fail
	ld	HB,	B,	4		; load hb
	ld	SPB,	B,	8		; load spb
	addu	B,	T1,	0		; set B for next interation
	br.n	@throwloop
	clr	SPB,	SPB,	1<0>		; clear compaction bit


;
; wm_catch22
;

	global	_wm_catch22
_wm_catch22:
	or.u	tmp1,	r0,	hi16(c22dat)
	st	Fail,	tmp1,	lo16(c22dat)
	jmp.n	CP
	addu	E,	OldE,	0






	data
	align	4
c22dat:	word 	0

