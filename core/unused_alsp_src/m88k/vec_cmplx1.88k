#include "assembly.88k"
;
; Creation:	Craig Thornley
;		May 2, 1989
;
;	Copyright (c) 1989 Motorola, Inc.
;
; vec_cmplx1.88k contains complex vector builtins
;
; Modified:	May 4, 1989	CT	wrote vcc_div
;		When		Who	What
;
;
; vcc_add(+V1,+V2,-V3)
; vcc_sub(+V1,+V2,-V3)
; vcc_mul(+V1,+V2,-V3)
; vcc_div(+V1,+V2,-V3)
;

	global	_vcc_add
	global	_vcc_sub
	global	_vcc_mul
	global	_vcc_div
;	global	_vrc_mul

_vcc_mul:
	bsr	_get_2vecs			; get vectors in A1 and A2
	addu	UArg2,	tmp3,	tmp3		; # of words in new vector
	bsr.n	_bind_vecUArg1			; bind A3 to new vector
	addu	UArg1,	A3,	ZERO		; but first put A3 into UArg1

	addu	A1,	A1,	BIAS		; BIAS pointers
	addu	A2,	A2,	BIAS
	addu	A3,	UArg1,	ZERO		; put BIASED pointer into A3
	addu	S,	UArg2,	ZERO		; put word count in S

	; at this point A1 and A2 are biased pointers to old vectors, while
	; A3 is a biased pointer to the new vector.
	; S contains number of words in new vector

;
; Wednesday, April 26, 1989 2:40:22 PM
; Ernest Woodward,  Electrical Engineer, Motorola, Government Electronics Group
; Internal Release Version 1.0
;

	st	r25,	E,	44
	st	r24,	E,	40
	st	r23,	E,	36
	st	r22,	E,	32
	st	r21,	E,	28
	st	r20,	E,	24
	st	r19,	E,	20
	st	r18,	E,	16
	st	r17,	E,	12
	st	r16,	E,	8
	st	r15,	E,	4
	st	r14,	E,	0

; Register Usage in _vccmul subroutine:
;
; r2		S	parameter(integer)	number of words in vector
; r3		A1	parameter(address)	vector base address
; r4		A2	parameter(address)	vector base address
; r5		A3	parameter(address)	vector base address
; r6,r7		tmp1,2	sx[i].real
; r8,r9		T1,T2	sy[i].real
; r10,r11	T3,T4	sx[i].imag
; r12,r13	UArg1,2	sy[i].imag
; r14,r15		sx[i].real*sy[i].real + sx[i].imag*sy[i].imag
; r16,r17		sx[i].real*sy[i].imag - sx[i].imag*sy[i].real
; r18,r19		sx[i].real*sy[i].real
; r20,r21		sx[i].imag*sy[i].imag
; r22,r23		sx[i].real*sy[i].imag
; r24,r25		sx[i].imag*sy[i].real
;
;	_sx+0		:	upper 4 bytes of sx[0].real
;	_sx+4		:	lower 4 bytes of sx[0].real
;	_sx+8		:	upper 4 bytes of sx[0].imag
;	_sx+12	:	lower 4 bytes of sx[0].imag
;	. . .
;	_sx+(n*4-4)	:	hi32(sx[n-1].real)
;	_sx+(n*4-3)	:	lo32(sx[n-1].real)
;	_sx+(n*4-2)	:	hi32(sx[n-1].imag)
;	_sx+(n*4-1)	:	lo32(sx[n-1].imag)
;
; The following MC88100 Assembly code is a straight forward, top-down 
; approach to calculating the complex dyadic multiply.  The
; number of vector elements is multiplied by 4 to calculate the number of 4
; byte words in a complex vector.  The vector elements are traversed in a
; bottom-up style with respect to array index values, i.e. use complex array
; element n-1, n-2, ... , 3, 2, 1, 0.  The S register is used as a word offset
; from the vector base address in a load scale instruction.  Both vector
; elements are loaded into the registers according to the table of register
; usage listed above.  The elements are multiplied with 4 fmul.ddd instructions.
; The multiplied results are placed in registers 18-25 and then added to
; generate the two results:
;
;	temp.real = sx[i].real*sy[i].real - sx[i].imag*sy[i].imag
;	temp.imag = sx[i].real*sy[i].imag + sx[i].imag*sy[i].real
;
; Each element product is then stored in the destination array, sz[i].


	sub	S,	S,	1		; sub to create 0 index offset
	or	r14,	ZERO,	ZERO		; 0 accumulator registers, i.e.
	or	r15,	ZERO,	ZERO		; 0 answer.real and answer.imag
	or	r16,	ZERO,	ZERO
	or	r17,	ZERO,	ZERO

@vccmulloop:
	ld	T4,	A1[S]			; load lo32(sx[i].imag)
	ld	UArg2,	A2[S]			; load lo32(sy[i].imag)
	sub	S,	S,	1		; decrement vector index/counter
	ld	T3,	A1[S]			; load hi32(sx[i].imag)
	ld	UArg1,	A2[S]			; load hi32(sy[i].imag)
	sub	S,	S,	1		; decrement vector index/counter
	ld	tmp2,	A1[S]			; load lo32(sx[i].real)
	ld	T2,	A2[S]			; load lo32(sy[i].real)
	sub	S,	S,	1		; decrement vector index/counter
	ld	tmp1,	A1[S]			; load hi32(sx[i].real)
	ld	T1,	A2[S]			; load hi32(sy[i].real)
	add	S,	S,	3		; set vector index for store 

	fmul.ddd r18,	tmp1,	T1		; sx[i].real*sy[i].real
	fmul.ddd r20,	T3,	UArg1		; sx[i].imag*sy[i].imag
	fmul.ddd r22,	tmp1,	UArg1		; sx[i].real*sy[i].imag
	fmul.ddd r24,	T3,	T1		; sx[i].imag*sy[i].real

	fsub.ddd r14,	r18,	r20		; temp.real
	fadd.ddd r16,	r22,	r24		; temp.imag
	st	r17,	A3[S]			; lo32(sz[i].imag)
	sub	S,	S,	1		; walk down with index/counter
	st	r16,	A3[S]			; hi32(sz[i].imag)
	sub	S,	S,	1
	st	r15,	A3[S]			; lo32(sz[i].real)
	sub	S,	S,	1
	st	r14,	A3[S]			; hi32(sz[i].real)
	bcnd.n	gt0,	S,	@vccmulloop
	sub	S,	S,	1


	ld	r25,	E,	44
	ld	r24,	E,	40		; reset called registers
	ld	r23,	E,	36
	ld	r22,	E,	32
	ld	r21,	E,	28
	ld	r20,	E,	24
	ld	r19,	E,	20
 	ld	r18,	E,	16
	ld	r17,	E,	12
	ld	r16,	E,	8
	ld	r15,	E,	4
	ld	r14,	E,	0		; reset called registers
	
	jmp.n	CP
	addu	E,	OldE,	ZERO	



_vcc_add:
	bsr	_get_2vecs			; get vectors in A1 and A2
	addu	UArg2,	tmp3,	tmp3		; # of words in new vector
	bsr.n	_bind_vecUArg1			; bind A3 to new vector
	addu	UArg1,	A3,	ZERO		; but first put A3 into UArg1

	addu	A1,	A1,	BIAS		; BIAS pointers
	addu	A2,	A2,	BIAS
	addu	A3,	UArg1,	ZERO		; put BIASED pointer into A3
	addu	S,	UArg2,	ZERO		; put word count in S

	; at this point A1 and A2 are biased pointers to old vectors, while
	; A3 is a biased pointer to the new vector.
	; S contains number of words in new vector

	subu	SP,	SP,	16		; push stack
	st	r17,	SP,	12+BIAS
	st	r16,	SP,	8+BIAS
	st	r15,	SP,	4+BIAS
	st	r14,	SP,	0+BIAS

; Register Usage in _vcc_add subroutine:
;
; r2		S	parameter(integer)	number of words in vector
; r3		A1	parameter(address)	vector base address
; r4		A2	parameter(address)	vector base address
; r5		A3	parameter(address)	vector base address
; r6,r7		tmp1,2	sx[i].real
; r8,r9		T1,T2	sy[i].real
; r10,r11	T3,T4	sx[i].imag
; r12,r13	UArg1,2	sy[i].imag
; r14,r15		sx[i].real + sy[i].real
; r16,r17		sx[i].imag + sy[i].imag
;
;	temp.real = sx[i].real + sy[i].real 
;	temp.imag = sx[i].imag + sy[i].imag
;


	sub	S,	S,	1		; sub to create 0 index offset
	or	r14,	ZERO,	ZERO		; 0 accumulator registers, i.e.
	or	r15,	ZERO,	ZERO		; 0 answer.real and answer.imag
	or	r16,	ZERO,	ZERO
	or	r17,	ZERO,	ZERO

@vccaddloop:
	ld	T4,	A1[S]			; load lo32(sx[i].imag)
	ld	UArg2,	A2[S]			; load lo32(sy[i].imag)
	sub	S,	S,	1		; decrement vector index/counter
	ld	T3,	A1[S]			; load hi32(sx[i].imag)
	ld	UArg1,	A2[S]			; load hi32(sy[i].imag)
	sub	S,	S,	1		; decrement vector index/counter
	ld	tmp2,	A1[S]			; load lo32(sx[i].real)
	ld	T2,	A2[S]			; load lo32(sy[i].real)
	sub	S,	S,	1		; decrement vector index/counter
	ld	tmp1,	A1[S]			; load hi32(sx[i].real)
	ld	T1,	A2[S]			; load hi32(sy[i].real)
	add	S,	S,	3		; set vector index for store 

	fadd.ddd r14,	tmp1,	T1		; add sx[i].real & sy[i].real
	fadd.ddd r16,	T3,	UArg1		; add sx[i].imag & sy[i].imag

	st	r17,	A3[S]			; lo32(sz[i].imag)
	sub	S,	S,	1		; walk down with index/counter
	st	r16,	A3[S]			; hi32(sz[i].imag)
	sub	S,	S,	1
	st	r15,	A3[S]			; lo32(sz[i].real)
	sub	S,	S,	1
	st	r14,	A3[S]			; hi32(sz[i].real)
	bcnd.n	gt0,	S,	@vccaddloop
	sub	S,	S,	1
	

	ld	r17,	SP,	12+BIAS
	ld	r16,	SP,	8+BIAS
	ld	r15,	SP,	4+BIAS
	ld	r14,	SP,	0+BIAS		; reset called registers
	addu	SP,	SP,	16		; reset stack pointer
	
	jmp.n	CP
	addu	E,	OldE,	ZERO	





_vcc_sub:
	bsr	_get_2vecs			; get vectors in A1 and A2
	addu	UArg2,	tmp3,	tmp3		; # of words in new vector
	bsr.n	_bind_vecUArg1			; bind A3 to new vector
	addu	UArg1,	A3,	ZERO		; but first put A3 into UArg1

	addu	A1,	A1,	BIAS		; BIAS pointers
	addu	A2,	A2,	BIAS
	addu	A3,	UArg1,	ZERO		; put BIASED pointer into A3
	addu	S,	UArg2,	ZERO		; put word count in S

	; at this point A1 and A2 are biased pointers to old vectors, while
	; A3 is a biased pointer to the new vector.
	; S contains number of words in new vector

	subu	SP,	SP,	16		; push stack
	st	r17,	SP,	12+BIAS
	st	r16,	SP,	8+BIAS
	st	r15,	SP,	4+BIAS
	st	r14,	SP,	0+BIAS

; Register Usage in _vcc_sub subroutine:
; see _vcc_add
;
;	temp.real = sx[i].real - sy[i].real 
;	temp.imag = sx[i].imag - sy[i].imag
;


	sub	S,	S,	1		; sub to create 0 index offset
	or	r14,	ZERO,	ZERO		; 0 accumulator registers, i.e.
	or	r15,	ZERO,	ZERO		; 0 answer.real and answer.imag
	or	r16,	ZERO,	ZERO
	or	r17,	ZERO,	ZERO

@vccsubloop:
	ld	T4,	A1[S]			; load lo32(sx[i].imag)
	ld	UArg2,	A2[S]			; load lo32(sy[i].imag)
	sub	S,	S,	1		; decrement vector index/counter
	ld	T3,	A1[S]			; load hi32(sx[i].imag)
	ld	UArg1,	A2[S]			; load hi32(sy[i].imag)
	sub	S,	S,	1		; decrement vector index/counter
	ld	tmp2,	A1[S]			; load lo32(sx[i].real)
	ld	T2,	A2[S]			; load lo32(sy[i].real)
	sub	S,	S,	1		; decrement vector index/counter
	ld	tmp1,	A1[S]			; load hi32(sx[i].real)
	ld	T1,	A2[S]			; load hi32(sy[i].real)
	add	S,	S,	3		; set vector index for store 

	fsub.ddd r14,	tmp1,	T1		; sx[i].real & sy[i].real
	fsub.ddd r16,	T3,	UArg1		; sx[i].imag & sy[i].imag

	st	r17,	A3[S]			; lo32(sz[i].imag)
	sub	S,	S,	1		; walk down with index/counter
	st	r16,	A3[S]			; hi32(sz[i].imag)
	sub	S,	S,	1
	st	r15,	A3[S]			; lo32(sz[i].real)
	sub	S,	S,	1
	st	r14,	A3[S]			; hi32(sz[i].real)
	bcnd.n	gt0,	S,	@vccsubloop
	sub	S,	S,	1
	

	ld	r17,	SP,	12+BIAS
	ld	r16,	SP,	8+BIAS
	ld	r15,	SP,	4+BIAS
	ld	r14,	SP,	0+BIAS		; reset called registers
	addu	SP,	SP,	16		; reset stack pointer
	
	jmp.n	CP
	addu	E,	OldE,	ZERO	





	; vcc_div This was actually kinda fun.  To compute the elements of
	; the resulting vector of the diadic division of the first two vectors
	; I used the following:
	;
	;	(a + bi)	(a + bi) (c - di)	ac - adi + bci -bdii
	;	-------- =	-------- -------- =	--------------------
	;	(c + di)	(c + di) (c - di)	cc + dd
	;
	;	(ac + bd)   (bc - ad)i
	; =	--------- + ----------
	;	(cc + dd)   (cc + dd)

_vcc_div:
	bsr	_get_2vecs			; get vectors in A1 and A2
	addu	UArg2,	tmp3,	tmp3		; # of words in new vector
	bsr.n	_bind_vecUArg1			; bind A3 to new vector
	addu	UArg1,	A3,	ZERO		; but first put A3 into UArg1

	addu	A1,	A1,	BIAS		; BIAS pointers
	addu	A2,	A2,	BIAS
	addu	A3,	UArg1,	ZERO		; put BIASED pointer into A3
	addu	S,	UArg2,	ZERO		; put word count in S

	; at this point A1 and A2 are biased pointers to old vectors, while
	; A3 is a biased pointer to the new vector.
	; S contains number of words in new vector


	subu	SP,	SP,	32		; push stack
	st	r21,	SP,	28+BIAS
	st	r20,	SP,	24+BIAS
	st	r19,	SP,	20+BIAS
	st	r18,	SP,	16+BIAS
	st	r17,	SP,	12+BIAS
	st	r16,	SP,	8+BIAS
	st	r15,	SP,	4+BIAS
	st	r14,	SP,	0+BIAS

; Register Usage in _vccdiv subroutine:
;
; r2		S	number of words in vector
; r3		A1	old vector base address
; r4		A2	old vector base address
; r5		A3	new vector base address
; r6,r7		tmp1,2	x.real a
; r8,r9		T1,T2	y.real c
; r10,r11	T3,T4	x.imag b
; r12,r13	UArg1,2	y.imag d

	sub	S,	S,	1		; sub to create 0 index offset
	or	r14,	ZERO,	ZERO		; 0 accumulator registers, i.e.
	or	r15,	ZERO,	ZERO		; 0 answer.real and answer.imag
	or	r16,	ZERO,	ZERO
	or	r17,	ZERO,	ZERO

@vccdivloop:
	ld	T4,	A1[S]			; load lo32(x.imag)
	ld	UArg2,	A2[S]			; load lo32(y.imag)
	sub	S,	S,	1		; decrement vector index/counter
	ld	T3,	A1[S]			; load hi32(x.imag)
	ld	UArg1,	A2[S]			; load hi32(y.imag)
	sub	S,	S,	1		; decrement vector index/counter
	ld	tmp2,	A1[S]			; load lo32(x.real)
	ld	T2,	A2[S]			; load lo32(y.real)
	sub	S,	S,	1		; decrement vector index/counter
	ld	tmp1,	A1[S]			; load hi32(x.real)
	ld	T1,	A2[S]			; load hi32(y.real)
	add	S,	S,	3		; set vector index for store 

	fmul.ddd r18,	T1,	T1		; cc
	fmul.ddd r20,	UArg1,	UArg1		; dd
	fadd.ddd r18,	r18,	r20		; cc + dd
	
	fmul.ddd r14,	tmp1,	T1		; ac
	fmul.ddd r16,	T3,	UArg1		; bd
	fadd.ddd r14,	r14,	r16		; ac + bd
	fdiv.ddd r14,	r14,	r18		; (ac + bd)/(cc + dd)

	fmul.ddd r16,	T3,	T1		; bc
	fmul.ddd r20,	tmp1,	UArg1		; ad
	fsub.ddd r16,	r16,	r20		; bc - ad
	fdiv.ddd r16,	r16,	r18		; (bc - ad)/(cc + dd)i

	st	r17,	A3[S]			; lo32(sz[i].imag)
	sub	S,	S,	1		; walk down with index/counter
	st	r16,	A3[S]			; hi32(sz[i].imag)
	sub	S,	S,	1
	st	r15,	A3[S]			; lo32(sz[i].real)
	sub	S,	S,	1
	st	r14,	A3[S]			; hi32(sz[i].real)
	bcnd.n	gt0,	S,	@vccdivloop
	sub	S,	S,	1


	ld	r21,	SP,	28+BIAS
	ld	r20,	SP,	24+BIAS
	ld	r19,	SP,	20+BIAS
 	ld	r18,	SP,	16+BIAS
	ld	r17,	SP,	12+BIAS
	ld	r16,	SP,	8+BIAS
	ld	r15,	SP,	4+BIAS
	ld	r14,	SP,	0+BIAS		; reset called registers
	addu	SP,	SP,	32		; reset stack pointer
	
	jmp.n	CP
	addu	E,	OldE,	ZERO	

#ifdef notdef
	; vrc_mul(+RealVec,+ComplexVec,-VectorDyadicProd) computes the
	; VectorDyadicProd of RealVec and ComplexVec.  Componentwise
	; multiply the complex element by the real element.

_vrc_mul:
	; we can't use _get_2vecs, cuz it fails if the vectors aren't the same length.
	bsr	_get_vecA2			; A2 points at first ComplexVec el
						; tmp3 is the length in doubles
	mak	UArg2,	tmp3,	0<1>		; UArg2 := word len for call below
	bsr.n	_bind_vecUArg1			; Create output vector, UArg1 -->
	or	UArg1,	A3,	ZERO
	bsr	_get_vecA1			; finally dereference RealVec
						; A1 points at first RealVec el,	
						; A3 is the len of this vector in #real els
	extu	tmp1,	tmp3,	31<1>		; div by 2 to get complex vector element count
	cmp	tmp1,	tmp1,	A3		; vector lengths the same?
	bb1	ne,	tmp1,	@cmplx_fail	; if not, fail

	; Register State
	; A1 : points to first el of RealVec (biased)
	; A2 : points to first el of ComplexVec (biased)
	; A3 : len(RealVec) in #words
	; tmp3 : len(ComplexVec) in #doubles
	; UArg1 : points to first el of OutputVec (biased)
	; UArg2: word len of OutputVec

	; don't use scaled loads and stores to avoid incrementing the offset a lot.
	; however, we must now increment 3 base addresses and a loop controller

2:	ld	tmp1,	A1,	ZERO		; MSW of Real
	ld	tmp2,	A1,	4		; LSW of Real
	subu	UArg2,	UArg2,	4		; decrement word count of new vector
						; for next iteration

	ld	T1,	A2,	ZERO		; MSW of Real Part of Complex
	ld	T2,	A2,	4		; LSW of Real Part of Complex
	fmul.ddd T1,	T1,	tmp1		; multiply Real Part by Real

	ld	T3,	A2,	8		; MSW of Imaginary Part
	ld	T4,	A2,	12		; LSW of Imaginary Part
	fmul.ddd T3,	T3,	tmp1		; multiply Imag Part by Real
		
	st	T1,	UArg1,	ZERO
	st	T2,	UArg1,	4
	addu	A2,	A2,	16		; bump complex vector +16 bytes
						; for next iteration
	st	T3,	UArg1,	8
	st	T4,	UArg1,	12

	addu	UArg1,	UArg1,	16		; bump new vector + 16 bytes
	bcnd.n	gt0,	UArg2,	2b		; when 0, we're done
	addu	A1,	A1,	8		; bump real vector +8 bytes

	jmp.n	CP				; that's all, folks
	addu	E,	OldE,	ZERO		; reset env
#endif



@cmplx_fail:
	jmp	Fail
