#include "assembly.88k"

;
; Creation:	Craig Thornley
;		April 25, 1989
;
;	Copyright (c) 1989 Motorola, Inc.
;
; vec_reals2.88k contains several real vector builtins
;
; Modified:	April 27, 1989	CT	changed name to vec_reals2.88k
;					added vr_neg
;		May 1, 1989	CT	made _bind_vecUArg1 global vector binder
;					added vrsr_mul
;		May 2, 1989	CT	changed vget2_args to get_2vecs and
;					made it global
;		May 9, 1989	EW	optimization pass 1
;		Feb 2, 1990	Kev	removed foolish dereference loop just
;					before call to _wm_g_dbl and inlined
;					part of the dot product code
;		March 7, 1992	SM	added get_vecA2
;		March 11, 1992	SM	fixed bug noted by Kev in vrr_dot, when 
;					len(vectors)=1
;		March 12, 1992	SM	Save TR with BIAS in vrr_dot
;					added vr_select
;		When		Who	What
;
;
; vrr_dot(V1,V2,S)
;
; vr_sum(V,S)
; vr_mag2(V,S)
; vr_mag(V,S)
; vr_neg(V1,V2)
;
; vrsr_mul(V1,S,V2)
; vr_select(+Offset,+V1,+Increment,-V2)
; 

	text
	global	_vrr_dot
	global	_vr_sum
	global	_vr_mag2
	global	_vr_neg
	global	_vrsr_mul
	global	_vr_select

_vrr_dot:	
	bsr	_get_2vecs			; deref A1 and A2

; Ernie's dot product code

	;
	; Revision: 2/6/90 by Kev:
	;	We wish to free up r14, r15, and r16 for usage in the dot
	;	product code below.
	;
	;	These registers are OldE, CP, and TR (respectively).  The
	;	old code pushed all of these onto the stack.  But we will
	;	be branching to _wm_g_dbl at the end of this code which
	;	does a return (jmp r1).  Therefore, we can put OldE into E,
	;	and CP into r1.  Unfortunately, we need to still save TR,
	;	but we can do so without modifying the stack pointer since
	;	it has a bias built into it.
	; 	3/12/92 (SM) - This is an unsafe assumption, use BIAS, but we still
	;		       needn't modify SP. 

	st		TR,	SP,	0+BIAS-4	; Save r16 (TR) for later
	addu		E,	OldE,	0	; Free OldE by moving it to E
	addu		r1,	CP,	0	; Free CP by moving it to r1

;_n tmp3	r2				N, number of elements in vector
;_sx A1		r3	parameter(address)	vector base address
;_sy A2		r4	parameter(address)	vector base address
;
;	Register Usage in _dot subroutine:
;
; A1		r3	_sx+0 
; UArg1		r5	_sx+4
; A2		r4	_sy+0
; UArg2		r6	_sy+4
; r16		r7	index, i
; T2,T3		r8,r9	double precision number sx[i]
; T4,S		r10,r11	double precision number sy[i]
; r14, r15	r12,r13	storage of fmul results, fmul.ddd  r12,r8,r10
; tmp1,tmp2	r14,r15	answer, value to be returned in function call
;
; Modification History
;		When		Who	What
; Modified:	May 9, 1989	EW	The code entered at Prolog installation
;	was from my previously built optimized code files. Craig Thornley did
;	find that the silicon bug related to the fmul.ddd instruction was
;	occuring in this module.  A tb1 instruction was used at installation
;	to synchronize the MC88000 functional units and allow this Prolog
;	module to generate correct answers. The optimization pass 1 removed the
;	tb1 instruction and loaded the second register of the double precision
;	source operands before the first. This will circumvent the silicon bug
;	in a more timely fashion than the tb1, but one stall is present in this
;	code while using this technique.

	addu		A1,	A1,	BIAS	; compensate for BIAS
	addu		A2,	A2,	BIAS

	ld		T2,	A1,	r0	; load sx[i]
	or		r16,	r0,	r0	; zero index, i
	ld		T3,	A1,	4	; load sx[i]
	addu		UArg1,	A1,	4	; A1 <- _sx+4
	ld		T4,	A2,	r0	; load sy[i]
	addu		UArg2,	A2,	4	; UArg2 <- _sy+4
	ld		S,	A2,	4	; load sy[i]
	subu		tmp3,	tmp3,	1	; set n = n-1
	or		tmp1,	r0,	r0	; zero double word answer
	bcnd.n		eq0,	tmp3,	2f	; for vectors of length one, skip the loop
	or		tmp2,	r0,	r0

@dp_loop:

	fmul.ddd	r14,	T2,	T4	; r14,r15 <- sx[i] * sy[i]
	addu		r16,	r16,	8	; increment index, i
	ld		T2,	A1,	r16	; load sx[i]
	subu		tmp3,	tmp3,	1	; decrement element count, n
	ld		T3,	UArg1,	r16	; load sx[i]
	ld		S,	UArg2,	r16	; load sy[i]
	ld		T4,	A2,	r16	; load sy[i]
	bcnd.n		ne0,	tmp3,	@dp_loop
	fadd.ddd	tmp1,	tmp1,	r14	; add results to summation


2:	fmul.ddd	r14,	T2,	T4	; r14,r15 <- sx[n] * sy[n]
	fadd.ddd	tmp1,	tmp1,	r14	; tmp1,tmp2 <- sum + r14,r15

	ld		TR,	SP,	0+BIAS-4	; reload TR...
						; CP and OldE have already
						; been moved to r1 and E
						; which is where we want them
						; so they don't need to be
						; restored.
	br.n	_wm_g_dbl			; Branch to the double matcher
	or	UArg1,	A3,	ZERO		; whilst putting  val into UArg1



	global	_get_2vecs

_get_2vecs:

@vderefA1:
	bb1	BGND,	A1,	@vderefA2	; if ground get 2nd arg
	ld	tmp1,	A1,	BIAS		; dereference
	cmp	A1,	A1,	tmp1		; compare the two
	bb0.n	eq,	A1,	@vderefA1	; if not the same go again
	addu	A1,	tmp1,	ZERO		; put value back into A1

@vderefA2:
	bb1	BGND,	A2,	@somewhere	; if ground get out
	ld	tmp1,	A2,	BIAS		; dereference
	cmp	A2,	A2,	tmp1		; compare the two
	bb0.n	eq,	A2,	@vderefA2	; if not the same go again
	addu	A2,	tmp1,	ZERO		; put value back into A2

@somewhere:
	and	tmp1,	A1,	A2		; only for the tag
	bb0	BNUM,	tmp1,	@vec_fail	; are they NUMs?
	bb0.n	BUIA,	tmp1,	@vec_fail	; floats?
	clr	A1,	A1,	6<26> 		; get address of first
	clr	A2,	A2,	6<26>		; get address of second
	ld	tmp1,	A1,	BIAS		; load fence #1
	ld	tmp2,	A2,	BIAS		; load fence #2
	cmp	tmp2,	tmp1,	tmp2		; compare the two
	bb1	ne,	tmp2,	@vec_fail	; different lengths, fail

	clr	tmp3,	tmp1,	6<26>		; get word count to next fence 
	addu	A1,	A1,	4		; jump the fence
	addu	A2,	A2,	4		; ditto

	subu	tmp3,	tmp3,	1		; #elems = (tmp3-1)/2

; tmp3 has # of words in vector 
; A1 has address of first vector (first element)
; A2 has address of second vector (first element)
	jmp.n	r1
	ext	tmp3,	tmp3,	31<1>		; div 2


	; _get_vecA1 dereferences A1 and fails if it is not a vector.
	; It returns with A1 containing a pointer (unbiased) to the first 
	; element and A3 containing a count of double words in vector

	global	_get_vecA1

_get_vecA1:
@vsderefA1:
	bb1	BGND,	A1,	@vs_grnd1	; if ground get out
	ld	tmp1,	A1,	BIAS		; dereference
	cmp	A1,	A1,	tmp1		; compare the two
	bb0.n	eq,	A1,	@vsderefA1	; if not same go again
	addu	A1,	tmp1,	ZERO		; but first put back into A1
	jmp	Fail				; unbound, so fail

@vs_grnd1:
	bb0	BNUM,	A1,	@vec_fail	; fail if not a number
	bb0	BUIA,	A1,	@vec_fail	; or not a float
	clr	A1,	A1,	6<26>		; get address of fence
	ld	tmp1,	A1,	BIAS		; load fence
	addu	A1,	A1,	BIAS+4		; add BIAS & jump the fence
	clr	A3,	tmp1,	6<26>		; get word count to next fence
	subu	A3,	A3,	1		; words in vector
	jmp.n	r1
	extu	A3,	A3,	31<1>		; divide by 2 for elements


	; _get_vecA2

	; _get_vecA2 dereferences A2 and fails if it is not a vector.
	; It returns with A2 containing a pointer (unbiased) to the first 
	; element and tmp3 containing a count of double words in vector

	global	_get_vecA2

_get_vecA2:
	deref	A2,	@gva2
	fail

@gva2:
	bb0	BNUM,	A2,	@vec_fail	; fail if not a number
	bb0	BUIA,	A2,	@vec_fail	; or not a float
	clr	A2,	A2,	6<26>		; get address of fence
	ld	tmp4,	A2,	BIAS		; load fence
	addu	A2,	A2,	BIAS+4		; add BIAS & jump the fence
	clr	tmp1,	tmp4,	6<26>		; get word count to next fence
	subu	tmp1,	tmp1,	1		; words in vector
	jmp.n	RET
	extu	tmp3,	tmp1,	31<1>		; divide by 2 for elements



_vr_sum:
	bsr	_get_vecA1			; dereference A1
	bsr	_do_vrsum			; calculate the thing ...
						; answer is in tmp1 & tmp2
	br.n	_punify_answer			; see float.88k
	or	A3,	A2,	ZERO		; put A2 into A3


	; _do_vrsum calculates the real-valued sum of a vector.
	; The address of the first element of the vector is found in A1,
	; the # of double precision numbers is found in A3, and the result of
	; the computation should end up in tmp1 and tmp2.  Since A2 contains
	; the second argument to the Prolog clause, it cannot be blasted!

_do_vrsum:

; A3		r2	n, number of elements in vector
; A1		r3	vector base address
;
; A1		r3	_sx+0
; UArg1		r4	_sx+4
; tmp1 & tmp2	r5,r6	sum of magnitudes, w
; T1 & T2	r7,r8	storage for sx[i]
;
; Modification History
;		When		Who	What
; Modified:	May 9, 1989	EW	The code entered at Prolog installation
;	was some modified version of the BLAS code which summed the absolute
;	value of double precision real-valued vector elements. The newer
;	specifications indicate that vr_sum should simply add the elements,
;	whether positive or negative.  This is a simple module and appears to
;	to be fairly optimum.
; Modified:	May 10, 1989	EW	Optimization pass2: This code uses
;	single word scaled-index loads by doubling the number of vector
;	elements (double precision numbers are two words) and subtracting one
;	from the doubled number. Note that this eliminates need of word offset
;	register with vector element count controlling loop iterations. The
;	offset register and loop count are now the same and there is one less 
;	sub instruction in the code. Note that the code is based on the last
;	element being fetched with "A3 = -1", i.e. a negative scaled-index.


	addu		UArg1,	A1,	4	; pointer to _sx+4
	mak		A3,	A3,	0<1>	; double vector index, words
	sub		A3,	A3,	1	; zero-offset index
	or		tmp1,	ZERO,	ZERO	; zero sum, w
	or		tmp2,	ZERO,	ZERO
	or		T1,	ZERO,	ZERO	; zero T1,T2
	or		T2,	ZERO,	ZERO

@vr_sumloop:

	ld		T2,	A1[A3]		; lo32(sx[i])
	sub		A3,	A3,	2	; 2 words per vector element
	ld		T1,	UArg1[A3]	; hi32(sx[i])
	bcnd.n		gt0,	A3,	@vr_sumloop
	fadd.ddd	tmp1,	tmp1,	T1	; sum( sx[i] )


	jmp		r1			; return





_vr_mag2:
	bsr	_get_vecA1			; dereference A1
	bsr	_do_vrmag2			; calculate the thing ...
						; answer is in tmp1 & tmp2
	br.n	_punify_answer			; see sca_reals.88k
	or	A3,	A2,	ZERO		; put A2 into A3



_do_vrmag2:

; A3		r2	n, number of elements in vector
; A1		r3	vector base address
;
; A1		r3	_sx+0
; UArg1		r4	_sx+4
; T1 & T2 	r5,r6	storage for sx[i]
; T3 & T4	r7,r8	storage for sx[i]*sx[i]
; tmp1 & tmp2	r9,r10	storage for anorm += sx[i]*sx[i]
; S		r11	byte index off vector base address, i
;
; Modification History
;		When		Who	What
; Modified:	May 10, 1989	EW	Optimization pass 1: Simply removed
;	the tb1 instruction and used the trick of loading low order bits 
;	before high order bits to avoid silicon bug.


	or		S,	ZERO,	ZERO	; zero index, i
	addu		UArg1,	A1,	4	; UArg1 <- _sx+4
	or		T3,	ZERO,	ZERO	; zero storage area of
	or		T4,	ZERO,	ZERO	; sx[i]*sx[i]
	or		tmp1,	ZERO,	ZERO	; zero storage area of
	or		tmp2,	ZERO,	ZERO	; anorm accumulator

@vr_mag2loop:

	ld		T2,	UArg1,	S	; load sx[i]
	ld		T1,	A1,	S	; load sx[i]
	fadd.ddd	tmp1,	T3,	tmp1	; anorm = sum( sx[i]*sx[i] )
	fmul.ddd	T3,	T1,	T1	; sx[i]*sx[i]
	subu		A3,	A3,	1	; decrement element count
	bcnd.n		ne0,	A3,	@vr_mag2loop
	addu		S,	S,	8	; increment index, i

	fadd.ddd	tmp1,	T3,	tmp1	; anorm += sx[n]*sx[n]

	jmp		r1			; return




_vr_neg:

	bsr	_get_vecA1			; deref A1 to find vector

	addu	UArg1,	A2,	ZERO		; A2 into UArg1 for call
	addu	UArg2,	A3,	A3		; convert to words

	bsr	_bind_vecUArg1			; deref and bind UArg1 to vec

	; A3 contains count of double words
	; A1 has pointer to first element (BIASED)

	; deref A2 -- must be unbound
	; bind it to a new vector of the appropriate length
	; for each element
	;  load upper and lower half
	;  xor.u upper, upper, 0x8000 to negate 
	;  store upper and lower into new vector

	; ready to ld and negate elements
	; A1 has pointer to first element of old vector
	; UArg1 has pointer to first element in new vector
	; UArg2 now has number of words in vector

	subu	UArg2,	UArg2,	1		; prepare counter for loop

@neg_loop:
	ld	tmp1,	A1[UArg2]		; load last word
	bb1	0,	UArg2,	@neg_L1		; branch if even word
	xor.u	tmp1,	tmp1,	0x8000		; change sign bit
@neg_L1:
	st	tmp1,	UArg1[UArg2]		; store into new vector
	bcnd.n	ne0,	UArg2,	@neg_loop	; if not zero go again
	subu	UArg2,	UArg2,	1		; dec counter 

	jmp.n	CP
	addu	E,	OldE,	ZERO		; proceed




_vrsr_mul:

	addu	UArg1,	A3,	ZERO		; save third argument
	bsr	_get_vecA1			; get vector in A1
@vrsr_derefA2:
	bb1	BGND,	A2,	@vrsr_cont	; dereference A2
	ld	tmp1,	A2,	BIAS
	cmp	A2,	tmp1,	A2
	bb0.n	eq,	A2,	@vrsr_derefA2
	addu	A2,	tmp1,	ZERO
	jmp	Fail				; unbound, so fail

@vrsr_cont:
	bb0	BNUM,	A2,	@vec_fail	; not a number, fail

	addu	UArg2,	A3,	A3		; # of words in new vector
	bsr	_bind_vecUArg1			; bind A3 to new vector

	bb1	BUIA,	A2,	@vrsr_flt	; if float, branch
	ext	T1,	A2,	26<0>		; get int
	flt.ds	T1,	T1			; convert to float
	br	@do_vrsr_mul
@vrsr_flt:					; have float
	clr	A2,	A2,	6<26>		; get address
	ld	T1,	A2,	BIAS+4		; get first half
	ld	T2,	A2,	BIAS+8		; get second half

@do_vrsr_mul:
	; T1 & T2 have double precision scalar
	; A1 has BIASED pointer to old vec
	; UArg1 has BIASED pointer to new vec (first element)
	; UArg2 has # of words in new vector

	subu	UArg2,	UArg2,	2		; prepare loop counter

@vrsr_loop:
	ld	T3,	A1,	0		; load first half of element
	ld	T4,	A1,	4		; load second half of element
	fmul.ddd T3,	T3,	T1		; multiply
	addu	A1,	A1,	8		; inc old vec pointer
	st	T3,	UArg1,	0		; store result
	st	T4,	UArg1,	4
	addu	UArg1,	UArg1,	8		; inc new vec pointer
	
	bcnd.n	ne0,	UArg2,	@vrsr_loop
	subu	UArg2,	UArg2,	2		; two words fewer
	
	jmp.n	CP
	addu	E,	OldE,	ZERO


	; welcome to 1992.
	
	; vr_select(+Offset,+V,+Incr,-VOut) the "subvector" Vout is
	; returned, starting at V+Incr, and skipping Incr real numbers (@2 words)
	; until the end of the vector.
	; Analog to vc_select/4.

_vr_select:
	bsr	_vget_intargs_1n3			; A1 and A3 are integer terms
		; dereference them, failing if not ints greater than 0 else
		; leave untagged ints in A1 and A3

	bsr	_get_vecA2			; inspired by the old _get_vecA1
		; A2 must be a vector term (double), leaves pointer to first vector
		; el in A2, and leaves raw vector length (# of doubles in vector) in tmp3

	; Register Usage:
	;	A1: Offset (in # real elements) >= 0
	;	A2: points to first el in input vector
	; 	A3: Increment (in # real elements) > 0
	; 	tmp3: length of input vector (in # doubles)

	; now calculate the size of the new vector to be made
	
		cmp	tmp4,	A1,	tmp3		; offset vs. input vector len
		bb1.n	ge,	tmp4,	@vec_fail	; offset too big
		sub	tmp2,	tmp3,	A1		; get double len til end of vector
		sub	tmp2,	tmp2,	1		; adjust for first element (already known)
		div	tmp4,	tmp2,	A3		; divide by increment to get length
							; of new vector.  A3 <> 0
							; tmp4 := # additional doubles past first
							; in new vector
		mak	tmp4,	tmp4,	0<1>		; els * 2 = words
		addu	UArg2,	tmp4,	2		; and adjust for first el
		; bindvecUArg1 expects #words in UArg2

		bsr.n	_bind_vecUArg1			; create new Vector of length UArg2
		ld	UArg1,	E,	BIAS+20		; get A4 off the arg/env stack


		; now populate the new vector, UArg1 points to first vector el (biased)
		; A2 still points to the first el of the input vector (biased)
		; A3 is the Increment (in #reals)
		; A1 is the Offset (in reals)
		; UArg1 points to new vector's first el
		; UArg2 is the length of new vector in words

		mak	T3,	A1,	0<3>		; mul by 8 (unsigned) to get byte offset
		addu	tmp4,	A2,	T3		; tmp4 := base & to start transfer
			; Add (byte) offset to start of input vector

		; for transfers, can't use doubleword instructions, cuz the heap isn't
		; doubleword aligned

		; load the stride into A2 (first el & no longer needed) before the loop
		mak	A2,	A3,	0<3>		; wordstride := 8 * realincr

@rselect_loop:	ld	tmp2,	tmp4,	ZERO		; first word to copy
		subu	UArg2,	UArg2,	2		; 2 fewer words left to copy
		ld	tmp1,	tmp4,	4		; get second word to copy
		st	tmp2,	UArg1,	ZERO		; write first word
		addu	tmp4,	tmp4,	A2		; bump source & by stride
		st	tmp1,	UArg1,	4		; write second word
	
		bcnd.n	gt0,	UArg2,	@rselect_loop	; as long as more doubles to copy
		addu	UArg1,	UArg1,	8		; bump destination &

		jmp.n	CP				; all done
		addu	E,	OldE,	ZERO		; reset env




	; _bind_vecUArg1 dereferences the argument in UArg1, failing if
	; it is not a variable.  The variable is bound to a vector of
	; length found in UArg2 (number of words)
	;
	; 	2/6/90, kev -- modified the following routine to not use
	;		either S or T5 (which no longer exists) and in
	;		the process was able to remove an instruction
	; 

	global	_bind_vecUArg1

_bind_vecUArg1:

@bv_derefUArg1:
	bb1	BGND,	UArg1,	@vec_fail	; normal dereference loop
	ld	tmp1,	UArg1,	BIAS
	cmp	tmp2,	UArg1,	HB		; early trail check
	cmp	UArg1,	tmp1,	UArg1
	bb0.n	eq,	UArg1,	@bv_derefUArg1
	addu	UArg1,	tmp1,	ZERO

	; ready to bind UArg1
	or.u	tmp1,	H,	TFLT		; set tmp1 to float pointer
	bb1.n	hs,	tmp2,	@bv_cont	; branch if UArg1 >= HB
	st	tmp1,	UArg1,	BIAS		;  but first bind UArg1
	cmp	tmp2,	UArg1,	SPB		; SPB check
	bb1	lo,	tmp2,	@bv_cont	; branch if UArg1 < SPB
	subu	TR,	TR,	4		; get trail entry
	st	UArg1,	TR,	ZERO		; and trail it

@bv_cont:
	addu	tmp2,	UArg2,	1		; add 1 for fence
	or.u	tmp1,	tmp2,	TFNC		; set fence tag
	st	tmp1,	H,	BIAS		; store first fence
	mul	tmp2,	tmp2,	4		; convert to bytes
	addu	UArg1,	H,	BIAS+4		; put BIASED ptr to first elem
						;   in UArg1
	addu	H,	H,	tmp2		; bump the heap to next fence
	st	tmp1,	H,	BIAS		; store second fence
	addu	H,	H,	4		; and bump heap past fence


	jmp	r1





@vec_fail:	
	jmp	Fail



	
