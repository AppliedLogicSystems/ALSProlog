#include "assembly.88k"

	text
;
; Creation:  Brian K. Short   May 1988
;
;	Copyright (c) 1989 Motorola, Inc.
;	Copyright (c) 1989 Applied Logic Systems, Inc.
;
; Revision History:
;	Revised: 2/16/90,	K. Buettner	-- added _wm_nciadc
;

;
; Code for retry instructions
;
global _wm_retry_u3
_wm_retry_u3:
	ld	A3,	E,	BIAS+0x10	; reload A3

global _wm_retry_u2
_wm_retry_u2:
	ld	A2,	E,	BIAS+0xC	; reload A2

global _wm_retry_u1
_wm_retry_u1:
	ld	A1,	E,	BIAS+0x8	; reload A1

global _wm_retry_u0
_wm_retry_u0:
	ld	CP,	E,	BIAS+4
	ld	OldE,	E,	BIAS
	subu	tmp1,	B,	TR
	bcnd	eq0,	tmp1,	untr_done_r
	br.n	untr_r
	subu	tmp1,	tmp1,	4


;
; Code for trust_me instruction
;
global _wm_trust3
_wm_trust3:
	ld	A3,	E,	BIAS+0x10	; reload A3

global _wm_trust2
_wm_trust2:
	ld	A2,	E,	BIAS+0xC	; reload A2

global _wm_trust1
_wm_trust1:
	ld	A1,	E,	BIAS+0x8	; reload A1

global _wm_trust0
_wm_trust0:
	subu	tmp1,	B,	TR
	bcnd	eq0,	tmp1,	untr_done_t
	subu	tmp1,	tmp1,	4
untr_t:
	ld	tmp2,	TR,	tmp1
	subu	tmp1,	tmp1,	4
	st	tmp2,	tmp2,	BIAS
	bcnd	ge0,	tmp1,	untr_t
untr_done_t:
	addu	TR,	B,	16
	addu	H,	HB,	0
	ld	SPB,	B,	8
	ld	Fail,	B,	0
	ld	HB,	B,	4
	ld	B,	B,	12
	jmp.n	r1
	clr	SPB,	SPB,	1<0>		; clear compaction bit



;
; Code for try instruction
;

global _wm_try3
_wm_try3:
	st	A3,	E,	BIAS+16

global _wm_try2
_wm_try2:
	st	A2,	E,	BIAS+12

global _wm_try1
_wm_try1:
	st	A1,	E,	BIAS+8

global _wm_try0
_wm_try0:
	st	CP,	E,	BIAS+4
	st	OldE,	E,	BIAS
	st	B,	TR,	12
	st	SPB,	TR,	8
	st	HB,	TR,	4
	st	Fail,	TR,	0
	addu	B,	TR,	0
	addu	SPB,	E,	0
	jmp.n	r1
	addu	HB,	H,	0


;
; Code for retry instruction
;
global _wm_retry3
_wm_retry3:
	ld	A3,	E,	BIAS+0x10	; reload A3

global _wm_retry2
_wm_retry2:
	ld	A2,	E,	BIAS+0xC	; reload A2

global _wm_retry1
_wm_retry1:
	ld	A1,	E,	BIAS+0x8	; reload A1

global _wm_retry0
_wm_retry0:
	subu	tmp1,	B,	TR
	bcnd	eq0,	tmp1,	untr_done_r
	subu	tmp1,	tmp1,	4
untr_r:
	ld	tmp2,	TR,	tmp1
	subu	tmp1,	tmp1,	4
	st	tmp2,	tmp2,	BIAS
	bcnd	ge0,	tmp1,	untr_r
	or	TR,	B,	0
untr_done_r:		
	addu	SP,	SPB,	0
	jmp.n	r1
	addu	H,	HB,	0
	


;
; Code for trust instruction
;
global _wm_trust_u3
_wm_trust_u3:
	ld	A3,	E,	BIAS+0x10	; reload A3

global _wm_trust_u2
_wm_trust_u2:
	ld	A2,	E,	BIAS+0xC	; reload A2

global _wm_trust_u1
_wm_trust_u1:
	ld	A1,	E,	BIAS+0x8	; reload A1

global _wm_trust_u0
_wm_trust_u0:
	ld	CP,	E,	BIAS+4
	ld	OldE,	E,	BIAS
	subu	tmp1,	B,	TR
	bcnd	eq0,	tmp1,	untr_done_t
	br.n	untr_t
	subu	tmp1,	tmp1,	4



	;
	; wm_trust_fail is called to get rid of a choice point and then fail
	;

global	_wm_trust_fail

_wm_trust_fail:
	bsr.n	_wm_trust0
	addu	E,	SPB,	0
	jmp.n	Fail
	addu	SP,	E,	0


	;
	; wm_nciadc is branched to from a deleted clause to obtain the Next
	; Choice In A Deleted Clause and take appropriate action.  The argument
	; to _next_choice_in_a_deleted_clause should have already been set up.
	;

	global	_wm_nciadc

_wm_nciadc:
	bsr	_next_choice_in_a_deleted_clause
	jmp	r2				; branch to next choice

