#include "assembly.88k"
#include "tokens.h"

; 
; Creation:	Craig Thornley
;		April 11, 1989
;
;	Copyright (c) 1989 Motorola, Inc.
;
; vec_reals1.88k -- Functions for vector arithmetic
;
;
; Modified:	April 13, 1989	CT	first arg of make_vector is now a list 
;					instead of a comma list
;		April 25, 1989	CT	changed names of vadd, etc to vrr_add
;		April 27, 1989	CT	changed name of file to vec_reals1.88k
;					make_vector moved to vec_prims.88k
;		Feb 6, 1989	Kev	subroutine calls to single subroutine
;					replaced with inline code for vrr_add,
;					vrr_sub, vrr_mul, and vrr_div
;					Also replace mul instruction with
;					a mak instruction
;
;		
; vrr_add(X,Y,Z)
; vrr_sub(X,Y,Z)
; vrr_mul(X,Y,Z)
; vrr_div(X,Y,Z)

	text
	global	_vrr_add
	global	_vrr_sub
	global	_vrr_mul
	global	_vrr_div







; _vget_args:
;	dereference A1
;	dereference A2	; both need to be vectors of equal length
;	dereference A3	; has to be a variable

;	trail A3 and bind it to a new vector

;	for the length of the vectors
;	   perform math operation
;	   store result in new vector

_vget_args:

@vderefA1:
	bb1	BGND,	A1,	@vderefA2	; if ground get 2nd arg
	ld	tmp1,	A1,	BIAS		; dereference
	cmp	A1,	A1,	tmp1		; compare the two
	bb0.n	eq,	A1,	@vderefA1	; if not the same go again
	addu	A1,	tmp1,	ZERO		; put value back into A1

@vderefA2:
	bb1	BGND,	A2,	@somewhere	; if ground get out
	ld	tmp1,	A2,	BIAS		; dereference
	cmp	A2,	A2,	tmp1		; compare the two
	bb0.n	eq,	A2,	@vderefA2	; if not the same go again
	addu	A2,	tmp1,	ZERO		; put value back into A2

@somewhere:
	and	tmp1,	A1,	A2		; only for the tag
	bb0	BNUM,	tmp1,	@vec_fail	; are they NUMs?
	bb0.n	BUIA,	tmp1,	@vec_fail	; floats?
	clr	UArg1,	A1,	6<26> 		; get address of first
	clr	UArg2,	A2,	6<26>		; get address of second
	ld	tmp1,	UArg1,	BIAS		; load fence #1
	ld	tmp2,	UArg2,	BIAS		; load fence #2
	cmp	tmp2,	tmp1,	tmp2		; compare the two
	bb1	ne,	tmp2,	@vec_fail	; different lengths, fail

	clr	tmp2,	tmp1,	6<26>		; get word count to next fence 
	addu	UArg1,	UArg1,	4		; jump the fence
	addu	UArg2,	UArg2,	4		; ditto

; tmp1 still has usable fence
; tmp2 has word count
; UArg1 has address of first vector
; UArg2 has address of second vector
	
@vderefA3:
	bb1	BGND,	A3,	@vec_fail	; if ground fail
	ld	tmp3,	A3,	BIAS		; dereference
	cmp	S,	A3,	HB		; do early trail check
	cmp	A3,	A3,	tmp3		; compare the two
	bb0.n	eq,	A3,	@vderefA3	; if not the same go again
	addu	A3,	tmp3,	ZERO		; put value back into A3
	
	or.u	tmp3,	H,	TFLT		; set tmp3 to float pointer
	bb1.n	hs,	S,	@vcont		; branch if A3 >= hb
	st	tmp3,	A3,	BIAS		;  but first bind A3 to tmp3
	cmp	S,	A3,	HB		; spb check
	bb1	lo,	S,	@vcont		; branch if A3 < spb
	subu	TR,	TR,	4		; get new trail entry
	st	A3,	TR,	ZERO		; and trail the bugger

@vcont:
	addu	T1,	H,	BIAS+4		; T1 ptr to 1st new elem

	st	tmp1,	H,	BIAS		; store beginning fence
	mak	tmp4,	tmp2,	0<2>		; multiply by four to get bytes
	addu	H,	H,	tmp4		; bump heap
	st	tmp1,	H,	BIAS		; store ending fence

	jmp.n	r1				; return
	addu	H,	H,	4		; bump heap past fence


; _vrr_ routines:
; A1, A2, A3 contain the args
; after _vget_args is called, 
;	UArg1 will hold the pointer to the first element of first vector
;	UArg2 will hold the pointer to the first element of second vector.
;	T1 will hold the pointer to the first element of the new vector.
;
;	tmp2 contains the word count to next fence.
;	

_vrr_add:
	bsr	_vget_args

	subu	tmp2,	tmp2,	1		; #elems = (tmp2-1)/2
	extu	tmp2,	tmp2,	31<1>		; divide by 2

@vaddloop:
	ld	T2,	UArg1,	BIAS		; load element
	ld	T3,	UArg1,	BIAS+4

        ld	T4,	UArg2,	BIAS		; load other element
	ld	S,	UArg2,	BIAS+4

	fadd.ddd T2,	T2,	T4		; do addition

	addu	UArg1,	UArg1,	8		; bump pointers
	addu	UArg2,	UArg2,	8

	st	T2,	T1,	ZERO		; store result
	st	T3,	T1,	4		; in two parts

	addu	T1,	T1,	8		; bump pointer
	
	subu	tmp2,	tmp2,	1		; decrement counter
	bcnd	ne0,	tmp2,	@vaddloop

	jmp.n	CP
	addu	E,	OldE,	ZERO		; reset env

_vrr_sub:
	bsr	_vget_args

	subu	tmp2,	tmp2,	1		; #elems = (tmp2-1)/2
	extu	tmp2,	tmp2,	31<1>		; divide by 2

@vsubloop:
	ld	T2,	UArg1,	BIAS		; load element
	ld	T3,	UArg1,	BIAS+4

        ld	T4,	UArg2,	BIAS		; load other element
	ld	S,	UArg2,	BIAS+4

	fsub.ddd T2,	T2,	T4		; do subtraction

	addu	UArg1,	UArg1,	8		; bump pointers
	addu	UArg2,	UArg2,	8

	st	T2,	T1,	ZERO		; store result
	st	T3,	T1,	4		; in two parts

	addu	T1,	T1,	8		; bump pointer
	
	subu	tmp2,	tmp2,	1		; decrement counter
	bcnd	ne0,	tmp2,	@vsubloop

	jmp.n	CP
	addu	E,	OldE,	ZERO		; reset env




_vrr_mul:
	bsr	_vget_args

	subu	tmp2,	tmp2,	1		; #elems = (tmp2-1)/2
	extu	tmp2,	tmp2,	31<1>		; divide by 2

@vmulloop:
	ld	T2,	UArg1,	BIAS		; load element
	ld	T3,	UArg1,	BIAS+4

        ld	T4,	UArg2,	BIAS		; load other element
	ld	S,	UArg2,	BIAS+4

	fmul.ddd T2,	T2,	T4		; do multiplication

	addu	UArg1,	UArg1,	8		; bump pointers
	addu	UArg2,	UArg2,	8

	st	T2,	T1,	ZERO		; store result
	st	T3,	T1,	4		; in two parts

	addu	T1,	T1,	8		; bump pointer
	
	subu	tmp2,	tmp2,	1		; decrement counter
	bcnd	ne0,	tmp2,	@vmulloop

	jmp.n	CP
	addu	E,	OldE,	ZERO		; reset env


_vrr_div:
	bsr	_vget_args

	subu	tmp2,	tmp2,	1		; #elems = (tmp2-1)/2
	extu	tmp2,	tmp2,	31<1>		; divide by 2

@vdivloop:
	ld	T2,	UArg1,	BIAS		; load element
	ld	T3,	UArg1,	BIAS+4

        ld	T4,	UArg2,	BIAS		; load other element
	ld	S,	UArg2,	BIAS+4

	fdiv.ddd T2,	T2,	T4		; do division

	addu	UArg1,	UArg1,	8		; bump pointers
	addu	UArg2,	UArg2,	8

	st	T2,	T1,	ZERO		; store result
	st	T3,	T1,	4		; in two parts

	addu	T1,	T1,	8		; bump pointer
	
	subu	tmp2,	tmp2,	1		; decrement counter
	bcnd	ne0,	tmp2,	@vdivloop

	jmp.n	CP
	addu	E,	OldE,	ZERO		; reset env




@vec_fail:
	jmp	Fail
