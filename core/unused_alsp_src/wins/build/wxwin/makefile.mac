# ceh - These headers come from deep in alsdir/library, someday put mac stuff there. - cehLIBS =X_CFLAGS =X_INIT_LIBS = GUSIIncludes =   {MPW}Interfaces:GUSIIncludes:WXIncludes =	 {MPW}Interfaces:WXIncludes:GUSILibraries =   {MPW}Libraries:GUSILibraries:WXLibraries =   {MPW}Libraries:WXLibraries:X_LIBS =   {WXLibraries}wxmac.PPC.lib "{GUSILibraries}GUSI.Lib.PPC" ¶		   "{MWPPCLibraries}MWCRuntime.Lib" ¶		   "{MWPPCLibraries}SIOUX.PPC.Lib" ¶	       "{MWPPCLibraries}InterfaceLib" ¶		   "{MWPPCLibraries}ANSI (NL) C.PPC.Lib" ¶		   "{MWPPCLibraries}ANSI (NL) C++.PPC.Lib" ¶		   "{MWPPCLibraries}MathLib" ¶		   "{MWPPCLibraries}PPCToolLibs.o" "{MWPPCLibraries}PLStringFuncsPPC.lib" ¶		    X_EXTRA_LIBS = BDINCS =  -I :::bld-port:srcdir = mailbox3:alsp_src:PROLIB = :::bld-port:alspro.ppc.libPROLOG = :::bld-port:alspro_bARCH = portOS = macos7SOS = macosGOS = macosCC = MWCPPCWIN = wxwinC2PFILT = allADDL_CS =# don't use -opt all it requires too much time/memory - cehCFLAGS = -dialect cplus '-C++_exceptions' off -mpw_chars -requireprotos -w off -nosyspath -sym fullADDL_LIBS = CFG = #define WIN_STR X_WIN_STRADDL_INITS = ADDL_PROFS = XINCLUDES = -I {MWCIncludes} -I {WXIncludes}## why are these missing? -cehXTRFLAGS =XDEFINES = -Dwx_macXCGFLAGS =#--------- Static portion of makefileWLD = ::{WIN}:WSRCD = {srcdir}wins:src:#### WARNING::#### Do NOT change the blank as path separator below to a colon, #### because colon (in this setting) bombs make under DJGPP/DOS!## ceh - no VPATH, but use directory dependency##VPATH = {WSRCD} {srcdir}/generic:	Ä : {WSRCD} {srcdir}wins:build:wxwin: {srcdir}generic:  CINTDIR = {srcdir}cinterf:C2PRODIR = {CINTDIR}c2pro:P2INTDIR = {CINTDIR}pro2intf:WINTLIB={WIN}interf.libLIBCS = {WSRCD}{WIN}aux.c {ADDL_CS} {WIN}0.c {WIN}1.c {WIN}2.c {WIN}3.cLIBOBJS = {WIN}aux.o {WIN}0.o {WIN}1.o {WIN}2.o {WIN}3.o{WIN}PlainPROFILES	= {WIN} {ADDL_PROFS}{WIN}PROFILES	= {patsubst %,%.pro,{{WIN}PlainPROFILES}}all Ä library image## Define CPPFLAGS and the default rule for translating .c files to .o files#CPPFLAGS=  -I {srcdir}generic:   ¶		   -I {WSRCD} {BDINCS} -i {GUSIIncludes} -i {WXIncludes} -D HAVE_STDLIB_H -D MacOS -D HAVE_GUSI -D NO_SIOUX_MENU.o Ä .c	{CC} -o {TargDir}{Default}.o {CPPFLAGS} {CFLAGS} {X_CFLAGS} {DepDir}{Default}.c# MPW Make doesn't like using default dependencies for generated C files, so# make explicit dependencies for these files.wxwin0.o Ä wxwin0.c	{CC} -o wxwin0.o {CPPFLAGS} {CFLAGS} {X_CFLAGS} wxwin0.cwxwin1.o Ä wxwin1.c	{CC} -o wxwin1.o {CPPFLAGS} {CFLAGS} {X_CFLAGS} wxwin1.cwxwin2.o Ä wxwin2.c	{CC} -o wxwin2.o {CPPFLAGS} {CFLAGS} {X_CFLAGS} wxwin2.cwxwin3.o Ä wxwin3.c	{CC} -o wxwin3.o {CPPFLAGS} {CFLAGS} {X_CFLAGS} wxwin3.cPROFLAGS= -b## create .src from .spc#TRFLAGS = -debug {XTRFLAGS}C2PFS = {C2PRODIR}c2p.pro {C2PRODIR}c2pro {C2PRODIR}cexp {C2PRODIR}cfiles {C2PRODIR}cmacro {C2PRODIR}cout {C2PRODIR}cparse {C2PRODIR}ctokenc2prolcl.pro Ä {C2PFS}	catenate {C2PFS} > c2prolcl.pro{WIN}.src Ä {WSRCD}{WIN}.spc {WSRCD}{WIN}.h c2prolcl.pro	Set ALS_OPTIONS heap_size:8000	Export ALS_OPTIONS	{PROLOG} {PROFLAGS} c2prolcl.pro -g c2pro ¶		-p -os {GOS} -filter {C2PFILT} -srcpath {WSRCD} {WIN} ¶			{TRFLAGS} {XINCLUDES} {XDEFINES} {X_CFLAGS}	Unset ALS_OPTIONS## create .c files from .src files#FPREFIX	= {WIN}CGFLAGS = -Ddebug -t mytrans {XCGFLAGS}P2IFS = {P2INTDIR}p2i.pro {P2INTDIR}pro2intf {P2INTDIR}intfout {P2INTDIR}mytransp2intlcl.pro Ä {P2IFS}	catenate {P2IFS} > p2intlcl.prop2intf_flag Ä {WIN}.src p2intlcl.pro	Set ALS_OPTIONS heap_size:14000	Export ALS_OPTIONS	{PROLOG} {PROFLAGS} p2intlcl.pro ¶	-g pro2intf -p {WIN} -fpre {FPREFIX} {CGFLAGS}	Unset ALS_OPTIONS	date > p2intf_flag{WIN}0.c {WIN}1.c {WIN}2.c {WIN}3.c Ä p2intf_flag{LIBOBJS} Ä {LIBCS}##	Linking the library:#{WINTLIB} Ä {LIBOBJS}	MWLINKPPC -library -o {WINTLIB} {LIBOBJS}##	Target to make the library:#	We use a recursive call to force the LIBOBJS variable to#	be recomputed after all the {WIN}<nnn>.c files are generated;#	The dependency below doesn't seem to do that.#library Ä {WINTLIB}IMAGE		= alspro_{WIN}image Ä {IMAGE}{IMAGE} Ä pimain.o pi_init.o {PROLIB} {WINTLIB} {srcdir}port:macos:alsres.r	MWLINKPPC -o {IMAGE} -application -c 'ALS4' -size on -sizemin 10240 -sizemax 10240 -sym full {X_INIT_LIBS} pimain.o pi_init.o ¶		{PROLIB}	¶		{X_LIBS}	¶		{WINTLIB}	Rez -o {IMAGE} -a {srcdir}port:macos:alsres.r	DeRez {WXIncludes}main.¹.rsrc | Rez -o {IMAGE} -a ## later - ceh##{IMAGE} Ä {IMAGE}0 ##	ALSPATH={WLD}; export ALSPATH; ¶##	{IMAGE}0 *.pro {ADDL_PROFS} ¶##		-g 'save_image({IMAGE},[libload(true}]}'cleanup Ä	-rm *.o	-rm *.obp	-rm core super_clean Ä	-rm *.o	-rm *.obp	-rm core	-rm -r alsdir## Dependencies#{WIN}aux.o Ä {WSRCD}{WIN}aux.c {srcdir}generic:alspi.h {srcdir}generic:cinterf.h {WSRCD}{WIN}.h{WIN}0.o Ä {WIN}0.c {srcdir}generic:alspi.h {srcdir}generic:cinterf.h {WSRCD}{WIN}.h{WIN}1.o Ä {WIN}1.c {srcdir}generic:alspi.h {srcdir}generic:cinterf.h {WSRCD}{WIN}.h{WIN}2.o Ä {WIN}2.c {srcdir}generic:alspi.h {srcdir}generic:cinterf.h {WSRCD}{WIN}.h{WIN}3.o Ä {WIN}3.c {srcdir}generic:alspi.h {srcdir}generic:cinterf.h {WSRCD}{WIN}.h