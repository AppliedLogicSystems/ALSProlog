# ceh - These headers come from deep in alsdir/library, someday put mac stuff there. - cehLIBS =GUSIIncludes =   {MPW}Interfaces:GUSIIncludes:GUSILibraries =   {MPW}Libraries:GUSILibraries:MoreFilesIncludes =   {MPW}Interfaces:MoreFilesIncludes:MoreFilesLibraries =   {MPW}Libraries:MoreFilesLibraries:SIOUXLINKFLAGS =   -application -c 'ALS4' -size on -sizemin 10240 -sizemax 10240 -sym full -dLIBLINKFLAGS =   -library -sym full -dCFLAGS68K =   -model farData -model farstrings -model codesmartX_CFLAGS =X_INIT_LIBS = X_LIBSPPC = "{GUSILibraries}GUSI.Lib.PPC" ¶		 "{MWPPCLibraries}PPCToolLibs.o" ¶		 "{MWPPCLibraries}ANSI (NL) C.PPC.Lib" ¶		 "{MWPPCLibraries}AOCELib" ¶		 -weakimport "{MWPPCLibraries}ColorSync" ¶		 "{MWPPCLibraries}DragLib" ¶		  "{SharedLibraries}InterfaceLib" ¶		 "{MWPPCLibraries}MathLib" ¶		 "{MWPPCLibraries}MWCRuntime.Lib" ¶		 "{SharedLibraries}ObjectSupportLib" ¶		 "{MWPPCLibraries}PLStringFuncsPPC.lib" ¶		 "{MWPPCLibraries}QuickDraw3DAcceleratorLib" ¶		 "{MWPPCLibraries}QuickDraw3DLib" ¶		 "{MWPPCLibraries}QuickDraw3DViewerLib" ¶		 "{MWPPCLibraries}QuickDrawGXLib" ¶		 "{MWPPCLibraries}QuickTimeLib" ¶		 "{MWPPCLibraries}SIOUX.PPC.Lib" ¶		 "{MWPPCLibraries}SpeechLib" ¶		 "{MWPPCLibraries}ThreadsLib" ¶		 "{MWPPCLibraries}TranslationLib" ¶		 "{MoreFilesLibraries}MoreFiles.PPC"X_LIBS68K = "{GUSILibraries}GUSI.Lib.68K" ¶		 "{MW68KLibraries}ToolLibs.o" ¶		 "{MW68KLibraries}ANSIFa(N/4i/8d)C.68K.Lib" ¶		 "{MW68KLibraries}MacOS.Lib" ¶		 "{MW68KLibraries}MathLib68K Fa(4i/8d).Lib" ¶		 "{MW68KLibraries}CPlusPlus.lib" ¶		 "{MW68KLibraries}PLStringFuncs.glue.lib" ¶		 "{MW68KLibraries}SIOUX.68K.Lib" ¶		 "{MoreFilesLibraries}MoreFiles.68k"X_EXTRA_LIBS = BDINCS =  -I :::bld-port:srcdir = @srcdir@PROLIBPPC = :::bld-port:alspro.ppc.libPROLIB68K = :::bld-port:alspro.68k.libPROLOG = :::bld-port:alsproARCH = portOS = macos7SOS = macosGOS = macosCCPPC = MWCPPCCC68K = MWC68KWIN = macosC2PFILT = allADDL_CS =# don't use -opt all it requires too much time/memory - cehCFLAGS =   -EOL -mpw_chars -requireprotos -w off -nosyspath -sym fullADDL_LIBS = CFG = #define WIN_STR X_WIN_STRADDL_INITS = ADDL_PROFS = XINCLUDES = -I {MWCIncludes}## why are these missing? -cehXTRFLAGS =XDEFINES =XCGFLAGS =#--------- Static portion of makefileWLD = ::{WIN}:WSRCD = {srcdir}wins:src:#### WARNING::#### Do NOT change the blank as path separator below to a colon, #### because colon (in this setting) bombs make under DJGPP/DOS!## ceh - no VPATH, but use directory dependency##VPATH = {WSRCD} {srcdir}/generic:	Ä : {WSRCD} {srcdir}wins:build:macos: {srcdir}generic:  CINTDIR = {srcdir}cinterf:C2PRODIR = {CINTDIR}c2pro:P2INTDIR = {CINTDIR}pro2intf:WINTLIBPPC={WIN}interf.ppc.libWINTLIB68K={WIN}interf.68k.libLIBCS = {WSRCD}{WIN}aux.c {ADDL_CS} {WIN}0.c {WIN}1.c {WIN}2.c {WIN}3.cLIBOBJSPPC = {WIN}aux.ppc.o {WIN}0.ppc.o {WIN}1.ppc.o {WIN}2.ppc.o {WIN}3.ppc.oLIBOBJS68K = {WIN}aux.68k.o {WIN}0.68k.o {WIN}1.68k.o {WIN}2.68k.o {WIN}3.68k.o{WIN}PlainPROFILES	= {WIN} {ADDL_PROFS}{WIN}PROFILES	= {patsubst %,%.pro,{{WIN}PlainPROFILES}}all Ä library imageLIBOBJS Ä {LIBCS}## Define CPPFLAGS and the default rule for translating .c files to .o files#CPPFLAGS =   -i : -i ::: -i {srcdir}generic: -i {srcdir}generic:generate:tok.h: -i {srcdir}{ARCH} ¶			 -i {srcdir}{ARCH}:{SOS} -I {WSRCD} {BDINCS} -i {GUSIIncludes} -D HAVE_CONFIG_H.ppc.o Ä .c	{CCPPC} -o {TargDir}{Default}.ppc.o {CPPFLAGS} {CFLAGS} {X_CFLAGS} {DepDir}{Default}.c.68k.o Ä .c	{CC68K} -o {TargDir}{Default}.68k.o {CFLAGS68K} {CPPFLAGS} {CFLAGS} {X_CFLAGS} {DepDir}{Default}.cmacos0.ppc.o Ä macos0.c	{CCPPC} -o macos0.ppc.o {CPPFLAGS} {CFLAGS} {X_CFLAGS} macos0.cmacos1.ppc.o Ä macos1.c	{CCPPC} -o macos1.ppc.o {CPPFLAGS} {CFLAGS} {X_CFLAGS} macos1.cmacos2.ppc.o Ä macos2.c	{CCPPC} -o macos2.ppc.o {CPPFLAGS} {CFLAGS} {X_CFLAGS} macos2.cmacos3.ppc.o Ä macos3.c	{CCPPC} -o macos3.ppc.o {CPPFLAGS} {CFLAGS} {X_CFLAGS} macos3.cmacos0.68k.o Ä macos0.c	{CC68K} -o macos0.68k.o {CFLAGS68K} {CPPFLAGS} {CFLAGS} {X_CFLAGS} macos0.cmacos1.68k.o Ä macos1.c	{CC68K} -o macos1.68k.o {CFLAGS68K} {CPPFLAGS} {CFLAGS} {X_CFLAGS} macos1.cmacos2.68k.o Ä macos2.c	{CC68K} -o macos2.68k.o {CFLAGS68K} {CPPFLAGS} {CFLAGS} {X_CFLAGS} macos2.cmacos3.68k.o Ä macos3.c	{CC68K} -o macos3.68k.o {CFLAGS68K} {CPPFLAGS} {CFLAGS} {X_CFLAGS} macos3.cPROFLAGS= -b## create .src from .spc#TRFLAGS = -debug {XTRFLAGS}C2PFS = {C2PRODIR}c2p.pro {C2PRODIR}c2pro {C2PRODIR}cexp {C2PRODIR}cfiles {C2PRODIR}cmacro {C2PRODIR}cout {C2PRODIR}cparse {C2PRODIR}ctokenc2prolcl.pro Ä {C2PFS}	catenate {C2PFS} > c2prolcl.pro{WIN}.src Ä {WSRCD}{WIN}.spc {WSRCD}{WIN}.h c2prolcl.pro	Set ALS_OPTIONS heap_size:8000	Export ALS_OPTIONS	{PROLOG} {PROFLAGS} c2prolcl.pro -g c2pro ¶		-p -os {GOS} -filterFile {WSRCD}macos.filter -srcpath {WSRCD} {WIN} ¶			{TRFLAGS} {XINCLUDES} {XDEFINES} {X_CFLAGS}	Unset ALS_OPTIONS## create .c files from .src files#FPREFIX	= {WIN}CGFLAGS = -Ddebug -t macos_trans {XCGFLAGS}P2IFS = {P2INTDIR}p2i.pro {P2INTDIR}pro2intf {P2INTDIR}intfout {P2INTDIR}mytransp2intlcl.pro Ä {P2IFS}	catenate {P2IFS} > p2intlcl.prop2intf_flag Ä {WIN}.src p2intlcl.pro	Set ALS_OPTIONS heap_size:14000	Export ALS_OPTIONS	{PROLOG} {PROFLAGS} p2intlcl.pro ¶	-g pro2intf -p {WIN} -fpre {FPREFIX} {CGFLAGS}	Unset ALS_OPTIONS	date > p2intf_flag	SetFile -m . {WIN}0.c {WIN}1.c {WIN}2.c {WIN}3.c{WIN}0.c {WIN}1.c {WIN}2.c {WIN}3.c Ä p2intf_flag##	Linking the library:#{WINTLIBPPC} Ä {LIBOBJSPPC}	MWLINKPPC -o {WINTLIBPPC} {LIBLINKFLAGS} {LIBOBJSPPC}{WINTLIB68K} Ä {LIBOBJS68K}	MWLINK68K -o {WINTLIB68K} {LIBLINKFLAGS} {LIBOBJS68K}##	Target to make the library:#	We use a recursive call to force the LIBOBJS variable to#	be recomputed after all the {WIN}<nnn>.c files are generated;#	The dependency below doesn't seem to do that.#library Ä {WINTLIBPPC} {WINTLIB68K}IMAGEPPC		= alspro_{WIN}_ppcIMAGE68K		= alspro_{WIN}_68kimage Ä {IMAGEPPC} {IMAGE68K}{IMAGEPPC} Ä pimain.ppc.o pi_init.ppc.o {PROLIBPPC} {WINTLIBPPC} {srcdir}port:macos:alsres.r	MWLINKPPC -o {IMAGEPPC} {SIOUXLINKFLAGS} {X_INIT_LIBS} pimain.ppc.o pi_init.ppc.o ¶		{PROLIBPPC}	¶		{X_LIBSPPC}	¶		{WINTLIBPPC}	Rez -o {IMAGEPPC} -a {srcdir}port:macos:alsres.r	{IMAGE68K} Ä pimain.68k.o pi_init.68k.o {PROLIB68K} {WINTLIB68K} {srcdir}port:macos:alsres.r	MWLINK68K -o {IMAGE68K} {SIOUXLINKFLAGS} {X_INIT_LIBS} pimain.68k.o pi_init.68k.o ¶		{PROLIB68K}	¶		{X_LIBS68K}	¶		{WINTLIB68K}	Rez -o {IMAGE68K} -a {srcdir}port:macos:alsres.r## later - ceh##{IMAGE} Ä {IMAGE}0 ##	ALSPATH={WLD}; export ALSPATH; ¶##	{IMAGE}0 *.pro {ADDL_PROFS} ¶##		-g 'save_image({IMAGE},[libload(true}]}'cleanup Ä	-rm *.o	-rm *.obp	-rm core super_clean Ä	-rm *.o	-rm *.obp	-rm core	-rm -r alsdir## Dependencies#{WIN}aux.68k.o Ä {WSRCD}{WIN}aux.c {srcdir}generic:alspi.h {srcdir}generic:cinterf.h {WSRCD}{WIN}.h{WIN}aux.ppc.o Ä {WSRCD}{WIN}aux.c {srcdir}generic:alspi.h {srcdir}generic:cinterf.h {WSRCD}{WIN}.h{WIN}0.68k.o Ä {WIN}0.c {srcdir}generic:alspi.h {srcdir}generic:cinterf.h {WSRCD}{WIN}.h{WIN}0.ppc.o Ä {WIN}0.c {srcdir}generic:alspi.h {srcdir}generic:cinterf.h {WSRCD}{WIN}.h{WIN}1.68k..o Ä {WIN}1.c {srcdir}generic:alspi.h {srcdir}generic:cinterf.h {WSRCD}{WIN}.h{WIN}1.ppc.o Ä {WIN}1.c {srcdir}generic:alspi.h {srcdir}generic:cinterf.h {WSRCD}{WIN}.h{WIN}2.68k..o Ä {WIN}2.c {srcdir}generic:alspi.h {srcdir}generic:cinterf.h {WSRCD}{WIN}.h{WIN}2.ppc.o Ä {WIN}2.c {srcdir}generic:alspi.h {srcdir}generic:cinterf.h {WSRCD}{WIN}.h{WIN}3.68k..o Ä {WIN}3.c {srcdir}generic:alspi.h {srcdir}generic:cinterf.h {WSRCD}{WIN}.h{WIN}3.ppc.o Ä {WIN}3.c {srcdir}generic:alspi.h {srcdir}generic:cinterf.h {WSRCD}{WIN}.h