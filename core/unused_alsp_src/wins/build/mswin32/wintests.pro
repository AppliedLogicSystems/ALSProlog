/*[-kernal32].[-user32].[-gdi32].*//*======================================================================* |		wintest.pro |	Copyright (c) 1994 Applied Logic Systems, Inc. | |	Primitive Windows Test for Microsoft Win32 | |	Creates a Window with a few active controls *======================================================================*/appName('Generic').wintest :-	getInstance(Instance),	initApplication(Instance),	c_const('SW_SHOWNORMAL', SW_SHOWNORMAL),	initInstance(Instance, SW_SHOWNORMAL, Window),		%%x_loadAccelerators(Instance, AppName, AccelTable),		mainloop(AccelTable),	x_DestroyWindow(Window, _).mainloop(AccelTable) :-	c_alloc_abs('MSG', Msg),	x_GetMessageA(Msg, 0, 0, 0, R),	printf('result: %t\n', [R]),	R =\= 0,	!,	/*	c_examine(Msg, 'MSG', [hwnd, Window]),	(x_TranslateAccelerator(Window, AccelTable, Msg, 0)			-> x_TranslateMessage(Msg), x_DispatchMessage(Msg)	 ; true),	 */	 x_DispatchMessageA(Msg, _),	 c_examine(Msg, 'MSG', [time, Time]),	 c_free(Msg),	 printf('I handled a message at %t!\n', [Time]),	mainloop(AccelTable).mainloop(_).initApplication(Instance) :-	c_const('CS_HREDRAW', CS_HREDRAW),	c_const('CS_VREDRAW', CS_VREDRAW),	Style is CS_HREDRAW \/ CS_VREDRAW,	c_rconst('WindowProcCallback', WndProc),	appName(Name),	c_create_abs(str, Name, CName),	x_LoadIconA(Instance, Name, Icon),	c_const('IDC_ARROW', IDC_ARROW),	x_LoadCursorA(0, IDC_ARROW, Cursor),	c_const('COLOR_WINDOW', COLOR_WINDOW),	Background is COLOR_WINDOW + 1,		c_create_abs('WNDCLASS',		[style,			Style,		 lpfnWndProc,	WndProc,		 cbClsExtra,	0,		 cbWndExtra,	0,		 hInstance,		Instance,		 hIcon,			Icon,		 hCursor,		Cursor,		 hbrBackground,	Background,		 lpszMenuName,  CName, /* fix for win95 */		 lpszClassName, CName		 ], WC),			x_RegisterClassA(WC, Z). /* fix for win95 */initInstance(Instance, CmdShow, Window) :-	appName(Name),	c_const('WS_OVERLAPPEDWINDOW', WS_OVERLAPPEDWINDOW),	c_const('CW_USEDEFAULT', CW_USEDEFAULT),	c_create_abs(str, Name, CName),	c_create_abs(str, 'ALS Prolog Test Window', WName),	x_CreateWindowExA(0, CName, WName,		WS_OVERLAPPEDWINDOW, CW_USEDEFAULT, 0, CW_USEDEFAULT, 0, 0, 0, Instance, 0, Window),	c_rconst('WindowProcCallback', WndProc),	c_bind_callback(WndProc, Window, wndproc),	x_ShowWindow(Window, CmdShow, _),	x_UpdateWindow(Window, _).wndproc(Window, Message, WParam, LParam, Result) :-	c_const('WM_COMMAND', WM_COMMAND),	X is trunc(WM_COMMAND),	Message = X,	do_command(Window, Message, WParam, LParam, Result).	do_command(Window, Message, WParam, LParam, Result) :-	WMID is WParam /\ 0xFFFF,	IDM_EXIT is 106,	WMID = IDM_EXIT,	x_PostQuitMessage(0),	%%x_DestroyWindow(Window, _),	Result = 0.	wndproc(Window, Message, WParam, LParam, Result) :-	c_const('WM_DESTROY', WM_DESTROY),	Message = WM_DESTROY,	x_PostQuitMessage(0),	Result = 0.	wndproc(Window, Message, WParam, LParam, Result) :-	x_DefWindowProcA(Window, Message, WParam, LParam, Result).