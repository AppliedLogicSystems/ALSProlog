#
# generic.mkf
# Makefile fragment to be included by each Makefile for building
# 	ALS-Prolog
#
# Copyright (c) 1994 Applied Logic Systems, Inc.
#

#
# How to build everything
#

all:	alsdir alsmics alspro alstest

#
# Define CPPFLAGS and the default rule for translating .c files to .o files
#

CPPFLAGS	= -I. -I.. -I$(srcdir)/generic -I$(srcdir)/$(ARCH) -DHAVE_CONFIG_H
.c.o:
	$(CC) -c $(CPPFLAGS) $(CFLAGS) $(X_CFLAGS) $<


#
# C-defined files making up common part of system
#


#gforfiles_c = pimain.c
gforfiles_c =

gpckgfiles_c = nopckg.c

glibfiles_c = \
	alloc.c \
	arith.c \
	bcinter.c \
	bdb.c \
	bdbg.c \
	bgv.c \
	bio.c \
	bmeta.c \
	bmisc.c \
	bos.c \
	bparser.c \
	bpckg.c \
	bsio.c \
	bsystem.c \
	built.c \
	butil.c \
	cinterf.c \
	compile.c \
	compmath.c \
	cutmacro.c \
	expand.c \
	fatal.c \
	fileio.c \
	foreign.c \
	fsdos.c \
	fsmac.c \
	fsunix.c \
	fsvms.c \
	gc.c \
	gv.c \
	index.c \
	lexan.c \
	lforeign.c \
	loadfile.c \
	main.c \
	mapsym.c \
	mem.c \
	module.c \
	parser.c \
	pckgcoff.c \
	pckgload.c \
	pckgmake.c \
	pi_init.c \
	rinfo.c \
	sig.c \
	symtab.c \
	varproc.c \
	vprintf.c \
	wdisp.c \
	wintcode.c \
	winter.c

gfiles_c = $(gforfiles_c) $(gpckgfiles_c) $(glibfiles_c)

gfiles_o = $(gfiles_c:.c=.o)


gfiles_h = \
	alloc.h \
	alsmem.h \
	alspi.h \
	alssig.h \
	bsio.h \
	built.h \
	chpt.h \
	cinterf.h \
	coerce.h \
	compile.h \
	cutmacro.h \
	defs.h \
	fatal.h \
	fileio.h \
	hztypes.h \
	icodedef.h \
	icodegen.h \
	icom.h \
	istr.h \
	lexan.h \
	lexinit.h \
	main.h \
	missing.h \
	module.h \
	mvarargs.h \
	parser.h \
	parsstak.h \
	pckg.h \
	pckgcoff.h \
	pckgmake.h \
	rinfo.h \
	sig.h \
	siolex.h \
	tokens.h \
	tokini.h \
	tokini2.h \
	alstypes.h \
	varproc.h \
	version.h \
	wamops.h \
	wamops0.h \
	wci.h \
	wd_size.h \
	wintcode.h \
	winter.h \
	wintidx.h \
	wntbl.h

OTHERFILES = alsglue.c

#
# These items must generate themselves from other files
#

GENFILES = 	tokens.h tokini2.h lexinit.h siolex.h

generated: ${GENFILES}


tokini2.h:	tokens.h

tokens.h:	generate/bldtok.c tokini.h parser.h
	${CC} $(CPPFLAGS) -o bldtok $(srcdir)/generic/generate/bldtok.c
	./bldtok
	rm bldtok

lexinit.h:	generate/lexinit.c lexan.h
	$(CC) $(CPPFLAGS) -o lexinit $(srcdir)/generic/generate/lexinit.c
	./lexinit >lexinit.h
	rm ./lexinit

siolex.h:	generate/sioinit.c bsio.h
	$(CC) $(CPPFLAGS) -o sioinit $(srcdir)/generic/generate/sioinit.c
	./sioinit >siolex.h
	rm ./sioinit

icode.h:	icodedef.h generate/icode.c
	$(CC) $(CPPFLAGS) -o icode $(srcdir)/generic/generate/icode.c
	./icode >icode.h
	rm -rf ./icode

#
# generic dependencies
#
# At present, these are hand generated because I've got a feeling that it
# is now somewhat simpler to do it this way than it was in the past.
#

defs_h = aconfig.h alloc.h alspi.h alssig.h built.h \
	chpt.h config.h defs.h fatal.h fileio.h \
	lexan.h missing.h mtypes.h parser.h \
	tokens.h alstypes.h \
	wamops.h wamops0.h winter.h wintidx.h \
	

$(gfiles_o): $(defs_h)

bdb.o bmeta.o bsystem.o built.o compile.o compmath.o expand.o foreign.o \
main.o module.o parser.o pckgload.o wintcode.o:	\
	module.h wintcode.h wntbl.h wci.h

bdb.o:		icodegen.h cutmacro.h compile.h
bdbg.o:		wintcode.h
bio.o:		icom.h wintcode.h
built.o bmeta.o: icodegen.h icom.h
bmisc.o:	wintcode.h compile.h
bpckg.o:	wintcode.h coerce.h pckg.h rinfo.h pckgcoff.h
bsio.o:		bsio.h siolex.h
cinterf.o:	cinterf.h
compile.o:	varproc.h cutmacro.h compile.h icode.h icodegen.h icom.h
compmath.o:	varproc.h compile.h icode.h icodegen.h icom.h
expand.o:	varproc.h parsstak.h compile.h icodegen.h icom.h main.h
gc.o:		machinst.h wintcode.h
index.o:	icodegen.h icom.h
lexan.o:	lexan.h lexinit.h
loadfile.o:	wintcode.h icodegen.h version.h
main.o:		main.h version.h pckg.h rinfo.h
mem.o:		version.h sig.h alsmem.h
module.o:	cutmacro.h main.h icodegen.h icom.h
newpckgcoff.o:	coerce.h pckgcoff.h rinfo.h
parser.o:	lexan.o parsstak.h icodegen.h icom.h
pckgcoff.o:	coerce.h pckgcoff.h rinfo.h pckgmake.h
pckgload.o:	pckg.h
pckgmake.o:	pckg.h pckgcoff.h pckgmake.h rinfo.h compile.h
pimain.o:	config.h alspi.h pi_cfg.h pi_init.o 
rinfo.o:	rinfo.h
sig.o:		sig.h
symtab.o:	pckg.h pckgcoff.h tokini2.h
varproc.o:	varproc.h
wintcode.o:	cutmacro.h main.h rinfo.h icodegen.h
winter.o:	winter.h

#
# als-mics stuff
#
#
exeformat	:= $(shell ($(CC) -o /tmp/which-exe $(srcdir)/utils/which-exe.c >/dev/null 2>&1) ; /tmp/which-exe ; rm -f /tmp/which-exe)

alsmics_c	= $(exeformat)mics.c
ifeq (elf,$(exeformat))
micsflags	= -lelf
endif

alsmics: alsdir $(srcdir)/utils/$(alsmics_c)
	$(CC) -o alsmics $(srcdir)/utils/$(alsmics_c) $(CPPFLAGS) $(micsflags)
	-cp alsmics alsdir/als-mics


#
# How to build alsdir
#

alsdir:	$(srcdir)/builtins $(srcdir)/library
	echo Making alsdir in: `pwd`
	if [ ! -d alsdir ]; then		\
		rm -rf alsdir;			\
		mkdir alsdir;			\
	fi
	if [ ! -d alsdir/builtins ]; then	\
		rm -rf alsdir/builtins;		\
		mkdir alsdir/builtins;		\
	fi
	if [ ! -d alsdir/library ]; then	\
		rm -rf alsdir/library;		\
		mkdir alsdir/library;		\
	fi
	if [ `echo $(srcdir) | sed -e 's/^\(.\).*/\1/'` = "/" ]; then	\
		$(LN_S) $(srcdir)/builtins/*.pro alsdir/builtins;		\
		$(LN_S) $(srcdir)/library/*.pro alsdir/library; \
	else								\
	    ( cd alsdir/builtins; $(LN_S) ../../$(srcdir)/builtins/*.pro . );		\
	    ( cd alsdir/library; $(LN_S) ../../$(srcdir)/library/*.pro . ); \
	fi

#
# Other generic targets
#

Makefile: $(srcdir)/bld-port/Makefile.in ../config.status
	(cd ..; ./config.status)

../config.status: ../configure
	(cd ..; ./config.status --recheck)

alstest: ./alspro
	echo >> nrev_rcd
	echo [`date`] >> nrev_rcd
	./alspro $(srcdir)/tests/snrev -g snrev >> nrev_rcd
	cat nrev_rcd
