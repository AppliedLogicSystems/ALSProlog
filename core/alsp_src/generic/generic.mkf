# 
#	        generic.mkf
#	    Copyright (c) 1994-95 Applied Logic Systems, Inc.
#	  
#	Makefile fragment to be included by each Makefile 
#	 
#	For building ALS-Prolog on >>unix<<
#	  
#	Generated by abs2make from generic.abs: 97/3/3 - 8:18:42
# 

# 
#	How to build everything
# 

all:  alsdir setup generated alspro_b alsmics alspro key_alspro_b key_alspro alstest

# 
#	Define CPPFLAGS and the default rule for translating
#	C source files to object files
# 

CPPFLAGS =   -I. -I.. -I$(srcdir)/generic -I$(srcdir)/$(ARCH) -I$(srcdir)/$(ARCH)/$(SOS) -I$(srcdir)/smath -DHAVE_CONFIG_H

%.o:%.c
	$(CC) -c $(CPPFLAGS) $(CFLAGS) $(X_CFLAGS) $<


%.key.o: %.c
	$(CC) -c -o $*.key.o $(CPPFLAGS) $(CFLAGS) -D HARDWARE_KEY $(X_CFLAGS) $<


# 
#	C-defined files making up common part of system
# 

gforfiles_c =  

#ifeq ($(TH_INTRV),1)
smathfiles_c =  	th_intrv.c \
	IAbool.c \
	IAexp.c \
	IAsmath.c \
	IAtrig.c \
	bool.c \
	exp.c \
	ieeemath.c \
	ieee_trig.c \
	nonlog.c \
	smath.c \
	trig.c


#else
#smathfiles_c =  

#endif

gpckgfiles_c =  	nopckg.c


glibfiles_c =  	alloc.c \
	arith.c \
	bcinter.c \
	bdb.c \
	bdbg.c \
	bgv.c \
	bio.c \
	bmeta.c \
	bmisc.c \
	bos.c \
	bparser.c \
	bpckg.c \
	bsio.c \
	bsystem.c \
	built.c \
	butil.c \
	cinterf.c \
	compile.c \
	compmath.c \
	cutmacro.c \
	debugsys.c \
	expand.c \
	fatal.c \
	fileio.c \
	foreign.c \
	fpbasis.c \
	freeze.c \
	fsdos.c \
	fsmac.c \
	fsunix.c \
	fsvms.c \
	gc.c \
	gv.c \
	index.c \
	intaux.c \
	intrv.c \
	int_net.c \
	lexan.c \
	lforeign.c \
	loadfile.c \
	pimain.c \
	main.c \
	mapsym.c \
	mem.c \
	module.c \
	parser.c \
	pckgcoff.c \
	pckgload.c \
	pckgmake.c \
	rinfo.c \
	sig.c \
	symtab.c \
	varproc.c \
	vprintf.c \
	wdisp.c \
	wintcode.c \
	winter.c


gfiles_c =   $(gforfiles_c) $(gpckgfiles_c) $(glibfiles_c) $(smathfiles_c) 

gfiles_o =   $(gfiles_c:.c=.o)

gkeyfiles_o =   security.key.o

OTHERFILES =   alsglue.c

# 
#	These items must generate themselves from other files
# 

GENFILES =   tokens.h tokini2.h lexinit.h siolex.h magic.h icode.h

generated:  ${GENFILES}

MAGICRUN =   ./magic

magic :  $(srcdir)/generic/generate/magic.c defs.h aconfig.h oconfig.h config.h tconfig.h
	${CC} $(CPPFLAGS) -o magic $(srcdir)/generic/generate/magic.c


magic.h :  magic
	$(MAGICRUN)


LEXRUN =   ./lexinit > lexinit.h

SIORUN =   ./sioinit > siolex.h

ICODERUN =   ./icode > icode.h

BLDTRUN =   ./bldtok

tokini2.h:  tokens.h

tokens.h :  generate/bldtok.c tokini.h parser.h
	${CC} $(CPPFLAGS) -o bldtok $(srcdir)/generic/generate/bldtok.c
	$(BLDTRUN)
	-rm bldtok


lexinit.h :  generate/lexinit.c lexan.h
	$(CC) $(CPPFLAGS) -o lexinit $(srcdir)/generic/generate/lexinit.c
	$(LEXRUN)
	-rm  ./lexinit


siolex.h :  generate/sioinit.c bsio.h
	$(CC) $(CPPFLAGS) -o sioinit $(srcdir)/generic/generate/sioinit.c
	$(SIORUN)
	-rm  ./sioinit


icode.h :  icodedef.h generate/icode.c
	$(CC) $(CPPFLAGS) -o icode $(srcdir)/generic/generate/icode.c
	$(ICODERUN)
	-rm -rf  ./icode


# 
#	generic dependencies
#	 
#	At present, these are hand generated because I've got a feeling that it
#	is now somewhat simpler to do it this way than it was in the past.
# 

defs_h =  	aconfig.h \
	alloc.h \
	alspi.h \
	alssig.h \
	built.h \
	chpt.h \
	config.h \
	debugsys.h \
	defs.h \
	dfltsys.h \
	fatal.h \
	fileio.h \
	lexan.h \
	missing.h \
	mtypes.h \
	parser.h \
	tconfig.h \
	tokens.h \
	alstypes.h \
	wamops.h \
	wamops0.h \
	winter.h \
	wintidx.h


# 
#	als-mics stuff
# 

exeformat :=   $(shell ($(CC) -o /tmp/which-exe $(srcdir)/utils/which-exe.c					 >/dev/null 2>&1) ; /tmp/which-exe ; rm -f /tmp/which-exe)

alsmics_c =   $(exeformat)mics.c

ifeq (elf,$(exeformat))
micsflags	= -lelf
endif

alsmics :  alsdir $(srcdir)/utils/$(alsmics_c)
	echo exeformat=$(exeformat)
	-$(CC) -o alsmics $(srcdir)/utils/$(alsmics_c) $(CPPFLAGS) $(micsflags)
	-cp alsmics alsdir/als-mics


alstest :  alspro
	echo >> nrev_rcd
	./alspro -b -obp $(srcdir)/tests/snrev -g snrev >> nrev_rcd
	cat nrev_rcd


