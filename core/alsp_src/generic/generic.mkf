# 
#	        generic.mkf
#	    Copyright (c) 1994-95 Applied Logic Systems, Inc.
#	  
#	Makefile fragment to be included by each Makefile 
#	for building ALS-Prolog on unix
#	  
#	Generated by abs2make from generic.abs: 95/6/30 - 13:20:39
# 

# 
#	How to build everything
# 

all:  alsdir setup alspro_b alsmics alspro alstest

# 
#	Define CPPFLAGS and the default rule for translating
#	C source files to object files
# 

CPPFLAGS =   -I. -I.. -I$(srcdir)/generic -I$(srcdir)/$(ARCH) -I$(srcdir)/$(ARCH)/$(SOS) -DHAVE_CONFIG_H

%.o:%.c
	$(CC) -c $(CPPFLAGS) $(CFLAGS) $(X_CFLAGS) $<


# 
#	C-defined files making up common part of system
# 

gforfiles_c =  

gpckgfiles_c =  	nopckg.c


glibfiles_c =  	alloc.c \
	arith.c \
	bcinter.c \
	bdb.c \
	bdbg.c \
	bgv.c \
	bio.c \
	bmeta.c \
	bmisc.c \
	bos.c \
	bparser.c \
	bpckg.c \
	bsio.c \
	bsystem.c \
	built.c \
	butil.c \
	cinterf.c \
	compile.c \
	compmath.c \
	cutmacro.c \
	expand.c \
	fatal.c \
	fileio.c \
	foreign.c \
	freeze.c \
	fsdos.c \
	fsmac.c \
	fsunix.c \
	fsvms.c \
	gc.c \
	gv.c \
	index.c \
	lexan.c \
	lforeign.c \
	loadfile.c \
	main.c \
	mapsym.c \
	mem.c \
	module.c \
	parser.c \
	pckgcoff.c \
	pckgload.c \
	pckgmake.c \
	pi_init.c \
	rinfo.c \
	sig.c \
	symtab.c \
	varproc.c \
	vprintf.c \
	wdisp.c \
	wintcode.c \
	winter.c


gfiles_c =   $(gforfiles_c) $(gpckgfiles_c) $(glibfiles_c)

gfiles_o =   $(gfiles_c:.c=.o)

gfiles_h =  	alloc.h \
	alsmem.h \
	alspi.h \
	alssig.h \
	bsio.h \
	built.h \
	chpt.h \
	cinterf.h \
	coerce.h \
	compile.h \
	cutmacro.h \
	defs.h \
	fatal.h \
	fileio.h \
	hztypes.h \
	icodedef.h \
	icodegen.h \
	icom.h \
	istr.h \
	lexan.h \
	lexinit.h \
	main.h \
	missing.h \
	module.h \
	mvarargs.h \
	parser.h \
	parsstak.h \
	pckg.h \
	pckgcoff.h \
	pckgmake.h \
	rinfo.h \
	sig.h \
	siolex.h \
	tokens.h \
	tokini.h \
	tokini2.h \
	alstypes.h \
	varproc.h \
	version.h \
	wamops.h \
	wamops0.h \
	wci.h \
	wd_size.h \
	wintcode.h \
	winter.h \
	wintidx.h \
	wntbl.h


OTHERFILES =   alsglue.c

# 
#	These items must generate themselves from other files
# 

GENFILES =   tokens.h tokini2.h lexinit.h siolex.h magic.h

LEXRUN =   ./lexinit > lexinit.h

SIORUN =   ./sioinit > siolex.h

ICODERUN =   ./icode > icode.h

MAGICRUN =   ./magic > magic.h

BLDTRUN =   ./bldtok

generated:  ${GENFILES}

magic.h:  generate/magic.c defs.h aconfig.h oconfig.h config.h tconfig.h
	${CC} $(CPPFLAGS) -o magic $(srcdir)/generic/generate/magic.c
	$(MAGICRUN)
	-rm magic


tokini2.h:  tokens.h

tokens.h:  generate/bldtok.c tokini.h parser.h
	${CC} $(CPPFLAGS) -o bldtok $(srcdir)/generic/generate/bldtok.c
	$(BLDTRUN)
	-rm bldtok


lexinit.h:  generate/lexinit.c lexan.h
	$(CC) $(CPPFLAGS) -o lexinit $(srcdir)/generic/generate/lexinit.c
	$(LEXRUN)
	-rm ./lexinit


siolex.h:  generate/sioinit.c bsio.h
	$(CC) $(CPPFLAGS) -o sioinit $(srcdir)/generic/generate/sioinit.c
	$(SIORUN)
	-rm ./sioinit


icode.h:  icodedef.h generate/icode.c
	$(CC) $(CPPFLAGS) -o icode $(srcdir)/generic/generate/icode.c
	$(ICODERUN)
	-rm -rf ./icode


# 
#	generic dependencies
#	 
#	At present, these are hand generated because I've got a feeling that it
#	is now somewhat simpler to do it this way than it was in the past.
# 

defs_h =  	aconfig.h \
	alloc.h \
	alspi.h \
	alssig.h \
	built.h \
	chpt.h \
	config.h \
	defs.h \
	dfltsys.h \
	fatal.h \
	fileio.h \
	lexan.h \
	missing.h \
	mtypes.h \
	parser.h \
	tconfig.h \
	tokens.h \
	alstypes.h \
	wamops.h \
	wamops0.h \
	winter.h \
	wintidx.h


$(gfiles_o) : $(defs_h) 

bdb.o bmeta.o bsystem.o built.o compile.o compmath.o expand.o foreign.o \
	main.o module.o parser.o pckgload.o wintcode.o : module.h wintcode.h \
	wntbl.h wci.h 

bdb.o : icodegen.h cutmacro.h compile.h 

bdbg.o : wintcode.h 

bio.o : icom.h wintcode.h 

built.o bmeta.o : icodegen.h icom.h 

bmisc.o : wintcode.h compile.h 

bpckg.o : wintcode.h coerce.h pckg.h rinfo.h pckgcoff.h 

bsio.o : bsio.h siolex.h 

cinterf.o : cinterf.h 

compile.o : varproc.h cutmacro.h compile.h icode.h icodegen.h icom.h 

compmath.o : varproc.h compile.h icode.h icodegen.h icom.h 

expand.o : varproc.h parsstak.h compile.h icodegen.h icom.h main.h 

freeze.o : icodegen.h cutmacro.h compile.h module.h wintcode.h wntbl.h wci.h 

gc.o : machinst.h wintcode.h 

index.o : icodegen.h icom.h 

lexan.o : lexan.h lexinit.h 

loadfile.o : wintcode.h icodegen.h magic.h version.h 

main.o : main.h version.h pckg.h rinfo.h 

mem.o : version.h sig.h alsmem.h 

module.o : cutmacro.h main.h icodegen.h icom.h 

newpckgcoff.o : coerce.h pckgcoff.h rinfo.h 

parser.o : lexan.h parsstak.h icodegen.h icom.h 

pckgcoff.o : coerce.h pckgcoff.h rinfo.h 

pckgload.o : pckg.h 

pckgmake.o : pckg.h pckgcoff.h pckgmake.h rinfo.h compile.h 

pimain.o : config.h alspi.h pi_cfg.h pi_init.o 

rinfo.o : rinfo.h 

sig.o : sig.h 

symtab.o : pckg.h pckgcoff.h tokini2.h 

varproc.o : varproc.h 

wintcode.o : cutmacro.h main.h rinfo.h icodegen.h 

winter.o : winter.h 

# 
#	als-mics stuff
# 

exeformat :=   $(shell ($(CC) -o /tmp/which-exe $(srcdir)/utils/which-exe.c >/dev/null 2>&1) ; /tmp/which-exe ; rm -f /tmp/which-exe)

alsmics_c =   $(exeformat)mics.c

ifeq (elf,$(exeformat))
micsflags	= -lelf
endif

alsmics:  alsdir $(srcdir)/utils/$(alsmics_c)
	echo exeformat=$(exeformat)
	-$(CC) -o alsmics $(srcdir)/utils/$(alsmics_c) $(CPPFLAGS) $(micsflags)
	-cp alsmics alsdir/als-mics


alstest:  alspro_b
	echo >> nrev_rcd
	 $(srcdir)/bin/alsnrevt $(srcdir)
	cat nrev_rcd

#	 ./alspro $(srcdir)/tests/snrev -g snrev >> nrev_rcd

