# Generic GNU Make file for ALS Prolog

VPATH = $(SOURCE_DIR)/$(OS):$(SOURCE_DIR)/generic:$(SOURCE_DIR)/$(PROC):$(SOURCE_DIR)/smath:$(SOURCE_DIR)/builtins:$(SOURCE_DIR)/library

default : binaries

MAKEFILES = Makefile gnu_makefile $(OS)_makefile

CC = gcc

CPPFLAGS = $(BUILD_FLAGS) \
	-I $(SOURCE_DIR)/$(PROC) \
	-I $(SOURCE_DIR)/$(OS) \
	-I $(SOURCE_DIR)/generic \
	-I $(SOURCE_DIR)/smath

# Unused warning options and why:

#-Wshadow - We use shadow variables - should be fixed someday.
#-Wcast-qual - We force some cast qualifiers - should be fixed someday.
#-Wcast-align - This reports many, many warnings. Is this a real problem?
#-Wconversion - We always have prototypes, so this is not a concern.
#-Waggregate-return - We use aggregate types.
#-Wredundant-decls - Most redundant declarations are in system header files,
#		     but there is some in out code, too. Fix someday.
# -Wstrict-prototypes - Complains about arg-less function pointer like:
#                       int (*func)(), which I think are legal.

CFLAGS = -O3 -MMD -Wall -Werror -Wmissing-prototypes -Wwrite-strings \
		 -Wnested-externs -Wpointer-arith

MAIN_SOURCE = topmain.c

MAIN_OBJECTS = $(MAIN_SOURCE:.c=.o)

GENERIC_SOURCE = alloc.c arith.c random.c bcinter.c bdb.c \
	bdbg.c bgv.c bio.c bmeta.c \
	bmisc.c bos.c bparser.c bpckg.c \
	bsio.c bsystem.c built.c butil.c \
	cinterf.c compile.c compmath.c cutmacro.c \
	debugsys.c expand.c fatal.c fileio.c \
	foreign.c fpbasis.c freeze.c gc.c \
	gv.c index.c intaux.c intrv.c \
	int_net.c lexan.c lforeign.c loadfile.c \
	main.c mapsym.c mem.c \
	module.c parser.c pckgcoff.c pckgload.c \
	pckgmake.c rinfo.c sig.c symtab.c \
	varproc.c vprintf.c wdisp.c wintcode.c \
	winter.c security.c nopckg.c \
	ieeemath.c pimain.c new_alspi.c engine.c \
	relocate_code.c cexception.c cassert.c

LIB_SOURCE = $(GENERIC_SOURCE) $(PROC_SOURCE) $(OS_SOURCE)

LIB_OBJECTS = $(LIB_SOURCE:.c=.o)

BUILTINS = blt_frez.pro  blt_std.pro   filepath.pro   ra_basis.pro \
   blt_als.pro   blt_io.pro    blt_stk.pro   fs_cmn.pro     simplio.pro \
   blt_atom.pro   blt_is.pro    blt_sys.pro   fsdos.pro      sio.pro \
   blt_brk.pro   blt_lib.pro   blt_term.pro  fsmac.pro     sio_d10.pro \
   blt_cslt.pro  blt_misc.pro   builtins.pro  fsunix.pro     sio_rt.pro \
   blt_ctl.pro   blt_msg.pro    comp_d10.pro  fswin32.pro    sio_wt.pro \
   blt_db.pro    blt_pckg.pro  cutils.pro    int_cstr.pro  xconsult.pro \
   blt_evt.pro   blt_shl.pro   dcgs.pro      math88k.pro \
   blt_flgs.pro   blt_shlr.pro   debugger.pro  module.pro \
   objs_run.pro

# OS and Proccessor definitions and rules

include $(SOURCE_DIR)/$(OS)/$(OS)_makefile
include $(SOURCE_DIR)/$(PROC)/$(PROC)_makefile

# Generic rules

$(MAIN_OBJECTS) : $(MAKEFILES)

$(LIB_OBJECTS) : $(MAKEFILES)

binaries : alspro_b libalspro.a libalspro.$(OS_SL_EXT) alspro

all : default testrun

alspro_b : alsdir $(MAIN_OBJECTS) libalspro.a $(MAKEFILES)
	$(CC) -o alspro_b $(MAIN_OBJECTS) libalspro.a $(LIBS)

alspro :  alsdir alspro_b $(BUILTINS) $(MAKEFILES)
	./alspro_b -q -b -obp \
	-g 'save_image(alspro,[select_lib(builtins,[debugger])])'

ifndef NO_STATIC_LIB
libalspro.a : alsdir $(STATIC_OBJECTS) $(LIB_OBJECTS) $(MAKEFILES)
	$(OS_AR) libalspro.a $(STATIC_OBJECTS) $(LIB_OBJECTS)
	$(OS_RANLIB) libalspro.a
endif

libalspro.$(OS_SL_EXT) : alspro_b alsdir  $(SHARED_OBJECTS) $(LIB_OBJECTS) $(MAKEFILES)
	$(OS_SL_LINK) -o libalspro.$(OS_SL_EXT) $(SHARED_OBJECTS) \
	    $(LIB_OBJECTS) $(SL_LINK_LIBS)
	./alspro_b -q -b -obp -g "attach_image('libalspro.$(OS_SL_EXT)')"

so_test : libalspro.$(OS_SL_EXT)
	$(CC) -o so_test $(MAIN_OBJECTS) libalspro.so $(LIB)

alsdir : alsdir/builtins alsdir/library

alsdir/builtins : $(SOURCE_DIR)/builtins $(MAKEFILES)
	mkdir -p alsdir/builtins
	rm -f alsdir/builtins/*.pro
	cd alsdir/builtins ; ln -s ../../$(SOURCE_DIR)/builtins/*.pro .

alsdir/library : $(SOURCE_DIR)/library $(MAKEFILES)
	mkdir -p alsdir/library
	rm -f alsdir/library/*.pro alsdir/library/*.alb
	cd alsdir/library ; ln -s ../../$(SOURCE_DIR)/library/*.pro .
	cd alsdir/library ; ln -s ../../$(SOURCE_DIR)/library/*.alb .

alsdir/shared : ../tcltk_package  ../als_dev/alsdev
	mkdir -p alsdir/shared
	rm -f alsdir/shared/*.pro alsdir/shared/*.psl alsdir/shared/*.tcl
	cd alsdir/shared ; ln -s ../../../tcltk_package/$(SUBOS)/tclintf.psl .
	cd alsdir/shared ; ln -s ../../../tcltk_package/$(SUBOS)/tcltk.pro .
	cd alsdir/shared ; ln -s ../../../als_dev/alsdev/*.tcl .
				 
alsdir/images : ../als_dev/alsdev
	mkdir -p alsdir/images
	rm -f alsdir/images/*.*
	cd alsdir/images ; ln -s ../../../als_dev/alsdev/images/*.gif .

TEST_DIR = $(SOURCE_DIR)/tests

testrun : command_line_test iso_test_suite test_suite

command_line_test: alspro
	-sh $(TEST_DIR)/tsuite/test_command_line.sh ./alspro

test_suite: alspro
	./alspro -giac -b $(TEST_DIR)/autotest $(TEST_DIR)/atest_db -g run_tests -p -srcdir $(SOURCE_DIR)

iso_test_suite: alspro
	./alspro -giac -b $(TEST_DIR)/iso_test_suite/valid_so.pro -g "cd('$(TEST_DIR)/iso_test_suite'), run_all_tests."

ALSDEVFILES = blt_dvsh.pro dbg_class.pro projects.pro
ALSDEVLIBS=listutl1,miscterm,msc_ioin,strctutl,strings,tcl_sppt,tk_alslib,typecomp
ALSDEVLIBPS =listutl1.pro miscterm.pro msc_ioin.pro strctutl.pro strings.pro \
			tcl_sppt.pro tk_alslib.pro typecomp.pro
alsdev :  alsdir alsdir/images alsdir/shared alspro_b $(BUILTINS) $(ALSDEVFILES) $(ALSDEVLIBPS)
	./alspro_b -q -b -obp -no_dot_alspro \
	-g 'save_image(alsdev,[start_goal((builtins:start_alsdev)), \
	select_lib(builtins, [debugger,blt_dvsh,dbg_class,projects]), \
	select_lib(library,[$(ALSDEVLIBS)])])'

clean :
	rm -f *.o rm *.d

superclean : clean
	rm -fr alsdir alspro alspro_b libalspro.a libalspro.$(OS_SL_EXT)

-include *.d

