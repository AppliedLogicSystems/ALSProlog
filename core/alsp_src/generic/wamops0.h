/*
 * wamops0.h		-- abstract machine opcodes
 *	Copyright (c) 1993, Applied Logic Systems, Inc.
 *
 * Authors: 	Kevin A. Buettner and Prabhakaran Raman
 * Creation:	9-15-93
 *
 * Description:	This file is intended to be the central repository for
 *	information describing the abstract machine opcodes.  The
 *	exception is wam.c which implements the abstract machine
 *	instructions.  Everything else should be encoded here or
 *	derived elsewhere from this file.
 *
 *	It should not be necessary to mention these opcodes in any
 *	other include file.  This means that new opcodes only need
 *	to be added here and their implementations to wam.c.
 *
 */

/* ABMOP stands for ABstract Machine OPcode */
ABMOP(W_MOVE_ES       ,I,I,U,U)
ABMOP(W_MOVE_SS       ,I,I,U,U)
ABMOP(W_MOVE_EE       ,I,I,U,U)
ABMOP(W_ADDTOSP       ,I,U,U,U)
ABMOP(W_U_VAR_SP      ,I,U,U,U)
ABMOP(W_U_VAR_E       ,I,U,U,U)
ABMOP(W_G_LIST_E      ,I,U,U,U)
ABMOP(W_G_LIST_SP     ,I,U,U,U)
ABMOP(W_OVFLOW_CHECK  ,U,U,U,U)
ABMOP(W_SW_TERM       ,D,D,D,D)
ABMOP(W_ADDTOSP_EXECUTE,I,P,U,U)
ABMOP(W_EXECUTE       ,P,U,U,U)
ABMOP(W_U_VAL_SP      ,I,U,U,U)
ABMOP(W_U_VAL_E       ,I,U,U,U)
ABMOP(W_ADDTOSP_CALL  ,I,P,U,U)
ABMOP(W_CALL          ,P,U,U,U)
ABMOP(W_DEALLOCATE2   ,I,I,D,U)
ABMOP(W_G_VALUE       ,R,R,U,U)
ABMOP(W_PROCEED       ,U,U,U,U)
ABMOP(W_P_YVAR_ES     ,I,U,U,U)
ABMOP(W_P_YVAR_EE     ,I,U,U,U)
ABMOP(W_P_YVAR_SS     ,I,U,U,U)
ABMOP(W_P_YVAR_SE     ,I,U,U,U)
ABMOP(W_P_UNSAFE      ,R,R,U,U)
ABMOP(W_G_SYM         ,R,F,U,U)
ABMOP(W_P_LIST        ,R,U,U,U)
ABMOP(W_U_SYM         ,F,U,U,U)
ABMOP(W_JUMP          ,D,U,U,U)
ABMOP(W_U_LVAL        ,R,U,U,U)
ABMOP(W_FOREIGN_JUMP  ,D,U,U,U)
ABMOP(W_P_STRUCTURE   ,R,F,U,U)
ABMOP(W_RETRY_ME      ,L,D,U,U)
ABMOP(W_U_INT         ,F,U,U,U)
ABMOP(W_TRY_ME        ,L,D,U,U)
ABMOP(W_TRY_ME_JUMP   ,L,D,D,U)
ABMOP(W_TRIM2         ,I,I,U,U)
ABMOP(W_CUT_PROCEED   ,U,U,U,U)
ABMOP(W_P_XVAR        ,R,U,U,U)
ABMOP(W_FAIL          ,U,U,U,U)
ABMOP(W_TRUST_ME      ,L,D,U,U)
ABMOP(W_G_INT         ,R,F,U,U)
ABMOP(W_INIT_YVAR2    ,I,U,U,U)
ABMOP(W_P_SYM         ,R,F,U,U)
ABMOP(W_RESOLVE_REF   ,U,U,U,U)
ABMOP(W_P_UIA         ,R,A,U,U)
ABMOP(W_INIT_YVAR1    ,D,U,U,U)
ABMOP(W_U_VOID        ,U,U,U,U)
ABMOP(W_CUTMACRO      ,R,R,U,U)
ABMOP(W_COLON         ,U,U,U,U)
ABMOP(W_MOD_CLOSURE   ,D,U,U,U)
ABMOP(W_TRY           ,L,D,U,U)
ABMOP(W_TRUST         ,L,D,U,U)
ABMOP(W_SW_STRUCT     ,L,T,U,U)
ABMOP(W_RETRY         ,L,D,U,U)
ABMOP(W_DOCUT         ,U,U,U,U)
ABMOP(W_G_STRUCT_E    ,I,F,U,U)
ABMOP(W_G_STRUCT_SP   ,I,F,U,U)
ABMOP(W_DEALLOCATE4   ,I,U,U,U)
ABMOP(W_SW_CONST      ,L,T,U,U)
ABMOP(W_OCALL         ,U,U,U,U)
ABMOP(W_WEIRD_JUMP    ,U,U,U,U)
ABMOP(W_SPECIAL       ,U,U,U,U)
ABMOP(W_RETURN        ,I,U,U,U)
ABMOP(W_WAM_START1    ,D,U,U,U)
ABMOP(W_WAM_START2    ,U,U,U,U)
ABMOP(W_TRIM1         ,I,U,U,U)
ABMOP(W_G_UIA         ,R,A,U,U)
ABMOP(W_MACRO_CUTPROCEED ,U,U,U,U)
ABMOP(W_SPY           ,U,U,U,U)
ABMOP(W_CATCH22       ,U,U,U,U)
ABMOP(W_THROW         ,U,U,U,U)
ABMOP(W_NOP           ,U,U,U,U)
ABMOP(W_GCMAGIC       ,D,U,U,U)
ABMOP(W_DBG_CALL      ,U,U,U,U)
ABMOP(W_NCIADC        ,U,U,U,U)
ABMOP(W_MOVE_SE       ,I,I,U,U)
ABMOP(W_PANIC         ,U,U,U,U)
ABMOP(W_LIBBREAK      ,O,U,U,U)
ABMOP(W_DECR_ICOUNT   ,U,U,U,U)

ABMOP(W_OVSW_TERM     ,U,U,U,U)
ABMOP(W_OVJUMP        ,U,U,U,U)
ABMOP(W_U_VAR_SP_m1_p2,U,U,U,U)

ABMOP(W_U_VAR_SP_m4   ,U,U,U,U)		/* W_U_VAR_SP_m4 thru W_U_VAR_SP_p4 */
ABMOP(W_U_VAR_SP_m3   ,U,U,U,U)		/* must be contiguous	*/
ABMOP(W_U_VAR_SP_m2   ,U,U,U,U)
ABMOP(W_U_VAR_SP_m1   ,U,U,U,U)
ABMOP(W_U_VAR_SP_p0   ,U,U,U,U)
ABMOP(W_U_VAR_SP_p1   ,U,U,U,U)
ABMOP(W_U_VAR_SP_p2   ,U,U,U,U)
ABMOP(W_U_VAR_SP_p3   ,U,U,U,U)
ABMOP(W_U_VAR_SP_p4   ,U,U,U,U)

ABMOP(W_G_LIST_E_p2  ,U,U,U,U)		/* W_G_LIST_SP_p2 thru W_G_LIST_SP_p5 */
ABMOP(W_G_LIST_E_p3  ,U,U,U,U)		/* must be contiguous	*/
ABMOP(W_G_LIST_E_p4  ,U,U,U,U)
ABMOP(W_G_LIST_E_p5  ,U,U,U,U)

ABMOP(W_U_VAL_SP_m4  ,U,U,U,U)		/* W_U_VAL_SP_m4 thru W_U_VAL_SP_p4 */
ABMOP(W_U_VAL_SP_m3  ,U,U,U,U)		/* must be contiguous	*/
ABMOP(W_U_VAL_SP_m2  ,U,U,U,U)
ABMOP(W_U_VAL_SP_m1  ,U,U,U,U)
ABMOP(W_U_VAL_SP_p0  ,U,U,U,U)
ABMOP(W_U_VAL_SP_p1  ,U,U,U,U)
ABMOP(W_U_VAL_SP_p2  ,U,U,U,U)
ABMOP(W_U_VAL_SP_p3  ,U,U,U,U)
ABMOP(W_U_VAL_SP_p4  ,U,U,U,U)

	/* W_MOVE_ES_m2_m4 thru W_MOVE_ES_p6_p5 must be contiguous */
ABMOP(W_MOVE_ES_m2_m4,U,U,U,U)
ABMOP(W_MOVE_ES_m2_m3,U,U,U,U)
ABMOP(W_MOVE_ES_m2_m2,U,U,U,U)
ABMOP(W_MOVE_ES_m2_m1,U,U,U,U)
ABMOP(W_MOVE_ES_m2_p0,U,U,U,U)
ABMOP(W_MOVE_ES_m2_p1,U,U,U,U)
ABMOP(W_MOVE_ES_m2_p2,U,U,U,U)
ABMOP(W_MOVE_ES_m2_p3,U,U,U,U)
ABMOP(W_MOVE_ES_m2_p4,U,U,U,U)
ABMOP(W_MOVE_ES_m2_p5,U,U,U,U)
ABMOP(W_MOVE_ES_m1_m4,U,U,U,U)
ABMOP(W_MOVE_ES_m1_m3,U,U,U,U)
ABMOP(W_MOVE_ES_m1_m2,U,U,U,U)
ABMOP(W_MOVE_ES_m1_m1,U,U,U,U)
ABMOP(W_MOVE_ES_m1_p0,U,U,U,U)
ABMOP(W_MOVE_ES_m1_p1,U,U,U,U)
ABMOP(W_MOVE_ES_m1_p2,U,U,U,U)
ABMOP(W_MOVE_ES_m1_p3,U,U,U,U)
ABMOP(W_MOVE_ES_m1_p4,U,U,U,U)
ABMOP(W_MOVE_ES_m1_p5,U,U,U,U)
ABMOP(W_MOVE_ES_p0_m4,U,U,U,U)
ABMOP(W_MOVE_ES_p0_m3,U,U,U,U)
ABMOP(W_MOVE_ES_p0_m2,U,U,U,U)
ABMOP(W_MOVE_ES_p0_m1,U,U,U,U)
ABMOP(W_MOVE_ES_p0_p0,U,U,U,U)
ABMOP(W_MOVE_ES_p0_p1,U,U,U,U)
ABMOP(W_MOVE_ES_p0_p2,U,U,U,U)
ABMOP(W_MOVE_ES_p0_p3,U,U,U,U)
ABMOP(W_MOVE_ES_p0_p4,U,U,U,U)
ABMOP(W_MOVE_ES_p0_p5,U,U,U,U)
ABMOP(W_MOVE_ES_p1_m4,U,U,U,U)
ABMOP(W_MOVE_ES_p1_m3,U,U,U,U)
ABMOP(W_MOVE_ES_p1_m2,U,U,U,U)
ABMOP(W_MOVE_ES_p1_m1,U,U,U,U)
ABMOP(W_MOVE_ES_p1_p0,U,U,U,U)
ABMOP(W_MOVE_ES_p1_p1,U,U,U,U)
ABMOP(W_MOVE_ES_p1_p2,U,U,U,U)
ABMOP(W_MOVE_ES_p1_p3,U,U,U,U)
ABMOP(W_MOVE_ES_p1_p4,U,U,U,U)
ABMOP(W_MOVE_ES_p1_p5,U,U,U,U)
ABMOP(W_MOVE_ES_p2_m4,U,U,U,U)
ABMOP(W_MOVE_ES_p2_m3,U,U,U,U)
ABMOP(W_MOVE_ES_p2_m2,U,U,U,U)
ABMOP(W_MOVE_ES_p2_m1,U,U,U,U)
ABMOP(W_MOVE_ES_p2_p0,U,U,U,U)
ABMOP(W_MOVE_ES_p2_p1,U,U,U,U)
ABMOP(W_MOVE_ES_p2_p2,U,U,U,U)
ABMOP(W_MOVE_ES_p2_p3,U,U,U,U)
ABMOP(W_MOVE_ES_p2_p4,U,U,U,U)
ABMOP(W_MOVE_ES_p2_p5,U,U,U,U)
ABMOP(W_MOVE_ES_p3_m4,U,U,U,U)
ABMOP(W_MOVE_ES_p3_m3,U,U,U,U)
ABMOP(W_MOVE_ES_p3_m2,U,U,U,U)
ABMOP(W_MOVE_ES_p3_m1,U,U,U,U)
ABMOP(W_MOVE_ES_p3_p0,U,U,U,U)
ABMOP(W_MOVE_ES_p3_p1,U,U,U,U)
ABMOP(W_MOVE_ES_p3_p2,U,U,U,U)
ABMOP(W_MOVE_ES_p3_p3,U,U,U,U)
ABMOP(W_MOVE_ES_p3_p4,U,U,U,U)
ABMOP(W_MOVE_ES_p3_p5,U,U,U,U)
ABMOP(W_MOVE_ES_p4_m4,U,U,U,U)
ABMOP(W_MOVE_ES_p4_m3,U,U,U,U)
ABMOP(W_MOVE_ES_p4_m2,U,U,U,U)
ABMOP(W_MOVE_ES_p4_m1,U,U,U,U)
ABMOP(W_MOVE_ES_p4_p0,U,U,U,U)
ABMOP(W_MOVE_ES_p4_p1,U,U,U,U)
ABMOP(W_MOVE_ES_p4_p2,U,U,U,U)
ABMOP(W_MOVE_ES_p4_p3,U,U,U,U)
ABMOP(W_MOVE_ES_p4_p4,U,U,U,U)
ABMOP(W_MOVE_ES_p4_p5,U,U,U,U)
ABMOP(W_MOVE_ES_p5_m4,U,U,U,U)
ABMOP(W_MOVE_ES_p5_m3,U,U,U,U)
ABMOP(W_MOVE_ES_p5_m2,U,U,U,U)
ABMOP(W_MOVE_ES_p5_m1,U,U,U,U)
ABMOP(W_MOVE_ES_p5_p0,U,U,U,U)
ABMOP(W_MOVE_ES_p5_p1,U,U,U,U)
ABMOP(W_MOVE_ES_p5_p2,U,U,U,U)
ABMOP(W_MOVE_ES_p5_p3,U,U,U,U)
ABMOP(W_MOVE_ES_p5_p4,U,U,U,U)
ABMOP(W_MOVE_ES_p5_p5,U,U,U,U)
ABMOP(W_MOVE_ES_p6_m4,U,U,U,U)
ABMOP(W_MOVE_ES_p6_m3,U,U,U,U)
ABMOP(W_MOVE_ES_p6_m2,U,U,U,U)
ABMOP(W_MOVE_ES_p6_m1,U,U,U,U)
ABMOP(W_MOVE_ES_p6_p0,U,U,U,U)
ABMOP(W_MOVE_ES_p6_p1,U,U,U,U)
ABMOP(W_MOVE_ES_p6_p2,U,U,U,U)
ABMOP(W_MOVE_ES_p6_p3,U,U,U,U)
ABMOP(W_MOVE_ES_p6_p4,U,U,U,U)
ABMOP(W_MOVE_ES_p6_p5,U,U,U,U)
