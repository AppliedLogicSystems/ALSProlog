/*=======================================================================
 |		generic.abs
 |	Copyright (c) 1995 Applied Logic Systems, Inc.
 |
 | 		Abstract Makefile fragment to be included by each Makefile 
 |		for building any particular version of ALS-Prolog
 |
 *======================================================================*/

schema([
	cmnt(0),
	cmnt(1),
	case(&(context_name), [
		(mac: dep(macall)),
		(_: dep(all))
	]),
	cmnt(2),
	'CPPFLAGS',
	case(&(context_name), [
		  (mac: [irule(c,'68k.o'),
			 irule(c,'ppc.o'),
			 irule(c,'demo.68k.o'),
			 irule(c,'demo.ppc.o')]),
		  (_:irule(c) )
	] ),
	cmnt(3),
	case(&(context_name),[
		 (mac:[
			 gforfiles_68k_o  = ext(gforfiles,'68k.o')  qual one_per_line,
			 gpckgfiles_68k_o = ext(gpckgfiles,'68k.o') qual one_per_line,
			 glibfiles_68k_o  = ext(glibfiles,'68k.o')  qual one_per_line,
			 gfiles_68k_o 	= ['{gforfiles_68k_o} {gpckgfiles_68k_o} {glibfiles_68k_o}'],
			 gforfiles_ppc_o  = ext(gforfiles,'ppc.o')  qual one_per_line,
			 gpckgfiles_ppc_o = ext(gpckgfiles,'ppc.o') qual one_per_line,
			 glibfiles_ppc_o  = ext(glibfiles,'ppc.o')  qual one_per_line,
			 gfiles_ppc_o 	= ['{gforfiles_ppc_o} {gpckgfiles_ppc_o} {glibfiles_ppc_o}'],
			 gdemofiles_68k_o = ['security.demo.68k.o'],
			 gdemofiles_ppc_o = ['security.demo.ppc.o']
			  ] ),
		 (_:[
			 gforfiles_c  = ext(gforfiles,c)  qual one_per_line,
			 gpckgfiles_c = ext(gpckgfiles,c) qual one_per_line,
			 glibfiles_c  = ext(glibfiles,c)  qual one_per_line,
			 gfiles_c 	= ['$(gforfiles_c) $(gpckgfiles_c) $(glibfiles_c)'],
			 gfiles_o = '$(gfiles_c:.c=.' + &(object) + ')' 
			] ) ] ),


	~gfiles_h = ext(gfiles_h,h) qual one_per_line,


	~'OTHERFILES' = ext('OTHERFILES',c),

	case(&(context_name),[
		(unix:[
			cmnt(4),
			~'GENFILES' = ext('GENFILES',h),
			generated,
			'MAGICRUN',
			rule('magic'),
			rule('magic.h'),
			'LEXRUN',
			'SIORUN',
			'ICODERUN',
			'BLDTRUN',
			dep('tokini2.h'),
			rule('tokens.h'),
			rule('lexinit.h'),
			rule('siolex.h'),
			rule('icode.h') ]),
		(mac:[
			cmnt(4),
			~'GENFILES' = ext('GENFILES',h),
			generated,
			'MAGICRUN',
			rule('magic'),
			rule('magic.h')
			 ]),
		(_:[
			cmnt(4),
			~'GENFILES' = ext('GENFILES',h),
			generated,
			'MAGICRUN',
			rule('magic'),
			rule('magic.h') ])
		]),

	cmnt(gen_dep),
	~defs_h = ext(defs_h,h) qual one_per_line,

	case(&(context_name),[
		 (mac: noop
/* 
		     [
				'{gfiles_' + '68k_o' + '}' : '{defs_h}',
				(ext(&(gen_h_dep),'68k.o') qual single_line) : ext([module,wintcode,wntbl,wci], h) qual single_line,
				depends_list('68k.o'),
				'{gfiles_' + 'ppc_o' + '}' : '{defs_h}',
				(ext(&(gen_h_dep),'ppc.o') qual single_line) : ext([module,wintcode,wntbl,wci], h) qual single_line,
				depends_list('ppc.o') ]
*/
		 ),
		 ( _ :[ 
			'$(gfiles_' + &(object) + ')' : '$(defs_h)',
			(ext(&(gen_h_dep),&(object)) qual single_line) : ext([module,wintcode,wntbl,wci], h) qual single_line,
			depends_list(&(object))] )]),

	case(&(context_name),[
		(w31:noop),
		(mac: [rule(alstest)]),
		(_:[
			cmnt(mics),
			case(&(context_name),
		 		[(unix:(exeformat := '$(shell ($(CC) -o /tmp/which-exe $(srcdir)/utils/which-exe.c\
					 >/dev/null 2>&1) ; /tmp/which-exe ; rm -f /tmp/which-exe)')),
		  		 (djgpp1:(exeformat = coff)),
		  		 (djgpp2:(exeformat = coff)),
		  		 (os2:(exeformat = coff)),
		  		 (_:(exeformat = unknown))
		 		]),

			alsmics_c = '$(exeformat)mics.c',

			case(&(context_name),
				[(unix:shell(['ifeq (elf,$(exeformat))','micsflags	= -lelf','endif'])),
		 		(_:noop)]),

			rule(alsmics),
			rule(alstest)
		])
		])

]).



cmnt(0)		= ['        generic.mkf',
 			   '    Copyright (c) 1994-95 Applied Logic Systems, Inc.',
			   '  ',
               'Makefile fragment to be included by each Makefile ',
			   ' ',
               'For building ALS-Prolog on >>' + &(context_name) + '<<',
			   '  ',
			   'Generated by abs2make from generic.abs: '+date+' - '+time].

cmnt(1) 		= ['How to build everything'].


all 	depends_on  [alsdir, setup, generated, alspro_b, alsmics, alspro, alstest].

macall	depends_on	[generated, mpw_alspro_b_ppc, sioux_alspro_b_68k, sioux_alspro_b_ppc, sioux_alspro_b, demo_sioux_alspro_b,
			 alspro_b, alspro, sioux_alspro, demo_sioux_alspro, mpw_alspro, alstest].

cmnt(2)			= ['Define CPPFLAGS and the default rule for translating',
					'C source files to object files'].

&(basic_unix_includes)	= 
			'-I. -I.. -I$(srcdir)/generic -I$(srcdir)/$(ARCH) -I$(srcdir)/$(ARCH)/$(SOS) '.

&(cpp_includes)	= case(&(context_name),
		[
		 (mac:
			'-i : -i :: -i {srcdir}generic: -i {srcdir}generic:generate:tok.h: -i {srcdir}{ARCH} -i {srcdir}{ARCH}:{SOS} -i {GUSIIncludes} -i {MoreFilesIncludes}' ),
		 (djgpp1: &(basic_unix_includes)+' -I$(srcdir)/i386/djgpp '),
		 (djgpp2: &(basic_unix_includes)+' -I$(srcdir)/i386/djgpp '),
		 (_: &(basic_unix_includes) ) 
		] ).

&(cpp_defines)		= 
	case(&(context_name),[
		(mac: ' -D HAVE_CONFIG_H'),
		(_: ' -DHAVE_CONFIG_H')]).

'CPPFLAGS'			= &(cpp_includes) + &(cpp_defines).

irule(c,'68k.o') = irule(c, '68k.o', ['{CC68k} -o {TargDir}{Default}.68k.o {CPPFLAGS} {CFLAGS} {CFLAGS68k} {DepDir}{Default}.c']).
irule(c,'ppc.o') = irule(c, 'ppc.o', ['{CCppc} -o {TargDir}{Default}.ppc.o {CPPFLAGS} {CFLAGS} {CFLAGSppc} {DepDir}{Default}.c']).
irule(c,'demo.68k.o') = irule(c, 'demo.68k.o', ['{CC68k} -o {TargDir}{Default}.demo.68k.o {CPPFLAGS} {CFLAGS} -D HARDWARE_KEY -i {EveIncludes} {CFLAGS68k} {DepDir}{Default}.c']).
irule(c,'demo.ppc.o') = irule(c, 'demo.ppc.o', ['{CCppc} -o {TargDir}{Default}.demo.ppc.o {CPPFLAGS} {CFLAGS} -D HARDWARE_KEY -i {EveIncludes} {CFLAGSppc} {DepDir}{Default}.c']).

irule(c,w31) = 
	irule(c,&(object),
		['$(CC) -c @cppflags $(CFLAGS) $<']).

irule(c) = 
	irule(c,&(object),
		['$(CC) -c $(CPPFLAGS) $(CFLAGS) $(X_CFLAGS) $<']).

cmnt(3)			= ['C-defined files making up common part of system'].

gforfiles 		= [].

gpckgfiles 		= [nopckg].

glibfiles = [
	alloc,
	arith,
	bcinter,
	bdb,
	bdbg,
	bgv,
	bio,
	bmeta,
	bmisc,
	bos,
	bparser,
	bpckg,
	bsio,
	bsystem,
	built,
	butil,
	cinterf,
	compile,
	compmath,
	cutmacro,
	debugsys,
	expand,
	fatal,
	fileio,
	foreign,
	freeze,
	fsdos,
	fsmac,
	fsunix,
	fsvms,
	gc,
	gv,
	index,
	intaux,
	int_net,
	lexan,
	lforeign,
	loadfile,
	main,
	mapsym,
	mem,
	module,
	parser,
	pckgcoff,
	pckgload,
	pckgmake,
	pi_init,
	rinfo,
	sig,
	symtab,
	varproc,
	vprintf,
	wdisp,
	wintcode,
	winter ].

gfiles_h = 
	[
	alloc,
	alsmem,
	alspi,
	alssig,
	bsio,
	built,
	chpt,
	cinterf,
	coerce,
	compile,
	cutmacro,
	debugsys,
	defs,
	fatal,
	fileio,
	hztypes,
	icodedef,
	icodegen,
	icom,
	intrv,
	intrv_pr,
	intrv_pb,
	istr,
	lexan,
	lexinit,
	main,
	missing,
	module,
	mvarargs,
	parser,
	parsstak,
	pckg,
	pckgcoff,
	pckgmake,
	rinfo,
	sig,
	siolex,
	tokens,
	tokini,
	tokini2,
	alstypes,
	varproc,
	version,
	wamops,
	wamops0,
	wci,
	wd_size,
	wintcode,
	winter,
	wintidx,
	wntbl ].

'OTHERFILES' = [alsglue].

cmnt(4) = ['These items must generate themselves from other files'].

'GENFILES' = case(&(context_name), [
				(unix: [tokens, tokini2, lexinit, siolex, magic, icode] ),
				(_ : [ magic ] ) ]).

&(invoke) = './' .

'LEXRUN'	= &(invoke) + 'lexinit > lexinit.h' .
'SIORUN'	= &(invoke) + 'sioinit > siolex.h' .
'ICODERUN'	= &(invoke) + 'icode > icode.h' .
'MAGICRUN'	= case(&(context_name), [
				(mac: 'magic'),
				(_: &(invoke) + 'magic')]).
'BLDTRUN'	= &(invoke) + 'bldtok' .

generated depends_on case(&(context_name), [
			(mac: ['{GENFILES}']),
			(_: ['${GENFILES}'])]).

rule('magic') =
    rule('magic',	
	case(&(context_name), [
	    (mac: ['{srcdir}generic:generate:magic.c', 
		   '{srcdir}generic:defs.h', '{srcdir}{ARCH}:aconfig.h', '{srcdir}{ARCH}:{SOS}:oconfig.h',
		   '::config.h', 'tconfig.h']),
	    (_: ['$(srcdir)/generic/generate/magic.c', 
		 'defs.h', 'aconfig.h', 'oconfig.h', 'config.h', 'tconfig.h'])]),
	case(&(context_name), [
	    (mac: ['{CC68k} -o magic.o {CPPFLAGS} {CFLAGS} {CFLAGS68K} {srcdir}generic:generate:magic.c',
		   '{LINK68K} -o magic {TOOLLINKFLAGS} {MPWINITLIBS68K} magic.o {MPWLIBS68K}'] ),
	    (_: ['${CC} $(CPPFLAGS) -o magic $(srcdir)/generic/generate/magic.c'])])).

rule('magic.h') = 
	rule('magic.h',	
		[magic],
		case(&(context_name), [
		   (mac: ['{MAGICRUN}']),
		   (_: ['$(MAGICRUN)'] )])).

'tokini2.h' depends_on ['tokens.h'].

rule('tokens.h') = 
	rule('tokens.h',
			[generate/'bldtok.c', 'tokini.h', 'parser.h'],
			['${CC} $(CPPFLAGS) -o bldtok $(srcdir)/generic/generate/bldtok.c',
			 '$(BLDTRUN)',
			 '-rm bldtok']).

rule('lexinit.h') = 
	rule('lexinit.h',
			[generate/'lexinit.c', 'lexan.h'],
			['$(CC) $(CPPFLAGS) -o lexinit $(srcdir)/generic/generate/lexinit.c',
			 '$(LEXRUN)',
			 '-rm  ./lexinit']).

rule('siolex.h') = 
	rule('siolex.h',
			[generate/'sioinit.c', 'bsio.h'],
			['$(CC) $(CPPFLAGS) -o sioinit $(srcdir)/generic/generate/sioinit.c',
			 '$(SIORUN)',
			 '-rm  ./sioinit']).

rule('icode.h') = 
	rule('icode.h',
		['icodedef.h', generate/'icode.c'],
		['$(CC) $(CPPFLAGS) -o icode $(srcdir)/generic/generate/icode.c',
		 '$(ICODERUN)',
		 '-rm -rf  ./icode']).

cmnt(gen_dep) = ['generic dependencies',
				 ' ',
				 'At present, these are hand generated because I''ve got a feeling that it',
				 'is now somewhat simpler to do it this way than it was in the past.'].

defs_h = [aconfig, alloc, alspi, alssig, built, chpt, config, debugsys, 
		  defs, dfltsys, fatal, fileio, lexan, missing, mtypes, parser, 
		  tconfig, tokens, alstypes, wamops, wamops0, winter, wintidx].

&(gen_h_dep) = [bdb, bmeta, bsystem, built, compile, compmath, expand, foreign,
			 	main, module, parser, pckgload, wintcode].

cmnt(mics) = ['als-mics stuff'].

rule(alsmics,
		[alsdir,'$(srcdir)'/utils/'$(alsmics_c)'],
	case(&(context_name),
		[
		 (unix:
			['echo exeformat=$(exeformat)',
		 	 '-$(CC) -o alsmics ' + '$(srcdir)'/utils/'$(alsmics_c) ' + '$(CPPFLAGS) $(micsflags)',
		 	 '-cp alsmics ' + alsdir/'als-mics'] ),
		 (djgpp1:
			['echo exeformat=$(exeformat)',
		 	 '$(CC) -o alsmics ' + '$(srcdir)'/utils/'$(alsmics_c) ' + '$(CPPFLAGS) $(micsflags)',
		 	 '-cp alsmics ' + alsdir/'als-mics',
			 'coff2exe alsmics',
			 '-cp alsmics.exe ' + alsdir/'als-mics.exe' ] ),
		 (djgpp2:
			['echo exeformat=$(exeformat)',
		 	 '$(CC) -o alsmics ' + '$(srcdir)'/utils/'$(alsmics_c) ' + '$(CPPFLAGS) $(micsflags)',
		 	 '-cp alsmics ' + alsdir/'als-mics',
			 'coff2exe alsmics',
			 '-cp alsmics.exe ' + alsdir/'als-mics.exe' ] ),
		 (os2:
			['echo exeformat=$(exeformat)',
		 	 '$(CC) -o alsmics ' + '$(srcdir)'/utils/'$(alsmics_c) ' + '$(CPPFLAGS) $(micsflags)',
		 	 '-cp alsmics ' + alsdir/'als-mics'] ),
		 (w31:
			['echo exeformat=$(exeformat)',
		 	 '$(CC) -o alsmics ' + '$(srcdir)'/utils/'$(alsmics_c) ' + '$(CPPFLAGS) $(micsflags)',
		 	 '-cp alsmics ' + alsdir/'als-mics'] ),
		 (mac:noop)
/*
		 (mac:
			[ 'echo exeformat=$(exeformat)',
		 	 '$(CC) -o alsmics ' + '$(srcdir)'/utils/'$(alsmics_c) ' + '$(CPPFLAGS) $(micsflags)',
		 	 '-cp alsmics ' + alsdir/'als-mics'] )
*/
		] ) ).


rule(alstest) =
	rule(alstest,
		[alspro],
		case(&context_name, [
		(mac: [
		 'echo >> nrev_rcd',
		 'alspro -b -obp {srcdir}tests:snrev -g snrev >> nrev_rcd',
		 'catenate nrev_rcd']),
		(_: [
		 'echo >> nrev_rcd',
		 &(invoke) + 'alspro -b -obp $(srcdir)/tests/snrev -g snrev >> nrev_rcd',
		 'cat nrev_rcd' ] )])).

depends_list(_) = 
	depends_list(EXT,
			[
			ext(bdb,      EXT)	: ext([icodegen,cutmacro,compile],h),
			ext(bdbg,     EXT)	: ext([wintcode],h),
			ext(bio,      EXT)	: ext([icom,wintcode],h),
			ext([built,bmeta],EXT): ext([icodegen,icom],h),
			ext(bmisc,    EXT)	: ext([wintcode,compile],h),
			ext(bpckg,    EXT)	: ext([wintcode,coerce,pckg,rinfo,pckgcoff],h),
			ext(bsio,     EXT)	: ext([bsio,siolex],h),
			ext(cinterf,  EXT)	: ext([cinterf],h),
			ext(compile,  EXT)	: ext([varproc,cutmacro,compile,icode,icodegen,icom],h),
			ext(compmath, EXT)	: ext([varproc,compile,icode,icodegen,icom],h),
			ext(expand,   EXT)	: ext([varproc,parsstak,compile,icodegen,icom,main],h),
			ext(freeze,   EXT)	: ext([icodegen,cutmacro,compile,module,wintcode,wntbl,wci],h),
			ext(gc,       EXT)	: ext([machinst,wintcode],h),
			ext(index,    EXT)	: ext([icodegen,icom],h),
			ext(intaux,    EXT)	: ext([intrv,freeze],h),
			ext(int_net,    EXT)	: ext([intrv,freeze,intrv_pr],h) appnd ext([intrv],c),
			ext(lexan,    EXT)	: ext([lexan,lexinit],h),
			ext(loadfile, EXT)	: ext([wintcode,icodegen,magic,version],h),
			ext(main,     EXT)	: ext([main,version,pckg,rinfo],h),
			ext(mem,      EXT)	: ext([version,sig,alsmem],h),
			ext(module,   EXT)	: ext([cutmacro,main,icodegen,icom],h),
			ext(newpckgcoff,  EXT)	: ext([coerce,pckgcoff,rinfo],h),
			ext(parser,   EXT)	: ext([lexan,parsstak,icodegen,icom],h),
			ext(pckgcoff, EXT)	: ext([coerce,pckgcoff,rinfo],h),
			ext(pckgload, EXT)	: ext([pckg],h),
			ext(pckgmake, EXT)	: ext([pckg,pckgcoff,pckgmake,rinfo,compile],h),
			ext(pimain,   EXT)	: ext([config,alspi,pi_cfg],h) appnd ext([pi_init],EXT),
			ext(rinfo,    EXT)	: ext([rinfo],h),
			ext(sig,      EXT)	: ext([sig],h),
			ext(symtab,   EXT)	: ext([pckg,pckgcoff,tokini2],h),
			ext(varproc,  EXT)	: ext([varproc],h),
			ext(wintcode, EXT)	: ext([cutmacro,main,rinfo,icodegen],h),
			ext(winter,   EXT)	: ext([winter],h)
			] ).
