/*=======================================================================
 |		generic.abs
 |	Copyright (c) 1995 Applied Logic Systems, Inc.
 |
 | 		Abstract Makefile fragment to be included by each Makefile 
 |		for building any particular version of ALS-Prolog
 |
 *======================================================================*/

schema([
	cmnt(0),
	cmnt(1),
	dep(all),
	cmnt(2),
	'CPPFLAGS',
	irule(c),
	cmnt(3),
	gforfiles_c  = ext(gforfiles,c)  qual one_per_line,
	gpckgfiles_c = ext(gpckgfiles,c) qual one_per_line,
	glibfiles_c  = ext(glibfiles,c)  qual one_per_line,

	gfiles_c 	= ['$(gforfiles_c) $(gpckgfiles_c) $(glibfiles_c)'],

	gfiles_o = '$(gfiles_c:.c=.' + &(object) + ')' ,

	~gfiles_h = ext(gfiles_h,h) qual one_per_line,
	~'OTHERFILES' = ext('OTHERFILES',c),

	case(&(context_name),[
		(msw31:noop),
		(_:[
	cmnt(4),
	~'GENFILES' = ext('GENFILES',h),
	'LEXRUN',
	'SIORUN',
	'ICODERUN',
	'MAGICRUN',
	'BLDTRUN',
	generated,
	rule('magic.h'),
	dep('tokini2.h'),
	rule('tokens.h'),
	rule('lexinit.h'),
	rule('siolex.h'),
	rule('icode.h')
		])
		]),

	cmnt(gen_dep),
	~defs_h = ext(defs_h,h) qual one_per_line,
	'$(gfiles_' + &(object) + ')' : '$(defs_h)',
	(ext(&(gen_h_dep),&(object)) qual single_line) : ext([module,wintcode,wntbl,wci], h) qual single_line,
	ext(bdb,      &(object))	: ext([icodegen,cutmacro,compile],h),
	ext(bdbg,     &(object))	: ext([wintcode],h),
	ext(bio,      &(object))	: ext([icom,wintcode],h),
	ext([built,bmeta],&(object)): ext([icodegen,icom],h),
	ext(bmisc,    &(object))	: ext([wintcode,compile],h),
	ext(bpckg,    &(object))	: ext([wintcode,coerce,pckg,rinfo,pckgcoff],h),
	ext(bsio,     &(object))	: ext([bsio,siolex],h),
	ext(cinterf,  &(object))	: ext([cinterf],h),
	ext(compile,  &(object))	: ext([varproc,cutmacro,compile,icode,icodegen,icom],h),
	ext(compmath, &(object))	: ext([varproc,compile,icode,icodegen,icom],h),
	ext(expand,   &(object))	: ext([varproc,parsstak,compile,icodegen,icom,main],h),
	ext(freeze,   &(object))	: ext([icodegen,cutmacro,compile,module,wintcode,wntbl,wci],h),
	ext(gc,       &(object))	: ext([machinst,wintcode],h),
	ext(index,    &(object))	: ext([icodegen,icom],h),
	ext(lexan,    &(object))	: ext([lexan,lexinit],h),
	ext(loadfile, &(object))	: ext([wintcode,icodegen,magic,version],h),
	ext(main,     &(object))	: ext([main,version,pckg,rinfo],h),
	ext(mem,      &(object))	: ext([version,sig,alsmem],h),
	ext(module,   &(object))	: ext([cutmacro,main,icodegen,icom],h),
	ext(newpckgcoff,  &(object))	: ext([coerce,pckgcoff,rinfo],h),
	ext(parser,   &(object))	: ext([lexan,parsstak,icodegen,icom],h),
	ext(pckgcoff, &(object))	: ext([coerce,pckgcoff,rinfo],h),
	ext(pckgload, &(object))	: ext([pckg],h),
	ext(pckgmake, &(object))	: ext([pckg,pckgcoff,pckgmake,rinfo,compile],h),
	ext(pimain,   &(object))	: ext([config,alspi,pi_cfg],h) appnd ext([pi_init],&(object)),
	ext(rinfo,    &(object))	: ext([rinfo],h),
	ext(sig,      &(object))	: ext([sig],h),
	ext(symtab,   &(object))	: ext([pckg,pckgcoff,tokini2],h),
	ext(varproc,  &(object))	: ext([varproc],h),
	ext(wintcode, &(object))	: ext([cutmacro,main,rinfo,icodegen],h),
	ext(winter,   &(object))	: ext([winter],h),
	cmnt(mics),
	case(&(context_name),
		 [(unix:(exeformat := '$(shell ($(CC) -o /tmp/which-exe $(srcdir)/utils/which-exe.c >/dev/null 2>&1) ; /tmp/which-exe ; rm -f /tmp/which-exe)')),
		  (djgpp:(exeformat = coff)),
		  (_:(exeformat = zipper))
		 ]),

	alsmics_c = '$(exeformat)mics.c',

	case(&(context_name),
		[(unix:shell(['ifeq (elf,$(exeformat))','micsflags	= -lelf','endif'])),
		 (_:noop)]),

	rule(alsmics),
	rule(alstest)

]).



cmnt(0)		= ['        generic.mkf',
 			   '    Copyright (c) 1994-95 Applied Logic Systems, Inc.',
			   '  ',
               'Makefile fragment to be included by each Makefile ',
               'for building ALS-Prolog on ' + &(context_name),
			   '  ',
			   'Generated by abs2make from generic.abs: '+date+' - '+time].

cmnt(1) 		= ['How to build everything'].

all 	depends_on  [alsdir, setup, alspro_b, alsmics, alspro, alstest].

cmnt(2)			= ['Define CPPFLAGS and the default rule for translating',
					'C source files to object files'].

&(cpp_includes)	= '-I. -I.. -I$(srcdir)/generic -I$(srcdir)/$(ARCH) -I$(srcdir)/$(ARCH)/$(SOS) '.

&(cpp_defines)		= '-DHAVE_CONFIG_H'.

'CPPFLAGS'			= &(cpp_includes) + &(cpp_defines).

irule(c) = 
	irule(c,&(object),
		['$(CC) -c $(CPPFLAGS) $(CFLAGS) $(X_CFLAGS) $<']).

cmnt(3)			= ['C-defined files making up common part of system'].

gforfiles 		= [].

gpckgfiles 		= [nopckg].

glibfiles = [
	alloc,
	arith,
	bcinter,
	bdb,
	bdbg,
	bgv,
	bio,
	bmeta,
	bmisc,
	bos,
	bparser,
	bpckg,
	bsio,
	bsystem,
	built,
	butil,
	cinterf,
	compile,
	compmath,
	cutmacro,
	expand,
	fatal,
	fileio,
	foreign,
	freeze,
	fsdos,
	fsmac,
	fsunix,
	fsvms,
	gc,
	gv,
	index,
	lexan,
	lforeign,
	loadfile,
	main,
	mapsym,
	mem,
	module,
	parser,
	pckgcoff,
	pckgload,
	pckgmake,
	pi_init,
	rinfo,
	sig,
	symtab,
	varproc,
	vprintf,
	wdisp,
	wintcode,
	winter ].

gfiles_h = 
	[
	alloc,
	alsmem,
	alspi,
	alssig,
	bsio,
	built,
	chpt,
	cinterf,
	coerce,
	compile,
	cutmacro,
	defs,
	fatal,
	fileio,
	hztypes,
	icodedef,
	icodegen,
	icom,
	istr,
	lexan,
	lexinit,
	main,
	missing,
	module,
	mvarargs,
	parser,
	parsstak,
	pckg,
	pckgcoff,
	pckgmake,
	rinfo,
	sig,
	siolex,
	tokens,
	tokini,
	tokini2,
	alstypes,
	varproc,
	version,
	wamops,
	wamops0,
	wci,
	wd_size,
	wintcode,
	winter,
	wintidx,
	wntbl ].

'OTHERFILES' = [alsglue].

cmnt(4) = ['These items must generate themselves from other files'].

'GENFILES' = [tokens, tokini2, lexinit, siolex, magic].

'LEXRUN'	= &(invoke) + './lexinit > lexinit.h' .
'SIORUN'	= &(invoke) + './sioinit > siolex.h' .
'ICODERUN'	= &(invoke) + './icode > icode.h' .
'MAGICRUN'	= &(invoke) + './magic > magic.h' .
'BLDTRUN'	= &(invoke) + './bldtok' .

generated depends_on ['${GENFILES}'].

rule('magic.h') = 
	rule('magic.h',	
			[generate/'magic.c', 
			 'defs.h', 'aconfig.h', 'oconfig.h', 'config.h', 'tconfig.h'],
			['${CC} $(CPPFLAGS) -o magic $(srcdir)/generic/generate/magic.c',
			 '$(MAGICRUN)',
			 '-rm magic'  ] ).

'tokini2.h' depends_on ['tokens.h'].

rule('tokens.h') = 
	rule('tokens.h',
			[generate/'bldtok.c', 'tokini.h', 'parser.h'],
			['${CC} $(CPPFLAGS) -o bldtok $(srcdir)/generic/generate/bldtok.c',
			 '$(BLDTRUN)',
			 '-rm bldtok']).

rule('lexinit.h') = 
	rule('lexinit.h',
			[generate/'lexinit.c', 'lexan.h'],
			['$(CC) $(CPPFLAGS) -o lexinit $(srcdir)/generic/generate/lexinit.c',
			 '$(LEXRUN)',
			 '-rm ./lexinit']).

rule('siolex.h') = 
	rule('siolex.h',
			[generate/'sioinit.c', 'bsio.h'],
			['$(CC) $(CPPFLAGS) -o sioinit $(srcdir)/generic/generate/sioinit.c',
			 '$(SIORUN)',
			 '-rm ./sioinit']).

rule('icode.h') = 
	rule('icode.h',
		['icodedef.h', generate/'icode.c'],
		['$(CC) $(CPPFLAGS) -o icode $(srcdir)/generic/generate/icode.c',
		 '$(ICODERUN)',
		 '-rm -rf ./icode']).

cmnt(gen_dep) = ['generic dependencies',
				 ' ',
				 'At present, these are hand generated because I''ve got a feeling that it',
				 'is now somewhat simpler to do it this way than it was in the past.'].

defs_h = [aconfig, alloc, alspi, alssig, built, chpt, config, defs, dfltsys, 
		  fatal, fileio, lexan, missing, mtypes, parser, tconfig, tokens, 
		  alstypes, wamops, wamops0, winter, wintidx].

&(gen_h_dep) = [bdb, bmeta, bsystem, built, compile, compmath, expand, foreign,
			 	main, module, parser, pckgload, wintcode].

cmnt(mics) = ['als-mics stuff'].

rule(alsmics,
		[alsdir,'$(srcdir)'/utils/'$(alsmics_c)'],
	case(&(context_name),
		[
		 (unix:
			['echo exeformat=$(exeformat)',
		 	 '-$(CC) -o alsmics ' + '$(srcdir)'/utils/'$(alsmics_c) ' + '$(CPPFLAGS) $(micsflags)',
		 	 '-cp alsmics ' + alsdir/'als-mics'] ),
		 (djgpp:
			['echo exeformat=$(exeformat)',
		 	 '$(CC) -o alsmics ' + '$(srcdir)'/utils/'$(alsmics_c) ' + '$(CPPFLAGS) $(micsflags)',
		 	 '-cp alsmics ' + alsdir/'als-mics',
			 'coff2exe alsmics',
			 '-cp alsmics.exe ' + alsdir/'als-mics.exe' ] ),
		 (msw31:
			['echo exeformat=$(exeformat)',
		 	 '$(CC) -o alsmics ' + '$(srcdir)'/utils/'$(alsmics_c) ' + '$(CPPFLAGS) $(micsflags)',
		 	 '-cp alsmics ' + alsdir/'als-mics'] ),
		 (mac:
			['echo exeformat=$(exeformat)',
		 	 '$(CC) -o alsmics ' + '$(srcdir)'/utils/'$(alsmics_c) ' + '$(CPPFLAGS) $(micsflags)',
		 	 '-cp alsmics ' + alsdir/'als-mics'] )
		] ) ).


rule(alstest) =
	rule(alstest,
		[alspro_b],
		[
		 'echo >> nrev_rcd',
%		 &(invoke) + ' ./alspro $(srcdir)/tests/snrev -g snrev >> nrev_rcd',
		 '$(srcdir)/bin/alsnrevt $(srcdir)',
		 'cat nrev_rcd' ] ).

