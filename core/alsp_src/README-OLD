INTRODUCTION
============

This is the ALS Prolog source tree.  The documentation on ALS Prolog 
as a Prolog system is of course in the ALS Prolog Manuals, which, not
surprisingly, live in the manual directory, not here.  This source tree
is used to create a number of versions of ALS Prolog, as follows:

	-	The portable version (threaded/byte code); this can be created on
		a wide range of systems;

	-	The native code version on those platforms for which the native
		code generators (and details) have been built;

	-	Versions (portable and/or native) which extend the basic ALS
		Prolog systems (above) by having "foreign" predicates corresponding
		to the functions of various window systems (e.g., X, Motif,
		NextStep(soon), MSWindows(later), MacOS(later) etc.)

	-	Various (orthogonal) variations, such as a system with freeze 
		(delay), etc.

The source tree machinery expects and heavily utilizes facilities found in
GNU make and gcc.  Theoretically, other tools might work,
but none have yet been brought to our attention.  The construction process
is more or less automatic, following closely the approach utilized in most
GNU tool packages.  When all goes well, it is as simple as the following
(on Unix; almost this easy with DJGPP on DOS; more handcrafted using
MetrWerks on the Mac):

0.	Make sure the following GNU tools have been installed on your system:

		make, gcc (and others, as necessary; e.g., sed)

1.	Unpack the source tree, however it has arrived.  If it is a collection
	of shar archives, they are likely named als.01 ... als.0x   Put them
	all in a directory where you want the top-level of the source directory
	to live (at ALS, it is called alsp_src, and it is at top-level in the
	filesystem in which it resides), and simply execute
			unshar als.*
	Call this directory SOURCE;

2.	Create/select another directory in which the build will take place;
	This can be anywhere: at the same level as SOURCE, or buried away
	in other directories.  [At ALS, we use one top-level directory
	'builds' on the same filesystem as alsp_src, and then create 
	directories inside 'build' where the various system-specific
	builds take place (the filesystem is on our shared file-server;
	we also use another director at the same height/depth, called
	bldtests, for more experimental builds and work).
	Call this directory BUILD; locate yourself in BUILD;

3.	Let PATH be a path to SOURCE;  It can either be an
	absolute path to SOURCE, or a relative path from BUILD to SOURCE;
	for example, if BUILD were at the same level as SOURCE, PATH
	could simply be ../SOURCE  Whichever form of PATH your choose,
	just execute the following:

		PATH/configure

	[If you are building under DJGPP over DOS on a 80x86, you will
	 use configur.bat, instead of configure;  see the comment at the
	 beginning of configur.bat on details of its use.]

	[Remember, you are located in BUILD]  When this completes (and it
	will take a while on most machines), the direcory BUILD will look
	like this (possibly a few more files):

		makefile        bld-port/       cfg.pro*        config.h
		bld-natv/       config.d        config.status*

4.	Now, still at the top level of BUILD, just invoke 

		make

	Unless you have a screamingly fast machine, you can go away for
	(maybe a very long) lunch.  Both the configure and make steps
	generate lots of messages; if you are going away for lunch, you may want
	to log them with a facility like script, just in case something
	goes wrong early on, but the process manages to continue.
	[If you are only building the portable version, things don't take
 	 too long.]

	When the process is done,  you will discover that a bld-wins
	directory has been added, as well as several other top-level files.
	Here is what you will find in the bld-* directories (in addition
	to lots of *.o-files, etc):

		bld-port ("portable" threaded code version):
			tconfig.h	- Configuration file; #defines here control details
						  of target system being constructed;
			alspro.a	- ALS Prolog standard link library: portable version
			alspro_b	- Portable version of ALS Prolog appropriate to
						  the OS; this version loads the builtins files
						  when it starts up, and loads the library files
						  dynamically, as needed.
			alspro		- Portable version of ALS Prolog appropriate to
						  the OS; this version has the builtins pre-loaded,
						  and loads the library files dynamically, as needed;
						  this version is produced by applying alsmics to
						  alspro_b.

		bld-natv (if native code is handled for this architecture/os):
			tconfig.h	- Configuration file; #defines here control details
						  of target system being constructed;
			alspro.a	- ALS Prolog native code link library suitable for
						  the OS and architecture;
			alspro_b	- Portable version of ALS Prolog appropriate to
						  the OS; this version loads the builtins files
						  when it starts up, and loads the library files
						  dynamically, as needed.
			alspro		- Portable version of ALS Prolog appropriate to
						  the OS; this version has the builtins pre-loaded,
						  and loads the library files dynamically, as needed;
						  this version is produced by applying alsmics to
						  alspro_b.

		bld-wins:
			Subdirs, corresponding to the window systems( e.g. motif, x)

			Inside subdir nnnn:
				tconfig.h	- 	Configuration file; #defines here control
						  		details of target system being constructed;
				nnnninterf.a -	link library for interface from ALS Prolog
								to system nnnn (e.g., motifinterf.a)
				alspro_nnnn0 -	extended  version of ALS prolog with the
								nnnninterf.a library linked in; this
								executable loads the builtins when it
								starts up, and loads the library files
								dynamically as needed;
				alspro_nnnn  -	extended  version of ALS prolog with the
								nnnninterf.a library linked in, and
								with all builtins and library files
								packaged into a single executable;

There is some additional machinery living in the tree to accomplish a
number of useful related tasks, including:

	-	Packing the source tree into shar files of max size 500K for
		transmission; one can select which architecture directories
		are included;

	-	Similary for the build tree.

[This is important in some settings, but tar/gzip/ftp is a more desirable
 transport scenario.]

It is planned that a common pattern of usage of the facilities will be:

	-	The source tree is packaged and sent to a location;
	-	The build is carried out and the build directory is packaged
		and sent back to ALS.

This may be either for original builds on a platform (architecture/os), or
for updates, due to either changes in ALS Prolog, or to changes in 
the platform.

GUIDE TO THE TREE
=================

This is a quick tour of the tree structure and the principal files.

Top Level Files:
---------------
	- makefile.in 	-	Initial makefile prototype for top-level makefile
						generated for the build directory
	- aclocal.m4 	-	local m4 macros for autoconf to use in building
						the configure shell script;
	- alspro.1 		-	ALS Prolog man page; wildly out of date
	- config.d.in 	-	config.d.in is a template file used by configure 
						to produce config.d, which is then converted (by
						configure) to the header file config.h in the build;
	- config.guess 	-	the GNU guesser for the system name;
	- configure 	-	the Unix configure script: sets up the initial
						build directory and makefiles;
	- configur.bat 	-	the DOS configure script: sets up the initial
						build directory and makefiles;
	- configure.in	-	initial for configure; processed by autoconf to
						create configure;
	- install.sh 	-	installation tool;
	- mkdist 		-	shell script which invokes setup_dist in
						pconfig/pconfig.pro; used appropriately, this
						packages up a "distribution directory" from
						a "build directory" 

Top Level Directories / Non-architecture-specific
-------------------------------------------------

	- atrans 		-	common part of the assembly-language translator
						[combined with various use-specific parts which
						 appear in "atrans" subdirectories in the 
						 appropriate part of the tree];
	- bin 			-	misc executable things, including:
			- sharme		-	script which packs the source tree into
								shar archive files of max 500K size;
			- sharbld		-	script which packs a build tree into
								shar archive files of max 500K size;
	- bld-natv 		-	contains the initial makefile.in prototype for
						architecture-specific build directories, together
						with the inital (identical) config files tconfig.h.in 
						(for configure/Unix) and tconfig.in (for
						 configur.bat/DOS);
	- bld-port		-	contains the initial makefile.in prototype for
						the portable build directory, together
						with the inital (identical) config files tconfig.h.in 
						(for configure/Unix) and tconfig.in (for
						 configur.bat/DOS);
	- builtins 		-	code for Prolog-defined builtin predicates;
	- cinterf 		-	code for the C-library interface generator;
	- doc 			-	the ChangeLog and other misc documentation;
	- generate 		-	generate stuff for the common (generic) system;
	- generic 		-	the common C-defined portion of the system; every
						version of the system includes all of this;
	- library 		-	code for Prolog-defined library predicates;
	- pconfig 		-	contains a Prolog-defined configuration tool
						which is invoked by configure after it has
						done its initial work (with at least alspro
						created in bld-port); sets up the directories etc.
						for the extended windows-linked versions;
	- port 			-	C code defined the byte code interpreter WAM
						which is threaded into the portable version;
	- tests 		-	code for various (Prolog, of course) tests, 
						together with a Prolog-defined test driver;
	- utils 		-	code for various C-defined utils;
	- wins			-	information guiding the generation of interfaces
						to various window systesm, together with 
						prototype makefile.in's for them;

Top Level Directories / Architecture-specific
-------------------------------------------------
	
These directories hold files defining the back-end of the
compiler for the various architectures.  Some are empty, because
those versions haven't been built yet.  Subdirectories within these
architectures correspond to differing operating systems:

	- alpha		-	DEC ALPHA-based systems;
	- hppa		-	HP Precision Architecture-based systems;
	- i386		-	all Intel-based systems
					  dos(djgpp/pharlap)  sysv(SCO) mswins os2 nextstep
	- m68k		-	Motorola 68xxx-based systems:
						sunos  macos  nextstep  sysv
	- m88k		-	Motorola 88xxx-based systems: dgux  sysv3  sysv4
	- mips		-	MIPS-based system;
	- powerpc	-	Power PC-based systems;
	- sparc		-	SPARC-based systems: sunos4  solaris2
	- vax		-	VAX-based systems (not up to date; may never be);

How It Looks At ALS:
-------------------
Some of the tools and the decisions behind them may be a bit clearer
if one reflects on how things are set up at ALS.  We have a file server
on the local ethernet which all machines (including DOS and Mac) can see.
[We use Sun PCNFS for the PCs, and ALISATALK for the Macs.]
The top level of the file system in which everything occurs happens to be 
called /mailbox3 ; if you actually see this in a script, it is either
a mistake (likely), or in a few cases, the value of a default setting
[and we haven't documented all such defaults yet.]
Thus our picture looks like:

						/mailbox3
							|
		-------------------------------------------------
		|					  |							|
	alsp_src				builds					als_dist
	  |						  |							|
	----------------		----------------		--------------------
		|		|  ...		|			|			|				  |
	...generic..port...		|			|	  m68k_nextstep3.3-1.71	  |
							|			|							  |
							|			|							  |
					m68k_nextstep3.3	|				sparc_sunos4.1.3-1.71	
										|			
								sparc_sunos4.1.3
								--------------------
								|		|		  |
							bld-port  bld-natv	bld-wins
												--------
												x   motif

This distribution directory contains distributions, by 

	<architecture>_<OS>-<ALS Version>

Each such directory contains a set of subdirs and files suitable for shipping
to a user -- obviously much less than occurs in the corresponding build
subdir (no .o files, etc;), but also more (examples files, etc.).

alsp_src is managed using CVS to handle version control.  When the tree
is shipped, we do a complete export to a fresh directory, thereby leaving
behind all the CVS information.  We also make such exports for truly
experimental work.  When changes to the source are shipped back, or
incorporated from an experiment, there is a (painful) process of merging
the new code into the existing source tree.  It is best if these merges
are kept to small bite-size chunks.  Not only does this lessen the pain,
but it makes it more likely that changes to common source files will be
tested on a range of architectures, and problems discovered.  [We need to
learn to use the GNU patch tool, but haven't gotten that far yet.]
