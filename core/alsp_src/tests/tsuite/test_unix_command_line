#!/bin/sh
# Check for proper function of command line arguments and general
# unix shell functionality.

echo "Starting Command Line Tests"

prolog=$1

error_count=0

error () {
	command=$1
	expected_result=$2
	result=$3
	echo
    echo "Command Line Test Error:"
    echo "  Command: $command"
    echo "  Expected Result: $expected_result But got: $result"
    echo
    error_count=`expr $error_count + 1`
}

cl_test () {
    command=$1
    expected_result=$2

    eval $command
    result=$?
    if test $result -ne $expected_result
    then
        error "$command" "$expected_result" "$result"
    fi
}

# Test -q (quiet) argument.

command="$prolog -q < /dev/null"
output=`eval $command`

if test "$output" != "?- "
then
	error "$command" "?- " "$output"
fi

# Test -b (batch) argument.

command="$prolog -b"
output=`eval $command`

if test "$output" = ""
then
	error "$command" "ALS Prolog..." "$output"
fi

# Test -q and -b together.

command="$prolog -q -b"
output=`eval $command`

if test "$output" != ""
then
	error "$command" "" "$output"
fi


# test success/fail/exception return values for -b -g options

cl_test "$prolog -q -b -g true" 0
cl_test "$prolog -q -b -g fail" 1
# fix this!
#cl_test "$prolog -q -b -g 'throw(foo)'" 2

# currently only tests error handling for -heap and -stack options

cl_test "$prolog -heap 2> /dev/null" 2
cl_test "$prolog -stack 2> /dev/null" 2
cl_test "$prolog -heap -stack 2> /dev/null" 2
cl_test "$prolog -stack -heap 2> /dev/null" 2
cl_test "$prolog -heap xxx 2> /dev/null" 2
cl_test "$prolog -stack xxx 2> /dev/null" 2
cl_test "$prolog -heap xxx -stack 1000 2> /dev/null" 2
cl_test "$prolog -heap 10000 -stack xxx 2> /dev/null" 2
cl_test "$prolog -stack 1000 -heap xxx 2> /dev/null" 2
cl_test "$prolog -stack xxx -heap 1000 2> /dev/null" 2

# Check error handling of out-of-range -heap and -stack values

extreme_values='-10000000 -1000000 -100000 -10000 -1000 -100 -10 -1 0
		1 2 3 4 5 6 7 8 9 10 5000000 10000000 987654321987654321'

for i in $extreme_values
do
    cl_test "$prolog -heap $i 2> /dev/null" 2
done


for i in $extreme_values
do
    cl_test "$prolog -stack $i 2> /dev/null" 2
done


for i in $extreme_values
do
    for j in $extreme_values
    do
        cl_test "$prolog -heap $i -stack $j 2> /dev/null" 2
    done
done


# Check the correct fuctioning of -heap and -stack

cl_test "$prolog -heap 1000 -b -q -g 'statistics([_,_,heap(_,_,_,_,1024000),_])'" 0
cl_test "$prolog -heap 2000 -b -q -g 'statistics([_,_,heap(_,_,_,_,2048000),_])'" 0
cl_test "$prolog -stack 1000 -b -q -g 'statistics([_,stack(_,_,1024000),_,_])'" 0
cl_test "$prolog -stack 2000 -b -q -g 'statistics([_,stack(_,_,2048000),_,_])'" 0
cl_test "$prolog -heap 2000 -stack 1000 -b -q -g 'statistics([_,stack(_,_,1024000),heap(_,_,_,_,2048000),_])'" 0
cl_test "$prolog -heap 1000 -stack 2000 -b -q -g 'statistics([_,stack(_,_,2048000),heap(_,_,_,_,1024000),_])'" 0

# Check correct functioning of Environment variables

if test $error_count -ne 0
then
    echo "Errors Found in Command Line Tests"
    exit 1
else
    echo "Finished Command Line Tests"
    exit 0
fi
