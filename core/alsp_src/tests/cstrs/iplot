/*====================================================================================*
 |                   iplot
 |      Copyright (c) 1991 William Older
 |
 |
 |     plot routine for use with intervals
 |
 |     Copyright  ©    William Older 1994      
 |
 |         March   1994       Pictures added/can copy to scrapbook
 |         October 1994       Converted to run under V3.5
 |
 |
 | 1  setup_plot( Window_name, Xaxis, Yaxis,  PlotDescriptor)
 |       - defines plot parameters and opens window etc.
 |
 | 2  plot_list( PlotDescriptor, List )
 |       - call this with a list of values to define graph
 |       - may be called several times
 |  
 | 3  end_plot( PlotDescriptor)
 |       - this updates the screen
 |
 | The effect of all three is combined in:
 |    plot( Window_name, Xaxis, Yaxis,  List)
 |
 | where
 |  Window_Name is a symbol
 |  Xaxis, Yaxis of form:  Label:Range  where Range is [L,U]
 |         (and Label is a very short string)
 |  Legend is of form:  string/xdisplacement
 |  List is list of pairs of numerics (poosibly intervals)
 |
 | Features:
 |      - Copy menu command will put picture into the Clipboard
 |      - For debugging, assert: 
 |trace_plot.
 |      - clause $graph_size/4 controls size of graph:
 *====================================================================================*/

$graph_size(50, 320, 20, 220).

/* ********************************* testing:

?-plot( plottest, 'X axis':[-10,100], 'Y':[-10,100],
      'Testing plot routine'/0,
       [ [ 0,80],[10,70],[20,65],[30,55],[40,50],
         [60,55],[70,65],[80,70],[90,80],[100,98] ]).

*/

plot(Name, Xlbl:Xrange, Ylbl:Yrange, Legend, List)
    :- 
    setup_plot( Name, Xlbl:Xrange, Ylbl:Yrange, Legend, PlotIF),  
    plotlist( PlotIF, List),
    endplot( PlotIF).

% The window creation, axes etc are handled in setup_plot, while function
% graphing is done in plotlist- this allows plotting of multiple functions on
% the same graph. Endplot is needed to end the picture and actually draws 
% the picture.
%
% The method used is to define the mapping between graph coordinates and
% window coordinates using interval arithmetic.

setup_plot( Name, Xlbl:[XL,XH], Ylbl:[YL,YH], Legend, 
                                Name(Pict,X,Y,NX,NY)   )
    :- 
    trace_plot -> [nl, write( setup_plot)], 
    $make_graph(Name, [GXlo, GXhi], [GYlo, GYhi], Pict),
    X::real(XL,XH),
    Y::real(YL,YH),
    $normalize(X, NX, [GXlo, GXhi],  1),
    $normalize(Y, NY ,[GYlo, GYhi], -1), 
    $legend(Name,Legend, [GXlo, GXhi], GYhi, Xlbl,Ylbl),
    $xlabel(Name,Xlbl:[XL,XH], [GXlo,GXhi], GYhi),
    $ylabel(Name,Ylbl:[YL,YH], [GYlo,GYhi], GXlo),
    $xaxis(Name, Y, NX, NY),  % line y=0
    $yaxis(Name, X, NX, NY),  % line x=0
    trace_plot -> write( ' done') . 

plotlist(Name(Pict,X,Y,NX,NY), List)
    :-
    trace_plot -> [nl, write( plotlist)],
    dograf(Name, [fillpat(hollow)]),      % set default mode
    foreach( $memb( [X,Y], List) do 
             dograf(Name, [rectabs(NX, NY)]) ). % V3 specific

% member for list of pairs of intervals
$memb( [X,Y], [[X1,Y1],_..])
    :-
    X==X1,Y==Y1.
$memb( X, [_,Xs..])
    :- 
    $memb(X,Xs).

%-------------------------------------
%      user interface stuff
%-------------------------------------

endplot(Name(Pict,X,Y,NX,NY))
    :-
    trace_plot -> [nl, write( end_plot)],
    endpicture( Pict),
    attachpicture(Pict,Name),
    remember( attachedpix(Name,Pict)).   % must track relation of pix to windows

userclose(Window, D1,D2)
    :-                   % resource mgmt for pix
    forget(  attachedpix(Window, Pict) ),
    detachpicture(Pict),
    deletepicture(Pict), 
    fail.

menuselect(Window, 'Edit', 'Copy')
    :-
    $clipgraph( Window).

$clipgraph( Window )
    :-
    recall( attachedpix(Window,Pict)),
    picttoscrap( Pict).

%-------------------------------------
%     cosmetic utilities
%-------------------------------------

$wind_size(Wx,Wy)
    :-
    $graph_size(_,Xh,_,Yh),
    Wx is Xh + 30, 
    Wy is Yh + 60.

$normalize( X, Nx, [Lb, Ub], Sgn)
    :-
    Nx::real(Lb, Ub), 	range(X, [Lbx, _]),
    Mx is Sgn * delta(Nx) / delta(X), 
    Sgn > 0 ->
      Ox is Lb - Mx * Lbx ; Ox is Ub - Mx * Lbx,
    {Nx == Ox + Mx * X}.  % constraint equation X<->Nx
      
$legend(W, Legend/Disp, [Xl, Xh], Yh,   _, _)
    :- 
    symbol(Legend),
    !, 
    Y1 is Yh + 30, 
    X1 is Xl + Disp,
    dograf(W, [position(X1,Y1), textrel(0,0,Legend)]).

/*
$legend(W, ':='('|>'(X, Y), RHS), Ax, Yh,Xsymb,Ysymb)
    :- !,
       not(not( [ X=Xsymb, Y=Ysymb,   % cosmetics 
                  swrite( T, 'd',Y,'/d',X,' := ',RHS),
                  $legend( W,T,Ax,Yh, Xsymb,Ysymb)
                ])).  % not-not to undo the variable binding of X and Y
$legend(W, A where B,  Ax, Yh, Xs, Ys)
    :- 
    $legend(W,A,Ax,Yh,Xs,Ys).
*/
 
$xlabel( W, Name:[LB,UB], [XL,XH], Y )
    :- 
    Y1 is Y + 10, XM is (XL+XH)/2,
    swrite(L,LB), swrite(U,UB), swrite(Label,Name),
    dograf(W, [position(XM,Y1), textrel(0,0,Label),
               position(XL,Y1), textrel(0,0,L),
               position(XH,Y1), textrel(0,0,U)]).

$ylabel( W, Name:[LB,UB], [YL,YH], X )
    :- 
    X1 is X - 23, YM is (YL+YH)/2,
    swrite(L,LB), swrite(U,UB),swrite(Label,Name),
    dograf(W, [position(X1,YM), textrel(0,0,Label),
               position(X1,YH), textrel(0,0,L), 
               position(X1,YL), textrel(0,0,U)]).

$yaxis(Name, X, Nx, Ny)
    :- 
    {X == 0},                     % set x = 0 if possible
    dograf(Name, [rectabs(Nx,Ny)]), % draw Y axis
    fail.                       % restore x
$yaxis(_,_,_,_).

$xaxis(Name, Y, Nx,Ny)
    :-
    {0 == Y},
    dograf(Name, [rectabs(Nx,Ny)] ),
    fail.
$xaxis(_,_,_,_).

$make_graph_window(Name, X0, Y0, Xsize, Ysize)
    :- 
    iswindow(Name,_,_),
    !.

$make_graph_window(Name, X0, Y0, Xsize, Ysize)
    :-
    openwindow(graf, Name, pos(X0, Y0), size(Xsize, Ysize), options()),
    dograf(Name, [backcolor(white), forecolor(black), penmode(or), 
                  fillpat(clear),
                  rectabs(0, 20, Xsize, Ysize)]).

$make_graph(_name, [Xl,Xh],[Yl,Yh],Pict)
    :-
    $graph_size( Xl,Xh,Yl,Yh),  
    $wind_size(Wx, Wy),
    $make_graph_window(_name, 200, 50, Wx,Wy),
    beginpicture(_name, frame(0,0,Wx,Wy),Pict),
    dograf(_name, [fillpat(hollow), rectabs(Xl, Yl, Xh, Yh)]).




