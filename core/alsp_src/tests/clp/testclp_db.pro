/*=====================================================================*
 |			testclp_db.pro
 |		Copyright (c) 1996 Applied Logic Systems, Inc.
 |
 |		Automated test run data/examples for clp tests
 *=====================================================================*/

module testclp.
use rel_arith.

%------ Group A--------------------------------------------------------
%
%	Correspond to file: basicclp.pro
%
% THESE ARE EXAMPLES FROM THE PAPER:
%           Programming in CLP(BNR) 
%               Benhamou & Older
%           presented at PPCP '93
%  
%  Only those involving real intervals are included here.
%  This file uses the new V3.5 syntax.
%----------------------------------------------------------------------

%----- 1:

b(1,[X,Y]) :- X::real(1,3), {Y**2==X}.

orig(1, 'X::real(1,3), {Y**2==X}.').
orig_expect(1,[	'_X = [1.0000, 3.0001]',
				'_Y = [-1.7321, 1.7321]']).

%----- 2:

b(2,[X,Y]) :- [X,Y]::real, {1==X + 2*Y, Y - 3*X==0}. 	% explicit declarations

orig(2, '[X,Y]::real, {1==X + 2*Y, Y - 3*X==0}.').
orig_expect(2,[	'_Y = [0.42857, 0.42858]',
    			'_X = [0.14285, 0.14286]' ]).

%----- 3:

b(3,[X,Y]) :- {1==X + 2*Y, Y - 3*X==0}.   				% implicit declarations

orig(3, '{1==X + 2*Y, Y - 3*X==0}.').
orig_expect(3,[	'_Y = [0.42857, 0.42858]',
    			'_X = [0.14285, 0.14286]']).

%----- 4:

b(4,[X,Y]) :- {X>=0,Y>=0, tan(X)==Y, X**2 + Y**2 == 5 }. 

orig(4, ' {X>=0,Y>=0, tan(X)==Y, X**2 + Y**2 == 5 }.').
orig_expect(4,[	'_X = [1.0966, 1.0967]',
    			'_Y = [1.9486, 1.9487]' ]).

%----- 5:

b(5,[X]) :- X::real(0,1), {0==35*X**256 -14*X**17 + X}, solve(X).

orig(5, 'X:real(0,1), {0==35*X**256 -14*X**17 + X}, solve(X).').
orig_expect(5,[	'_X = [0.0000, 2.1020e-44]',
				';',
				'_X = [0.84794, 0.84795]',
				';',
    			'_X = [0.99584, 0.99585]' ]).

%----- 6:

b(6,[X,Y]) :- { X**3 + Y**3 ==2*X*Y, X**2 + Y**2==1, X>=0}, solve(X).

orig(6, '{ X**3 + Y**3 ==2*X*Y, X**2 + Y**2==1, X>=0}, solve(X).').
orig_expect(6,[	'_X = [0.39104, 0.39106]',
    			'_Y = [-0.92038, -0.92036]',
				';',
				'_X = [0.44977, 0.44980]',
    			'_Y = [0.89313, 0.89315]',
				';',
				'_X = [0.89309, 0.89316]',
    			'_Y = [0.44974, 0.44987]' ]).

%----- 7:

b(7,[X,Y]) :- X::real(1,3), {Y**2==X}. 

orig(7, 'X::real(1,3), {Y**2==X}.').
orig_expect(7,[	'?- [_H527 :: real(1, 3), {_H541 ** 2 == _H527}]',
       			'   where [_H527 : real(1.0, 3.0),',
              	'   _H541 : real(-1.73205080756888, 1.73205080756888)]. '] ).

%----- 8:

b(8,[X,Y]) :-  [X,Y]::real, {1==X + 2*Y, Y - 3*X==0}. % explicit declarations

orig(8, '[X,Y]::real, {1==X + 2*Y, Y - 3*X==0}.').
orig_expect(8,[	'?- [[_H950, _H945] :: real,',
        		'    {1 == _H950 + 2 * _H945, _H945 - 3 * _H950 == 0}]',
       			'    where [_H945 : real(0.428571428571429, 0.428571428571429),',
              	'    _H950 : real(0.142857142857143, 0.142857142857143)]. ' ]).

%----- 9:

b(9,[X,Y]) :- {X>=0,Y>=0, tan(X)==Y, X**2 + Y**2 == 5 }.

orig(9, '{X>=0,Y>=0, tan(X)==Y, X**2 + Y**2 == 5 }.').
orig_expect(9,[	'?- {_H813 >= 0, _H818 >= 0, tan(_H813) == _H818,',
        		'    ((_H813 ** 2) + (_H818 ** 2)) == 5}',
       			'    where [_H813 : real(0.0, 2.23606797749979),',
              	'        _H818 : real(0.0, 2.23606797749979)]. ' ]).

%-----10:

b(10,[Y]) :- {Y is tan(1.09)}.

orig(10, '{Y is tan(1.09)}.').
orig_expect(10,[	' ?- 1.91709182160686 is tan(1.09). ']).

%-----11:

b(11,[X,Y]) :- {X>=0,Y>=0,  X**2 + Y**2 == 5 }. 

orig(11, '{X>=0,Y>=0,  X**2 + Y**2 == 5 }. ').
orig_expect(11,[	'?- {_H567 >= 0, _H572 >= 0, _H567 ** 2 + _H572 ** 2 == 5}',
       				'    where [_H567 : real(0.0, 2.23606797749979),',
              		'    _H572 : real(0.0, 2.23606797749979)]. ' ]).

%-----12:

b(12,[X]) :- X::real(0,1), {0==35*X**256 -14*X**17 + X}, solve(X).

orig(12, 'X:real(0,1), {0==35*X**256 -14*X**17 + X}, solve(X).').
orig_expect(12,[	'?- [0.0 : real(0, 1),',
        			'{0 == (35 * 0.0 ** 256 - 14 * 0.0 ** 17) + 0.0}, solve(0.0)].',
					';',
					'?- [_H890 : real(0, 1),',
        			'{0 == (35 * _H890 ** 256 - 14 * _H890 ** 17) + _H890}, solve(_H890)]',
       				'    where [_H890 : real(0.847943660827315, 0.847943660827315)].',
					';',
    				'?- [_H634 : real(0, 1),',
        			'{0 == (35 * _H634 ** 256 - 14 * _H634 ** 17) + _H634}, solve(_H634)]',
					'    	where [_H634 : real(0.995842494200498, 0.995842494200498)].']).


%-----13:

b(13,[X,Y]) :- { X**3 + Y**3 ==2*X*Y, X**2 + Y**2==1, X>=0}, solve(X).

orig(13, '{ X**3 + Y**3 ==2*X*Y, X**2 + Y**2==1, X>=0}, solve(X).').
orig_expect(13,[	'?- [{((_H1534 ** 3) + (_H1543 ** 3)) == ((2 * _H1534) * _H1543),',
         			'    ((_H1534 ** 2) + (_H1543 ** 2)) == 1, _H1534 >= 0},solve(_H1534)]',
       				'    where [_H1534 : real(0.391018886096038, 0.391085781049752),',
              		'    _H1543 : real(-0.920382654506382, -0.92035423172858)]. ',
					';',
					'?- [{((_H1567 ** 3) + (_H1576 ** 3)) == ((2 * _H1567) * _H1576),',
         			'    ((_H1567 ** 2) + (_H1576 ** 2)) == 1,_H1567 >= 0},solve(_H1567)]',
       				'    where [_H1567 : real(0.449060394395367, 0.450226789190836),',
              		'    _H1576 : real(0.892914239048135, 0.893501405810577)]. ',
					';',
    				'?- [{((_H1474 ** 3) + (_H1483 ** 3)) == ((2 * _H1474) * _H1483),',
         			'    ((_H1474 ** 2) + (_H1483 ** 2)) == 1,_H1474 >= 0},solve(_H1474)]',
       				'    where [_H1474 : real(0.892906985150622, 0.893513338800849),',
              		'    _H1483 : real(0.449036650380523, 0.450241175226374)].' ]).

%-----14:

b(14,[X,Y]) :- [X,Y]::real(0,_), {5>=X**2, 5>=Y**2,Y==tan(X)}.

orig(14, '[X,Y]:real(0,_), {5>=X**2, 5>=Y**2,Y==tan(X)}.').
orig_expect(14,[	'?- [[_H922, _H917] : real(0, _H931),',
        			'    {5 >= _H922 ** 2, 5 >= _H917 ** 2, _H917 == tan(_H922)}]',
       				'    where [_H917 : real(0.0, 2.23606797749979),',
              		'    _H922 : real(0.0, 2.23606797749979)]. ' ]).

%-----15:

b(15,[Y]) :-  { tan(2.236)==Y }.

orig(15, '{ tan(2.236)==Y}.').
orig_expect(15,[	'?- {tan(2.236) == _H502}',
       				'    where [_H502 : real(-1.27473488083765, -1.27473488083765)]. ' ]).

%-----16:

b(16,[Y]) :-  { tan(X)== 1.274734881 }.

endmod.
