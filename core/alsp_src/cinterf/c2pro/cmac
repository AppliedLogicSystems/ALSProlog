/*=====================================================================*
 |		cmac.pro
 |	Copyright(c) 1991-94 Applied Logic Systems, Inc.
 |
 |		Path syntax for C include files in mac systems
 |
 | For each functionality, there are two versions of a predicate, one
 | that operates on string input, and another that operates on a token
 | list input.
 |
 | Terminology (Path Syntax): Path = Disk : component component ....
 *=====================================================================*/

module c2pro.

c2pro_os(mac).

	%
	% default system include paths
	%

defaultIncludePath('Boston',[mpw,interfaces,cincludes],abs).

	%
	% get the disk component of a path specification
	%

diskOfPathStr(Disk) --> diskName(Disk), [0': ], { Disk \= ''}, !.
diskOfPathStr('') --> [].

diskName(Disk) --> diskStr(DiskStr), {name(Disk,DiskStr)}.

diskStr([Char|Rest]) --> [Char], { isAlphaNumeric(Char) }, !,
	diskStr(Rest).
diskStr([]) --> [].

	%
	% extract 'Disk:' from a path token list
	%

diskOfPathTokList(Disk) --> [ident(Disk),colon], !.
diskOfPathTokList('') --> [].
 
	%
	% the type of a path is either abs or rel
	%

typeOfPathStr(Disk,CompStr,abs) :- Disk \= '', !.
typeOfPathStr(Disk,CompStr,rel).

	%

typeOfPathTokList(Disk,CompTokList,abs) :- Disk \= '', !.
typeOfPathTokList(Disk,CompTokList,rel).

	%
	% get a list of directory and file components of a path
	% specification. In the predicate that takes a string argument,
	% we allow the path specification to have ? as a component or
	% * as the last component

compsOfPathStr(['::'|Comps]) --> [0': ,0': ], !, compsOfPathStr(Comps).
compsOfPathStr([':'|Comps])  --> [0': ], !, compsOfPathStr(Comps).
compsOfPathStr( _ )          --> [0'* ], !.
compsOfPathStr([_|Comps])    --> [0'? ], !, moreComps(Comps).
compsOfPathStr([Comp|Comps]) --> compOfPathStr(Comp), !, 
	moreComps(Comps).
compsOfPathStr([]) --> [].

moreComps(['::'|Comps]) --> [0': ,0': ], !, compsOfPathStr(Comps).
moreComps(Comps) --> [0': ], !, compsOfPathStr(Comps).
moreComps([]) --> [].

compOfPathStr(File) --> compStr(FileStr), {name(File,FileStr)}.

compStr([Char|Rest]) --> [Char], {isAlphaNumeric(Char)}, !,
	compStr(Rest).
compStr([0'. |Rest]) --> [0'. ], !, compStr(Rest).
compStr([0'- |Rest]) --> [0'- ], !, compStr(Rest).
compStr(Str) --> [0''], !, endQuote(Str).
compStr([]) --> [].

endQuote([]) --> [0''], !.
endQuote([Char|Rest]) --> [Char], endQuote(Rest).

	%

compsOfPathTokList(['::'|Comps]) --> [coloncolon], !, 
	compsOfPathTokList(Comps).
compsOfPathTokList([':'|Comps]) --> [colon], !,
	compsOfPathTokList(Comps).
compsOfPathTokList( _ ) --> [star], !.
compsOfPathTokList([_|Comps]) --> [question], !,
	moreCompsTokList(Comps).
compsOfPathTokList([Comp|Comps]) --> compOfPathTokList(Comp), !,
	moreCompsTokList(Comps).
compsOfPathTokList([]) --> [].

moreCompsTokList(['::'|Comps]) --> [coloncolon], !, compsOfPathTokList(Comps).
moreCompsTokList(Comps) --> [colon], !, compsOfPathTokList(Comps).
moreCompsTokList([]) --> [].

compOfPathTokList(Comp) --> compTokList(CompTokList),
	{ CompTokList \= [], catenate(CompTokList,Comp) }.

compTokList([Id|Rest]) --> [ident(Id)], !, compTokList(Rest).
compTokList(['..'|Rest]) --> [dotdot], !, compTokList(Rest).
compTokList(['.'|Rest]) --> [dot], !, compTokList(Rest).
compTokList(['-'|Rest]) --> [minus], !, compTokList(Rest).
compTokList(['--'|Rest]) --> [minusminus], !, compTokList(Rest).
compTokList([]) --> [].

	%
	% convert a ground file list to a pathname
	%

pathListToName(Disk,Comps,Type,Name) :-
	diskSym(Disk,DiskList),
	addPathSep(Comps,NList),
	append(DiskList,NList,List2),
	catenate(List2,Name).

diskSym('',[]) :- !.
diskSym(X,[X,':']).
 
addPathSep([],[]).
addPathSep([File|IList],[File|OList]) :-
	possPathSep(IList,OList,NList),
	addPathSep(IList,NList).

possPathSep([],L,L).
possPathSep([':'|_],L,L) :- !.
possPathSep(['::'|_],L,L) :- !.
possPathSep([_|_],[':'|L],L).

endmod.
