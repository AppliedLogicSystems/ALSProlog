/*
 * deps.pro		-- dependency generator
 *	Copyright(c) 1991 Applied Logic Systems, Inc.
 *
 * Author: Prabhakaran Raman
 *
 * Created: 1/23/92
 * Revision History:
 *
 * Usage : 	alspro deps -g deps -p Options InputFiles
 *	where allowed Options are
 *	-o File	specifies the output file (default user)
 *	-i Ext	input file extension	
 *	-t Ext	make target extension	
 */


module deps.

    %
    % default in and sout suffix
    %

    inSuffix('.c').

    outSuffix('.o').

    %
    %

    export deps/0.

    deps :-
	builtins:command_line(L),
	parse_command_line(L,InFiles),
	deps(InFiles),
	told.
    deps :- seen, told, write('deps failed'), nl.

    %
    % parse the command line and return the list of files
    %

    parse_command_line([],[]).
    parse_command_line([F|R],Files) :-
	name(F,[~-, OptChar]),
	!,
	parse_option(OptChar,R,Rest),
	parse_command_line(Rest,Files).
    parse_command_line([F|R],[F|Files]) :-
	parse_command_line(R,Files).

    parse_option(~o,[OutFile|Rest],Rest) :- !,
	tell(OutFile).
    parse_option(~i,[InExt|Rest],Rest) :- 
	retract(inSuffix(_)),
	!,
	assert(inSuffix(InExt)).
    parse_option(~t,[TgtExt|Rest],Rest) :-
	retract(outSuffix(_)),
	!,
	assert(outSuffix(TgtExt)).
    parse_option( _, R, R).

    %
    % deps/1.
    %

    deps([]).
    deps([First | Rest]) :-
	inSuffix(ISuffix),
	buildName(First,ISuffix,IName),
	outSuffix(OSuffix),
	buildName(First,OSuffix,OName),
	read_file(IName,Deps),
	write(OName), write(': '), write(IName),
	write_deps(Deps,[]),
	nl,
	deps(Rest).

    buildName(N,S,O) :-
	name(N,NS),
	name(S,SS),
	dappend(NS,SS,OS),
	name(O,OS).


    write_deps([], _).
    write_deps([F|R],Seen) :- 
	dmember(F,Seen),
	!,
	write_deps(R,Seen).
    write_deps([F|R],Seen) :- 
	write(' '), 
	write(F),
	seen_file(F,Deps),
	append(Deps,R,NewDeps),
	write_deps(NewDeps,[F|Seen]).


    %
    % read_file/1.
    %

    read_file(File,Deps) :-
	exists(File),
	see(File),
	!,
	read_lines([], Deps),
	seen.
    read_file(File,[]) :- 
	telling(Old),
	tell(user),
	printf("Error opening %t for read access\n",[File]),
	tell(Old).

    %
    % read_lines/1
    %

    read_lines(OpenFiles, Deps) :- 
	get_line(Line),
	!,
	process_line(Line, OpenFiles, Deps).
    read_lines( _, [] ).


    %
    % get a line
    %

    get_line(Line) :-
	get0(C),
	get_line1(C,Line).

    get_line1(-1,[]) :- !, fail.
    get_line1(C,Line) :- get_line2(C,Line).

    get_line2(-1,[]) :- !.
    get_line2(~^J,[]) :- !.
    get_line2(~^M,[]) :- !.
    get_line2(C,Line) :- get0(C1), check_comment(C,C1,Line).

    check_comment(~/,~*,Line) :- 
	!,
	get0(C),
	get0(C1),
	end_comment(C,C1,Line).
    check_comment(C,C1,[C|Line]) :- get_line2(C1,Line).

    end_comment(-1,_,[]) :- !.
    end_comment(C,-1,[]) :- !.
    end_comment(~*,~/,Line) :- !, get0(C), get_line2(C,Line).
    end_comment(_,C,Line) :- get0(C1), end_comment(C,C1,Line).

    % 
    % scan the line for #include "file"
    %

    process_line(Line, OpenFiles, [NewFile|Deps]) :-
	skip_spaces(Line,[~# |Line1]),
	skip_spaces(Line1,Line2),
	append("include",Line3,Line2),
	skip_spaces(Line3,[~"|Line4]),
	get_quotestr(Line4,FileStr),
	name(NewFile,FileStr),
	!,
	include_file(NewFile, OpenFiles),
	read_lines(OpenFiles,Deps).
    process_line( _, OpenFiles, Deps) :-
	read_lines(OpenFiles, Deps).


    include_file(File, OpenFiles) :-
	seen_file(File, _),		% file seen previously
	!.
    include_file(File, OpenFiles) :-
	dmember(File, OpenFiles),	% skip recursive include
	!.
    include_file(File, OpenFiles) :-
	exists(File),			% new file, exists
	!,
	seeing(PrevFile),
	see(File),
	read_lines([PrevFile|OpenFiles], FileDeps),
	assert( seen_file(File,FileDeps) ),
	seen,
	see(PrevFile).
    include_file( File, OpenFiles) :-	% file does not exist
	assert( seen_file(File,[]) ).


    skip_spaces([C|Rest], Line) :-
	C =< 32,
	!,
	skip_spaces(Rest,Line).
    skip_spaces(Line, Line).


    get_quotestr([~"|_],[]) :- !.	
    get_quotestr([C|Rest],[C|FileStr]) :- get_quotestr(Rest,FileStr).

endmod.

