/*-------------------------------------------------------------------------*
 |			makefile.abs
 | Makefile.in is the Makefile template for alspro.
 | Makefile is generated from Makefile.in by running configure.
 |
 *-------------------------------------------------------------------------*/

schema([
	cmnt(top),
	systype = port,
	'ARCH'	= port,

	case(&(context_name), [
		(mac: [
			srcdir 		= '@srcdir@',
			'OS'		= 'macos7',
			'SOS'		= 'macos'
			] ),
		(os2: [
			srcdir = 	'@srcdir@',
			'MACH_OS'	= '@MACH_OS@',
			'OS'		= 'os2_3.0',
			'SOS'		= os2
			] ),
		(djgpp1: [
			srcdir 		= '@srcdir@',
			'OS'		= djgpp1,
			'SOS'		= djgpp1,
			'SHELL'		= '/bin/sh'
			] ),
		(djgpp2: [
			srcdir 		= '@srcdir@',
			'OS'		= 'djgpp2.0',
			'SOS'		= djgpp2,
			'SHELL'		= '/bin/sh'
			] ),
		(w31: [
			'include C:\\HIGHC\WIN\vars.mkf',
			srcdir 		= '@srcdir@',
			'OS'		= 'win3.1',
			'SOS'		= w31,
			'SHELL'		= '/bin/sh'
			] ),
		(_: [
			srcdir 			= '@srcdir@'/'..',
			'MACH_OS'		= '@MACH_OS@',
			'OS'			= '@OS@',
			'SOS'			= '@SOS@',
			'INSTALL'		= '@INSTALL@',
			'INSTALL_PROGRAM'	= '@INSTALL_PROGRAM@',
			'INSTALL_DATA'		= '@INSTALL_DATA@',
			'LN_S'			= '@LN_S@',
			'SHELL'			= '/bin/sh'
			] ) ] ),

	case(&(context_name), [
		(mac: rule(':')),
		(_: ~'VPATH' = &(vpath_val))]),

	case(&(context_name), [
		(mac: [
			'CC68k'			= 'MWC68K',
			'LINK68k'		= 'MWLINK68K',
			'CCppc'			= 'MWCPPC',
			'LINKppc'		= 'MWLINKPPC',

			%% For debugging, add -sym full and remove -d
			'LIBLINKFLAGS'		= '-library -sym full -d',
			'TOOLLINKFLAGS'		= '-mpwtool -sym full -d',
			'SIOUXLINKFLAGS'	= '-application -c \'ALS4\' -size on -sizemin 10240 -sizemax 10240 -sym full -d'
			] ),
		(w31: [
			'CC'			= hc386,
			'LINK'			= '$(CC)'
			] ),
		(_: [
			'CC'			= gcc,
			'LINK'			= '$(CC)'
			] ) ] ),

	case(&(context_name),
		[
		 (w31:('CFLAGS' = &(highC_cflags))),
		 (mac:   ([
		    'CFLAGS' = '-EOL -mpw_chars -requireprotos -w off -nosyspath -sym full',
		    'CFLAGS68K' = '-opt full -model farData -model codesmart',
                    'CFLAGSPPC' = '-opt speed,peep,global,l3'])),
		 (os2: ('CFLAGS' = &(gcc_cflags))),
		 (_: ('CFLAGS' = &(gcc_cflags))) 
		]),

	case(&(context_name), [
		(mac:  [
			'GUSIIncludes'	= '{MPW}Interfaces:GUSIIncludes:',
			'GUSILibraries'	= '{MPW}Libraries:GUSILibraries:',
			'MoreFilesIncludes' = '{MPW}Interfaces:MoreFilesIncludes:',
			'MoreFilesLibraries' = '{MPW}Libraries:MoreFilesLibraries:',
			'Eve68KLibraries' = '{MPW}Libraries:Eve68KLibraries:',
			'EvePPCLibraries' = '{MPW}Libraries:EvePPCLibraries:',
			'EveIncludes' = '{MPW}Interfaces:EveIncludes:',

			'COMMONLIBS68K' = '"{MW68KLibraries}MathLib68K (4i/8d).Lib"  \xB6\n\
					   "{MW68KLibraries}CPlusPlus.lib" \xB6\n\
					   "{MW68KLibraries}ToolLibs.o"  \xB6\n\
					   "{MW68KLibraries}PLStringFuncs.glue.lib"  \xB6\n\
					   "{MoreFilesLibraries}MoreFiles.68k"',

			'MPWINITLIBS68K'= '"{MW68KLibraries}MPWRuntime.68K.lib" \xB6\n\
					   "{MW68KLibraries}MacOS.Lib" \xB6\n\
					   "{MW68KLibraries}MathLib68K (4i/8d).Lib" \xB6\n\
					   "{MW68KLibraries}MPW ANSI (4i/8d) C.68K.Lib" \xB6\n\
					   "{MW68KLibraries}ToolLibs.o" \xB6\n\
					   "{MW68KLibraries}PLStringFuncs.glue.lib"',

%%			'MPWLIBS68K'	= '"{GUSILibraries}GUSI.Lib.68K" \xB6\n\
%%					   {COMMONLIBS68K}',
			'MPWLIBS68K'	= '',

			'SIOUXLIBS68K'	= '"{MW68KLibraries}MacOS.Lib" "{GUSILibraries}GUSI.Lib.68K" \xB6\n\
					   "{MW68KLibraries}ANSI (N/4i/8d) C.68K.Lib" \xB6\n\
					   "{MW68KLibraries}SIOUX.68K.Lib" \xB6\n\
					   {COMMONLIBS68K}',

			'COMMONLIBSPPC'	= '"{SharedLibraries}InterfaceLib" \xB6\n\
					   "{MWPPCLibraries}ANSI (NL) C.PPC.Lib"  \xB6\n\
					   "{MWPPCLibraries}MathLib" \xB6\n\
					   "{MWPPCLibraries}PPCToolLibs.o"  \xB6\n\
					   "{MWPPCLibraries}PLStringFuncsPPC.lib"  \xB6\n\
					   "{MoreFilesLibraries}MoreFiles.PPC"',

			'MPWLIBSPPC'	= '"{SharedLibraries}InterfaceLib" \xB6\n\
					   "{MWPPCLibraries}MathLib" \xB6\n\
					   "{GUSILibraries}GUSIMPW.Lib.PPC" \xB6\n\
					   "{GUSILibraries}GUSI.Lib.PPC" \xB6\n\
					   "{MWPPCLibraries}MPW ANSI.C.PPC.Lib" \xB6\n\
					   "{MWPPCLibraries}MWMPWCRuntime.Lib" \xB6\n\
					   "{MWPPCLibraries}PPCToolLibs.o" \xB6\n\
					   "{MWPPCLibraries}PLStringFuncsPPC.lib" \xB6\n\
					   "{MoreFilesLibraries}MoreFiles.PPC" \xB6\n\
					   "{MWPPCLibraries}console.stubs.c.o"',

			'SIOUXLIBSPPC'	= '"{GUSILibraries}GUSI.Lib.PPC" \xB6\n\
					   "{MWPPCLibraries}MWCRuntime.Lib" \xB6\n\
					   "{MWPPCLibraries}SIOUX.PPC.Lib" \xB6\n\
					   {COMMONLIBSPPC}',
					   
			'EVE68KLIB' = '"{Eve68KLibraries}E3ITF.o"',
			'EVEPPCLIB' = '"{EvePPCLibraries}E3ITF.o"'
			] ),
		(djgpp1: [
			'LDFLAGS'		= '',
			'LIBS'			= ' $(srcdir)/i386/djgpp/libregex.a -lm ',
			'X_CFLAGS'		= '',
			'X_LIBS'		= '',
			'X_EXTRA_LIBS'		= '',
			'TARGET'		= djgpp1,
			prefix			= 'go32 ',
			exec_prefix		= '$(prefix)'
			] ),
		(djgpp2: [
			'LDFLAGS'		= '',
			'LIBS'			= ' -lm ',
			'X_CFLAGS'		= '',
			'X_LIBS'		= '',
			'X_EXTRA_LIBS'		= '',
			'TARGET'		= djgpp2,
			prefix			= '',
			exec_prefix		= '$(prefix)'
			] ),
		(os2: [
			'LDFLAGS'		= '',
			'LIBS'			= '',
			'X_CFLAGS'		= '',
			'X_LIBS'		= '',
			'X_EXTRA_LIBS'		= '',
			'TARGET'		= os2,
			prefix			= '/usr/local',
			exec_prefix		= '$(prefix)'
			] ),
		(_: [
			'LDFLAGS'		= '',
			'LIBS'			= '@LIBS@',
			'X_CFLAGS'		= '@X_CFLAGS@',
			'X_LIBS'		= '@X_LIBS@',
			'X_EXTRA_LIBS'		= '@X_EXTRA_LIBS@',
			'TARGET'		= '@TARGET@',
			prefix			= '/usr/local',
			exec_prefix		= '$(prefix)'
			] ) ] ),

	case(&(context_name),
		[
		 (djgpp1:shell( ['include ../generic.mkf',
					    'include ../port.mkf'])),
		 (djgpp2:shell( ['include ../generic.mkf',
					    'include ../port.mkf'])),
		 (w31:shell(['include ../generic.mkf',
					    'include ../port.mkf'])),
		 (mac:[include_raw('../generic/generate/generic.mac'),
		       include_raw('../port/port.mac')  ]),
		 (_:shell(  ['include $(srcdir)/generic/generic.mkf',
					    'include $(srcdir)/port/port.mkf'])) ]),

	case(&(context_name), [
			(unix: rule(mi)),
			(_: noop) ]),

	case(&(context_name), [
			(mac: [objects_68k = '{gfiles_68k_o} {afiles_68k_o}',
			       objects_ppc = '{gfiles_ppc_o} {afiles_ppc_o}',
			       demo_objects_68k = '{gdemofiles_68k_o}',
			       demo_objects_ppc = '{gdemofiles_ppc_o}']),
			(_: objects = '$(gfiles_o) $(afiles_o)')]),

	case(&(context_name), [
		  (mac: noop ),
		  (_:	[
			rule(cppflags),
			rule(setup),
			rule('pi_cfg.h'),
			rule('pi_init.c')
				]) ]),

	case(&(context_name), [
			(mac: [rule('{objects_ppc} {objects_68k}'),
			       rule('alspro.ppc.lib'),
			       rule('alspro.68k.lib'),
			       rule('demo_alspro.ppc.lib'),
			       rule('demo_alspro.68k.lib')] ),
			(_: rule('alspro.a'))]),

	case(&(context_name), [
			(mac: [
				rule(mpw_alspro_b_68k),
				rule(mpw_alspro_b_ppc),
				rule(sioux_alspro_b_68k),
				rule(sioux_alspro_b_ppc),
				rule(mpw_alspro_b),
				rule(sioux_alspro_b),
				rule(demo_sioux_alspro_b),
				rule(alspro_b),
				rule(mpw_alspro),
				rule('builtins.r'),
				rule(sioux_alspro),
				rule(demo_sioux_alspro)
			      ]),
			(_: rule('alspro_b'))]),

	'IMGOPTS' = 'select_lib(builtins,[debugger])',
	rule(alspro),

	case(&(context_name), [
			(mac: [ 
				testdir	= '{srcdir}tests:',
				rule(testrun)
				]),
			(_:[
				testdir	= '$(srcdir)'/tests,
				rule(testrun)
				] ) ]),

	rule(cleanup),
	rule(super_clean)
]).				%% End of Schema

cmnt(top) = ['        makefile.in',
      '    Copyright (c) 1994-95 Applied Logic Systems, Inc.',
      '  ',
      '  Makefile template for bld-port: Byte/Threaded version ',
      '  For building ALS-Prolog on ' + '>> ' + &(context_name) + ' <<',
      '  ',
      'Generated by abs2make from bld-port/makefile.abs: '+date+' - '+time].

&(vpath_val)  = 
	case(&(context_name),[
		(unix: ('$(srcdir)'/generic;'$(srcdir)'/port;'$(srcdir)'/port/'@SOS@';'..' )),
		(os2:  ('$(srcdir)'/generic;'$(srcdir)'/port;'$(srcdir)'/port/os2;'..' )),
		(djgpp1: ('$(srcdir)'/generic;'$(srcdir)'/port;'$(srcdir)'/port/djgpp1;'..' )),
		(djgpp2: ('$(srcdir)'/generic;'$(srcdir)'/port;'$(srcdir)'/port/djgpp2;'..' )),
		(_: ('$(srcdir)'/generic;'$(srcdir)'/port;'$(srcdir)'/port/'@SOS@';'..' )) 
			  ]).

rule(':', ['{srcdir}generic:', '{srcdir}{ARCH}:'], []). 

&(gcc_cflags)   = '-O -g -Wall -Wshadow -Wconversion -Wstrict-prototypes -Wmissing-prototypes'.
&(highC_cflags) = '-Hwin ' .
&(mpw_cflags)   = '-O ' .

rule(cppflags,
	[],
	['echo $(CPPFLAGS) > cppflags',
	 'echo $(CFLAGS) >> cppflags',
	 'echo $(X_CFLAGS) >> cppflags' ]).

rule(setup,
	['pi_cfg.h', 'pi_init.c',cppflags],
	['echo setup done > setup'] ).

rule(mi,[],['$(srcdir)/bin/cmn_mkfi', 'mv cmn_info.mkf ..']).

rule('pi_cfg.h',
 	['$(srcdir)'/generic/'pi_cfg.in'],
	case(&(context_name),
		[(mac:(['Duplicate -y {srcdir}generic/pi_cfg.in pi_cfg.h'])),
		 ( _ :(['cp $(srcdir)/generic/pi_cfg.in pi_cfg.h']))]) ).

rule('pi_init.c',
 	['$(srcdir)'/generic/'pi_init.c'],
	case(&(context_name),
		[(mac:(['cp $(srcdir)/generic/pi_init.c  pi_init.c'])),
		 ( _ :(['cp $(srcdir)/generic/pi_init.c  pi_init.c'])) ]) ).

	%% This needs more case/by/case analysis:
rule('alspro.a',
	['setup security.o $(objects)'],
	['ar ruv alspro.a security.o $(objects)',
	 '-ranlib alspro.a']).

	%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	%%%%% Macintosh Version Specifics %%%
	%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

rule('{objects_ppc} {objects_68k}', ['magic.h'], []).


/* Libraries */

rule('alspro.68k.lib',
	['security.68k.o', '{objects_68k}'],
	['{LINK68K} -o alspro.68k.lib {LIBLINKFLAGS} security.68k.o {objects_68k}']).

rule('demo_alspro.68k.lib',
	['{demo_objects_68k}', '{objects_68k}'],
	['{LINK68K} -o demo_alspro.68k.lib {LIBLINKFLAGS} {demo_objects_68k} {objects_68k}']).

rule('alspro.ppc.lib',
	['security.ppc.o', '{objects_ppc}'],
	['{LINKPPC} -o alspro.ppc.lib {LIBLINKFLAGS} security.ppc.o {objects_ppc}']).

rule('demo_alspro.ppc.lib',
	['{demo_objects_ppc}', '{objects_ppc}'],
	['{LINKPPC} -o demo_alspro.ppc.lib {LIBLINKFLAGS} {demo_objects_ppc} {objects_ppc}']).

/* MPW Tools */

%% I can't get it to link under CW8
rule(mpw_alspro_b_68k,
	[ext('pimain.68k',&(object)), 'sioux_stub.68k.o', 'alspro.68k.lib'],
	['{LINK68K} -o mpw_alspro_b_68k {TOOLLINKFLAGS} {MPWINITLIBS68K} pimain.68k.o alspro.68k.lib sioux_stub.68k.o {MPWLIBS68K}']).

rule(mpw_alspro_b_ppc,
	[ext('pimain.ppc',&(object)), 'sioux_stub.ppc.o', 'alspro.ppc.lib'],
	['{LINKPPC} -o mpw_alspro_b_ppc {TOOLLINKFLAGS} pimain.ppc.o alspro.ppc.lib sioux_stub.ppc.o {MPWLIBSPPC}']).

rule('mpw_alspro_b',
	[/*ext('pimain.68k',&(object)),'alspro.68k.lib', */
	 ext('pimain.ppc',&(object)), 'sioux_stub.ppc.o', 'alspro.ppc.lib'],
	[/*'{LINK68K} -o mpw_alspro_b {TOOLLINKFLAGS} {MPWINITLIBS68K} pimain.68k.o alspro.68k.lib {MPWLIBS68K}',*/
	 '{LINKPPC} -o mpw_alspro_b {TOOLLINKFLAGS} pimain.ppc.o alspro.ppc.lib sioux_stub.ppc.o {MPWLIBSPPC}']).
	 
rule('mpw_alspro',
	['mpw_alspro_b'],
	['mpw_alspro_b -b -g ''save_base_package(mpw_alspro)''']).

/* Builtins */

rule('builtins.r',
	[mpw_alspro],
	['DeRez mpw_alspro > builtins.r']).

/* SIOUX Applications */

rule(sioux_alspro_b_68k,
	[ext('pimain.68k',&(object)),'alspro.68k.lib',
	 '{srcdir}port:macos:alsres.r'],
	['{LINK68K} -o sioux_alspro_b_68k {SIOUXLINKFLAGS} pimain.68k.o alspro.68k.lib {SIOUXLIBS68K}',
	 'Rez -o sioux_alspro_b_68k -a {srcdir}port:macos:alsres.r']).

rule(sioux_alspro_b_ppc,
	[ext('pimain.ppc',&(object)),'alspro.ppc.lib',
	 '{srcdir}port:macos:alsres.r'],
	['{LINKPPC} -o sioux_alspro_b_ppc {SIOUXLINKFLAGS} pimain.ppc.o alspro.ppc.lib {SIOUXLIBSPPC}',
	 'Rez -o sioux_alspro_b_ppc -a {srcdir}port:macos:alsres.r']).

rule('sioux_alspro_b',
	[ext('pimain.68k',&(object)),'alspro.68k.lib',
	 ext('pimain.ppc',&(object)),'alspro.ppc.lib',
	 '{srcdir}port:macos:alsres.r'],
	['{LINK68K} -o sioux_alspro_b {SIOUXLINKFLAGS} pimain.68k.o alspro.68k.lib {SIOUXLIBS68K}',
	 '{LINKPPC} -o sioux_alspro_b {SIOUXLINKFLAGS} pimain.ppc.o alspro.ppc.lib {SIOUXLIBSPPC}',
	 'Rez -o sioux_alspro_b -a {srcdir}port:macos:alsres.r']).

rule('demo_sioux_alspro_b',
	[ext('pimain.68k',&(object)),'demo_alspro.68k.lib',
	 ext('pimain.ppc',&(object)),'demo_alspro.ppc.lib',
	 '{srcdir}port:macos:alsres.r'],
	['{LINK68K} -o demo_sioux_alspro_b {SIOUXLINKFLAGS} pimain.68k.o demo_alspro.68k.lib {SIOUXLIBS68K} {EVE68KLIB}',
	 '{LINKPPC} -o demo_sioux_alspro_b {SIOUXLINKFLAGS} pimain.ppc.o demo_alspro.ppc.lib {SIOUXLIBSPPC} {EVEPPCLIB}',
	 'Rez -o demo_sioux_alspro_b -a {srcdir}port:macos:alsres.r']).

rule('sioux_alspro',
	[sioux_alspro_b, 'builtins.r'],
	['Duplicate -y sioux_alspro_b sioux_alspro', 'Rez -o sioux_alspro -a builtins.r']).

rule('demo_sioux_alspro',
	[demo_sioux_alspro_b, 'builtins.r'],
	['Duplicate -y demo_sioux_alspro_b demo_sioux_alspro', 'Rez -o demo_sioux_alspro -a builtins.r']).
	

	%%%%%%%%%%%%%%%%%%%%%%
	%%%%% ALL Versions %%%
	%%%%%%%%%%%%%%%%%%%%%%

rule(alspro_b,
	case(&(context_name), [
		(mac: ['mpw_alspro']),
		(_: [ext(pimain,&(object)),'alspro.a'])]),
	case(&(context_name),[
		(mac: ['duplicate -y mpw_alspro_b alspro_b']),
		(djgpp1: ['$(CC) -o alspro_b $^ $(LDFLAGS) $(LIBS)',
				 'coff2exe alspro_b' ]),
		(djgpp2: ['$(CC) -o alspro_b $^ $(LDFLAGS) $(LIBS)',
				 'coff2exe alspro_b' ]),
		(_:['$(CC) -o alspro_b $^ $(LDFLAGS) $(LIBS)'])  ]) ).

rule(alspro,
	[alspro_b],
	case(&(context_name), [
		(mac: ['duplicate -y mpw_alspro alspro']),
		(djgpp1: ['alspro_b -b -obp -g ''save_image(alspro,[$(IMGOPTS)])''',
				  'coff2exe alspro']),
		(djgpp2: ['alspro_b --b obp -g ''save_image(alspro,[$(IMGOPTS)])''',
				  'coff2exe alspro']),
		(_:['alspro_b -b -obp -g ''save_image(alspro,[$(IMGOPTS)])'''])
		])
	).

rule(testrun,
	[],
	case(&(context_name),[
		(mac: [':alspro -obp -b {testdir}autotest {testdir}atest_db -g run_tests -p -srcdir {srcdir}']),
		(_: ['./alspro_b -obp -b $(testdir)/autotest $(testdir)/atest_db -g run_tests -p -srcdir $(srcdir)'])])).

rule(cleanup,
	[],
	case(&(context_name),[
		(mac: ['Delete ?*.o',
		       'Delete ?*.obp']),
		(_:[('-rm -f *.' + &(object)),
		 '-rm -f *.obp',
		 '-rm -f *.tmp',
		 '-rm -f *.out',
		 '-rm -f foo*',
		 '-rm -f core']) ]  )).

rule(super_clean,
	[],
	case(&(context_name),[
		(mac: ['Delete ?*.o',
		       'Delete ?*.obp']),
		(_:[('-rm -f *.' + &(object)),
	 		'-rm -f *.obp',
	 		'-mv tconfig.h tconfig.hxh',
	 		'-rm -f *.h',
	 		'-mv tconfig.hxh tconfig.h',
		 	'-rm -f *.tmp',
		 	'-rm -f *.out',
		 	'-rm -f foo*',
		 	'-rm -f *.log',
		 	'-rm -f magic',
		 	'-rm -f alspro*',
		 	'-rm -f alsmics*',
		 	'-rm -f setup',
		 	'-rm -f cppflags',
		 	'-rm -f alsdir/*mics*',
		 	'-rm -f alsdir/builtins/*.obp',
		 	'-rm -f alsdir/library/*.obp',
	 		'-rm -f core']) ] )).

%%#### Warning: don't add rm alsdir to super_clean here in bld-port;.
%%#### We run alspro in bld-port AFTER the super_clean is done in sharbld.
