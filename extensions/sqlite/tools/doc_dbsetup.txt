



Format of *.db_spec files:
-------------------------

Contains one or more terms with functor db_table and a variable number of arguments, all of which are formal equations:

	name = 

	arg_decls = <identifying db functor> (<variable number of column specs)
		required;

		Typically, <identifying db functor>  is a short functor (e.g., bp);
		Generated predicates and files utilize this, which is why it should be kept moderately short;
		
		Column specs have the form  

			a(<column name>, <column type>)
		
		where <column name> is an atom, and <column type> is drawn from either column of the following table:

			integer		'INT'
			text		'TEXT'
			real		'REAL'
			date
			time
			datetime
	
		E.g.:
		arg_decls = usra(ctr, 'INT'), a(login, 'TEXT'), a(email, 'TEXT'), a(regdate, date)),
		arg_decls = usra(ctr, integer), a(login, text), a(email, text), a(regdate, date)),

		Note that date,time,datetime are virtual types realized by generating defining code connecting
		the date,time,datetime predicates of ALS prolog with sqlite3 representations; 

	primary = <name of a column>
		commonly an integer counter, but others are acceptable;
		if ommitted, the first column in the arg_decls list is taken as the primary column

	index_fields = <sublist of column names>
		the index_fields list can be empty; it should not include primnary, since that is automatically indexed;
		if omitted, the list is assumed empty;

	data_file = <atom naming the file which will contain the sqlite3 db (no extension; sqlite3 is added)>
		if omitted, taken to be <identifying db functor>_data (e.g., bp_data.sqlite3)

	[test/update]_data_term = a term of the structure of arg_dels (i.e., functor is <identifying db functor> 
		arity is the arity of the arg_decls expression), with arguments begin example values that might
		be stored in the generated database;  these equations (multiple are allowed) are used to generate
		database tests; optional

	module = <atom naming a module for the generated code>
		the default (automatic) value for this module is dbmod_<identifying db functor> ;
		this equation should used only if you have reason to place the generated code in some other module;

	foreign_keys = <list (possibly empty) of foreign key expressions>
		where a foreign key expression is of the form
			fk(<local column name>, <foreign table dentifying db functor>, <foreign table column>)
		a foreign key expression maps onto a sqlite3 foreign expression:
			FOREIGN KEY(<local column name>) REFERENCES 
				<foreign table dentifying db functor>( <foreign table column>))
		as in the example at https://www.sqlite.org/foreignkeys.html:
			FOREIGN KEY(trackartist) REFERENCES artist(artistid)
		optional;
		any db_table(...)'s containing foreign key expressions referencing another db_table, dbt,
		must all occur together in the same *.db_spec.
	

Using a *.db_spec file:
----------------------
	A *.db_spec is processed by the code in dbsetup.pro to:
		create the database and tables;
		generate moderately user-friendly interface code;
		partially generate initialization code for the database;

Processing is invoked from the commandline:

	alspro dbsetup.pro -b manage_site_specs [-p] <optional components>

With no <optional components>, manage_site_specs/0 looks for all files *.db_spec found in the directory in which it is
running, and processes the list of them. With -p present, the <optional components> are:

	-spec <(path to) a db_spec file with a possibly different extension>
	-db <path to sqlite3 database file> (may or may not exist)
	-dbd <path to dir which contains (or will contain) the sqlite3 database file>
	-dir <path to a directory in which to search for *.db_spec files>



