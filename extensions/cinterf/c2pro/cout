/*=================================================================*
 |		cout.pro
 |	Copyright(c) 1991-95 Applied Logic Systems Inc.
 |
 |		Output formatter for C translator
 |
 | Author : P.Raman
 |
 | Created : 9/23/91
 |	04/94 - K.Bowen - use streams; c2p typedef;
 |	05/95 - K.Bowen - consolidate os-specific info
 |
 | Major predicates :
 | -----------------
 |	output_openFile/1	-- set up output control flags
 |	output_closeFile/1	-- remove output control flags
 |	output_exclude/5	-- set up exclude spec for files
 |	output_begin_silent/0- stop all output
 |	output_end_silent/0	-- resume output
 |	output_header/2		-- print header
 |	output_footer/2		-- print footer
 |	output_macro/3		-- outputs a macro identifier
 |	output_func_gvar/4	-- output a function/gvar spec
 |	output_type/5		-- output a c type/struct/union spec
 |	output_const/3		-- output a constant spec
 |	debug/2, debug/3	-- conditionally print debugging messages
 |	error/2, error/3	-- error reporting
 | 
 |	Miscellaneous predicates: (from old cmisc.pro):
 |  ------------------------
 | 	isNumeric/2	-- returns the value of a decimal char
 |	isHex/2		-- returns the value of a hex char
 |	isOctal/2	-- returns the value of a Octal char
 |	isAlpha/1	-- tests for an alphabetic char
 |	buildName/3	-- make a symbol out of two symbols
 |	reverse/2	-- reverse a list
 |	deleteLast/2-- deletes the last item of a non-empty list
 *=================================================================*/

module c2pro.

	%--------------------------------------- 
	% output_openFile/2.
	% 	print open file message and sets up output control predicates
	%---------------------------------------

/*
output_openFile(FName,OutStream,State)
	:-
	setup_skips(FName,OutStream,State).
*/

setup_skips(FName,OutStream,State)
	:-		% already skipping
	skip_item(PrevName,all),
	FName \= PrevName,		% this makes sure that skip flags are
	!.				% are stacked when a file includes itself
setup_skips(FName,OutStream,State)
	:- 
	name(FName,FStr),
	accessC2P(tgt_os, State, OS),
	parsePathStr(FStr,OS, Disk,Comps,PathType),
	match_exclude(Disk,Comps,PathType,What),
	!,
	setup_skips_finish(FName,What,OutStream).
setup_skips(FName,OutStream,State)
	:-
	check_printf(OutStream,'\n/* Open file %t */\n\n',[FName]).

setup_skips_finish(FName,all,OutStream)
	:- !, 
	assert(skip_item(FName,all)).
setup_skips_finish(FName,What,OutStream)
	:-
	check_printf(OutStream,'\n/* Open file %t */\n\n',[FName]),
	setup_group_skips(What,FName).

setup_group_skips([],_).
setup_group_skips([Item|Rest],FName)
	:-
	assert(skip_item(FName,Item)),
	setup_group_skips(Rest,FName).

	%---------------------------------------------------------------
	%	For an #exclude spec on a user file (i.e #exclude "foo"),
	%	the pattern and incoming file must unify.
	%
	%	For an #exclude spec on a system file (i.e #exclude <foo>),
	%	we assume that the incoming file must be of abs path type,
	%	and the pattern must be of rel path type, and we use
	%	the includePath predicate to provide possible locations
	%	to complete the pattern path specification, and the
	%	completed pattern must unify with input file spec.
	%---------------------------------------------------------------

match_exclude(Disk,Comps,PathType,What)
	:-
	exclude_files(ExclType,EDisk,EComps,EPathType,What),
	match_exclude(ExclType,Disk,EDisk,Comps,EComps,PathType,EPathType).

match_exclude(_,Disk,Disk,Comps,Comps,PathT,PathT).
match_exclude(system,Disk,EDisk,Comps,EComps,abs,rel)
	:-
	includePath(Disk,InclComps,abs),
	append(InclComps,EComps,Comps).

	%---------------------------------------
	% Output_closeFile/2.
	%---------------------------------------

output_closeFile(FName,OutStream)
	:-
	debug(1,'\nCLOSING FILE %t\n',[FName]),
	remove_skips(FName,OutStream).

remove_skips(FName,OutStream)
	:- 
	retract(skip_item(FName,all)),
	!.
remove_skips(FName,OutStream)
	:- 
	skip_item( _,all), !.
remove_skips(FName,OutStream)
	:- 
	check_printf(OutStream,'\n/* Close file %t */\n\n',[FName]),
	retract_skip(FName,func),
	retract_skip(FName,const),
	retract_skip(FName,ctype),
	retract_skip(FName,gvar).


retract_skip(FName,Type)
	:- 
	retract(skip_item(FName,Type)), !.
retract_skip( _, _).

check_printf(OutStream,Fmt,Args)
	:- 
	silent, !.
check_printf(OutStream,Fmt,Args)
	:- 
	printf(OutStream,Fmt,Args),
	flush_output(OutStream).

	%---------------------------------------
	% output_exclude/5.
	%	assert exclude specification
	%---------------------------------------

output_exclude(ExclType,Disk,Comps,PathType,What)
	:- 
	assert(exclude_files(ExclType,Disk,Comps,PathType,What)).

	%---------------------------------------
	% output_begin_silent/0
	%---------------------------------------

output_begin_silent
	:- assert(silent).

	%---------------------------------------
	% output_end_silent/0
	%---------------------------------------

output_end_silent
	:-
	retract(silent), !.
output_end_silent.

	%---------------------------------------
	% output_header/2.
	%---------------------------------------

output_header(FileName,FD,Tab)
	:-
	printf('/* Generated from file %t */\n\n',[FileName]).

	%---------------------------------------
	% output_footer/2.
	%---------------------------------------

output_footer(State).

	%---------------------------------------
	% output_macro/3.
	%---------------------------------------

output_macro(Id,State)
	:-
	(silent; skip_item(_,all)), !.
output_macro(Id,State)
	:-
	accessC2P(outStream,State,OutStream),
	printf(OutStream,'als_macro(\'%t\').\n',[Id]).

	%---------------------------------------
	% output_func_or_gvar/4.
	%---------------------------------------

output_func_gvar(DSpec,Declt,State)
	:-
%	accessC2P(info_table, State, Tab),
	getInfoTable(Tab),
	deref(DSpec,Tab,RSpec,RDeclt,PSpec),
	scan_declt(Declt,ident(Name),ADeclt,PDeclt),
	append(PDeclt,PSpec,PType),
	output_func_gvar(PType,Name,DSpec,Declt,RSpec,RDeclt,ADeclt,State).

	%---------------------------------------
	%	clause 1 : int func(params);
	%	clause 2 : typedef int foo(params); foo func;
	%	clause 3 : ... gvar
	%---------------------------------------

output_func_gvar([func|PRetType],Name,DSpec,Declt,
		RSpec,RDeclt,ADeclt,State)
	:-
	scan_declt(Declt,func( ident(Name),Params),ADeclt1,PDeclt),
	!,
	output_func(Name,DSpec,ADeclt1,Params,PRetType,State).
output_func_gvar([func|PRetType],Name,DSpec,Declt,
		RSpec,RDeclt,ADeclt,State)
	:-
	scan_declt(RDeclt,func( ident(_),Params),ADeclt1,PDeclt),
	!,
	output_func(Name,RSpec,ADeclt1,Params,PRetType,State).
output_func_gvar(PRetType,Name,DSpec,Declt, RSpec,RDeclt,ADeclt,State)
	:-
	output_gvar(Name,DSpec,Declt,ADeclt,PRetType,State).

/* output_func has as evil hack attached to it to handle MSWin32
   headers.  This hack is controlled by the -mswin32funcmacros
   option.
   
   Most functions that handle text in MSWin32 have ANSI and Wide (Unicode)
   versions.  Output_func skips the Wide versions and strips the A from
   ANSI versions. */

output_func(Name,_,_,_,_,State)
	:-
	(silent; skip_item(_,all); skip_item(_,func)), !.
output_func(Name,_,_,_,_,State)
	:-
	output:win32funcmacros,
	%%accessC2P(tgt_os, State, OS),
	%%OS = mswin32,	
	atom_length(Name, Length),
	sub_atom(Name, Length, 1, LastChar),
	LastChar = 'W', !.
output_func(Name,DSpec,ADeclt,Params,PRetType,State)
	:-
	output:win32funcmacros,
	%%accessC2P(tgt_os, State, OS),
	%%OS = mswin32,	
	atom_length(Name, Length),
	sub_atom(Name, Length, 1, LastChar),
	LastChar = 'A',
	Name \== 'CharPrevExA',
	Name \== 'CharNextExA',
	Name \== 'GetStringTypeA',
	Name \== 'LineDDA',
	ShortLen is Length - 1,
	sub_atom(Name, 1, ShortLen, NewName),
	output_func0(NewName,DSpec,ADeclt,Params,PRetType,State).
output_func(Name,DSpec,ADeclt,Params,PRetType,State)
	:-
	output_func0(Name,DSpec,ADeclt,Params,PRetType,State).
	
output_func0(Name,DSpec,ADeclt,Params,PRetType,State)
	:- 
	dspec_to_str(DSpec,DSpecStr),
	adeclt_to_str(ADeclt,ADecltStr),
	accessC2P(outStream,State,OutStream),
	printf(OutStream,'\nret(\'%s %s\')/%t=\'%t\'(',[DSpecStr,ADecltStr,PRetType,Name]),
	output_params(Params,State),
	accessC2P(inFile,State,FName),
	path_directory_tail(FName,_,File),
	!,
	printf(OutStream,')/\'%t\'.\n',[File]).
output_func0(Name,_,_,_,_,State)
	:-
	error('output_func for %t failed\n',[Name],State).

output_params( [], State)
	:- !, 
	accessC2P(outStream,State,OutStream),
	printf(OutStream,'void/[void]',[]).
output_params( Params, State)
	:-
	output_neparams(Params,State).

output_neparams( [] ,_).
output_neparams( [ param(DSpec,Declt) | Rest ] ,State)
	:-
	dspec_to_str(DSpec,DSpecStr),
	scan_declt(Declt,ident(_),ADeclt,PDeclt),
	adeclt_to_str(ADeclt,ADecltStr),
%	accessC2P(info_table,State,Tab),
	getInfoTable(Tab),
	deref(DSpec,Tab,_,_,PSpec),
	append(PDeclt,PSpec,PType),
	accessC2P(outStream,State,OutStream),
	printf(OutStream,'\'%s %s\'/%t',[DSpecStr,ADecltStr,PType]),
	print_comma_cond(Rest,State),
	output_neparams(Rest,State).

output_gvar(Name,DSpec,Declt,ADeclt,PType,State)
	:-
	( silent; skip_item( _, all); skip_item( _,gvar)), !.
output_gvar(Name,DSpec,Declt,ADeclt,PType,State)
	:-
	dspec_to_str(DSpec,DSpecStr),
	adeclt_to_str(ADeclt,ADecltStr),
	accessC2P(inFile,State,FName),
	path_directory_tail(FName,_,File),
	!,
	accessC2P(outStream,State,OutStream),
	printf(OutStream,'\nals_gvar(\'%t\',\'%s %s\',%t)/\'%t\'.\n\n',
		[Name,DSpecStr,ADecltStr,PType,File]).
output_gvar(Name,DSpec,Declt,ADeclt,PType,State)
	:-
	error('Error in output_gvar for global variable %t\n',[Name],State).

	%---------------------------------------
	% output_type/4.
	%	output prolog spec for a C type
	%---------------------------------------

output_type(Name,DSpec,Declt,State)
	:-
	(silent; skip_item(_,all); skip_item(_,ctype)), !.

output_type(Name,DSpec,Declt,State)
	:-
%	accessC2P(info_table,State,Tab),
	getInfoTable(Tab),
	deref(DSpec,Tab,RSpec,RDeclt,PSpec),
	scan_declt(Declt,ident(Name),ADeclt,PDeclt),
	append(PDeclt,PSpec,PType),
	output_type(Name,RSpec,RDeclt,PType,State).

output_type(Name,RSpec,RDeclt,PType,State)
	:-
	( PType = [struct|_]; PType = [union|_]),
	get_type(RSpec,Type),
	get_struct(Type,SSpec,What),
%	accessC2P(info_table,State,Tab),
	getInfoTable(Tab),
	get_structdef(SSpec,What,Tab,Fields),
	!,
	output_struct(Name,Fields,State).
output_type(Name,_,_,PType,State)
	:-
	accessC2P(outStream,State,OutStream),
	printf(OutStream,'\nals_type(\'%t\',%t).\n',[Name,PType]).

output_struct(Name,Fields,State)
	:-
	accessC2P(outStream,State,OutStream),
	printf(OutStream,'\nals_struct(\'%t\',[',[Name]),
%	accessC2P(info_table,State,Tab),
	getInfoTable(Tab),
	output_components(Fields,'',State),
	printf(OutStream,']).\n',[]),
	!.
output_struct(Name,Fields,State)
	:-
	error('Error in output_struct for struct(%t,%t)\n',[Name,Fields],State).
	
output_components( [] ,_,_).
output_components( [ field(DSpec,Declts) | Rest ] ,Prefix,State)
	:-
%	accessC2P(info_table,State,Tab),
	getInfoTable(Tab),
	deref(DSpec,Tab,_,_,PSpec),
	output_fields(Declts,DSpec,PSpec,Prefix,State),
	(Declts = [] ; print_comma_cond(Rest,State)),
	output_components(Rest,Prefix,State).
	
output_fields( [] ,_,_,_,_).
output_fields( [ Field | Rest ] ,DSpec,PSpec,Prefix,State)
	:-
	output_field( Field, DSpec, PSpec, Prefix, State),
	print_comma_cond(Rest,State),
	output_fields( Rest, DSpec,PSpec,Prefix,State).

output_field( Field, DSpec, PSpec, Prefix, State)
	:-
	get_type(DSpec,Type),
	get_struct(Type,SSpec,What),
	get_fields(SSpec,SubFields),				% substructure found
	scan_declt(Field,ident(Name),_,[]),			% simple declarator
	!,
	catenate([Prefix,Name,'.'],NPrefix),
	output_components(SubFields,NPrefix,State).
output_field( Field,DSpec,PSpec,Prefix,State)
	:-
	scan_declt(Field,ident(Name),_,PDeclt),
	accessC2P(outStream,State,OutStream),
	printf(OutStream,'\'%t%t\'=[',[Prefix,Name]),
	append(PDeclt,PSpec,PType),
	print_ptype(PType,DSpec,State).

	%---------------------------------------
	% print_ptype is used to print out the prolog type-list
	% for fields of a structure or union. It prints out the
	% type-list as is except for the last item. If the last item
	% is a struct or union, then it prints the declaration specifier.
	% This information is used in cutils.pro to access sub, sub-sub
	% and sub-sub-sub etc fields of a structure.
	%---------------------------------------

print_ptype(PType,DSpec,State)
	:-
	( PType = [struct|_]; PType=[union|_] ),
	!,
	dspec_to_str(DSpec,DSpecStr),
	accessC2P(outStream,State,OutStream),
	printf(OutStream,'\'%s\']',[DSpecStr]).
print_ptype([Item],_,State)
	:- 
	!,
	accessC2P(outStream,State,OutStream),
	printf(OutStream,'%t]',[Item]).
print_ptype([Item|Rest],DSpec,State)
	:-
	accessC2P(outStream,State,OutStream),
	printf(OutStream,'%t,',[Item]),
	print_ptype(Rest,DSpec,State).

	%---------------------------------------
	%---------------------------------------

print_comma_cond([],State).
print_comma_cond([_|_],State)
	:- 
	accessC2P(outStream,State,OutStream),
	printf(OutStream,',\n',[]).

	%---------------------------------------
	% output_const/4.
	%---------------------------------------

output_const(Name,Type,State)
	:- 
	( silent; skip_item( _,all); skip_item( _,const)), 
	!.
output_const(Name,Type,State)
	:- 
	accessC2P(outStream, State, OutStream),
	printf(OutStream,'als_const(\'%t\',%t).\n',[Name,Type]).

	%---------------------------------------
	% debug/1.
	% debug/2.
	%---------------------------------------

debug_default_level(1).

get_debug_level(Level)
	:-
	cur_debug_level(Level),!.
get_debug_level(Level)
	:-
	debug_default_level(1).

debug(Fmt)
	:-
	debug(Fmt,[]).

debug(Fmt,Args)
	:- 
	debug_default_level(Level),
	debug(Level,Fmt,Args).

debug(Level,Fmt,Args)
	:-
	get_debug_level(SysLevel),
	Level =< SysLevel,
	!,
	printf(user,Fmt,Args),
	flush_output(user).
debug(_,_,_).

dot_debug(Level,Fmt,Args)
	:-
	get_debug_level(SysLevel),
	dot_debug(SysLevel,Level,Fmt,Args).

dot_debug(SysLevel,Level,Fmt,Args)
	:-
	Level =< SysLevel,
	!,
	printf(user,Fmt,Args),
	flush_output(user).
dot_debug(SysLevel,Level,Fmt,Args)
	:-
	0 < SysLevel,
	!,
	put_atom(user,'.'),
	flush_output(user).
dot_debug(SysLevel,Level,Fmt,Args).

decln_debug(Level,DeclnSpec,DecltList,State)
	:-
	get_debug_level(SysLevel),
	decln_debug(SysLevel,Level,DeclnSpec,DecltList,State).

decln_debug(SysLevel,Level,DSpec,Declts,State)
	:-
	Level =< SysLevel,
	!,
	printf(user, 'DSPEC: %t   \nDECLN: %t\n',[DSpec,Declts]),
	flush_output(user),
	decln_break(Declts).
decln_debug(SysLevel,Level,DeclnSpec,DecltList,State).

decln_break(Declts)
	:-
	Declts = [ident(Item)],
	decln_break_on(Item),
	trace.
decln_break(_).

/*---------------------------------------
 * error/2
 * error/3
 *--------------------------------------*/

error(Fmt,State)
	:-
	error(Fmt,[],State).

error(Fmt,Args,0)
	:-!,
%%	printf(error_stream,Fmt,Args).
	printf(user,Fmt,Args).

error(Fmt,Args,State)
	:-
	accessC2P(inFile, State, FileName),
	accessC2P(curLineNum, State, LineNum),

	name(Fmt, FmtCs),
	append("File %t, line %t: ",FmtCs,NewFmtCs), 
	name(NewFmt, NewFmtCs),
	append([FileName,LineNum],Args,NewArgs),

%%	printf(error_stream,NewFmt,NewArgs).
	printf(user,NewFmt,NewArgs).

/*=================================================================*
 | 		cmisc.pro
 |	Copyright (c) 1990-94 Applied Logic Systems, Inc.
 |
 | 		Miscellaneous predicates
 |
 | Major predicates :
 | 	isNumeric/2	-- returns the value of a decimal char
 |	isHex/2		-- returns the value of a hex char
 |	isOctal/2	-- returns the value of a Octal char
 |	isAlpha/1	-- tests for an alphabetic char
 |	buildName/3	-- make a symbol out of two symbols
 |	reverse/2	-- reverse a list
 |	deleteLast/2-- deletes the last item of a non-empty list
 *=================================================================*/

%-------------------------------------------------------------
% isNumeric is a map between decimal numeric characters 
% and the numbers that they represent.
%-------------------------------------------------------------

isNumeric(NC, Num) :- 0'0 =< NC, NC =< 0'9, Num is NC - 0'0.


%-------------------------------------------------------------
% isHex is a map between Hexadecimal characters and the numbers 
% that they represent.
%-------------------------------------------------------------

isHex(NC, Num) :- isNumeric(NC,Num), !.
isHex(NC, Num) :- 0'a =< NC, NC =< 0'f, !, Num is NC-0'a+10.
isHex(NC, Num) :- 0'A =< NC, NC =< 0'F, Num is NC-0'A+10.

%-------------------------------------------------------------
%-------------------------------------------------------------

isOctal(NC, Num) :- 0'0 =< NC, NC =< 0'7, Num is NC - 0'0.


%-------------------------------------------------------------
% isAlpha(Char) succeeds when Char is considered to be an 
% alphabetic character.
%-------------------------------------------------------------

isAlpha(Char) :- 0'a =< Char, Char =< 0'z, !.
isAlpha(Char) :- 0'A =< Char, Char =< 0'Z, !.
isAlpha(0'$).
isAlpha(0'_).

isAlphaNumeric(Char) :- isAlpha(Char), !.
isAlphaNumeric(Char) :- isNumeric(Char,_).

/*
%
% buildName/3
% 	make a symbol out of two input symbols
%

buildName(N,S,O) :-
	name(N,NS),
	name(S,SS),
	dappend(NS,SS,OS),
	name(O,OS).
*/

%-------------------------------------------------------------
% deleteLast/2
%-------------------------------------------------------------

deleteLast([_],[]) :- !.
deleteLast([X|In],[X|Out]) :- deleteLast(In,Out).

%-------------------------------------------------------------
% cleanDB/0
%	-- abolish all asserted predicates
%-------------------------------------------------------------

cleanDB
	:-
	abolish(sourcePath,1),
	abolish(includePath,3),
%	reset_includePath,
	abolish(currentPath,3),
	abolish(imported,1),
	abolish(skip_item,2),
	abolish(exclude_files,5).

/*
reset_includePath 
	:-
	defaultIncludePath(A,B,C),
	assertz(includePath(A,B,C)),
	fail.
reset_includePath.
*/

endmod.
