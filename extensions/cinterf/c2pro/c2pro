/*==============================================================*
 | 		c2pro.pro
 |	Copyright(c) 1991-5 Applied Logic Systems, Inc.
 |
 |		C language translator - Top Level
 |
 | Author: Kevin A. Buettner
 |
 | Created: 4/3/90
 | Revision History:
 |	9/23/91		P. Raman
 |	04/94		K.Bowen - use streams; c2p typedef;
 |	05/95		K.Bowen - consolidate os-specific info
 |
 | Debugging levels
 | ----------------
 | Default level is 1;
 | Each level adds to what was shown at the previous level:
 |	0 - silent;
 |	1 - show open/close of input files; dots for stmt processing;
 |	2 - show token list of statemnt being parsed;
 |	3 - show result of parsing;
 |	4 - show lines as read from source;
 | Levels are set by the command line switch:
 |	-d N
 | which must occur after the  -p divider.
 | Addl debugging tool:
 |	-T FileName   (where FileName is a complete path)
 | causes trace to be turned on when openFile is called (basically
 | when #include FileName or #import FileName is executed.  Example:
 |	-T /usr/include/objc/objc-class.h
 *===============================================================*/

%:- [c2p,cparse,ctoken,cexp,cout,cfiles,cmisc,cmacro].

module c2pro.
use avl.

	%-------------------------------------
	% Dynamic Declarations:
	%-------------------------------------

:- dynamic(cur_debug_level/1).
cur_debug_level(1).

:-dynamic(silent/0).
:-dynamic(skip_item/2).
:-dynamic(exclude_files/5).
:-dynamic(includePath/3).
:-dynamic(currentPath/3).
:-dynamic(sysPathPrefix/1).
:-dynamic(imported/1).
:-dynamic(trace_enter_file/1).
:-dynamic(tgt_os/1).
:-dynamic(output:win32funcmacros/0).

:- make_gv("InfoTable").

	%-------------------------------------
	% OS-Specific File Loading (to disappear):
	%-------------------------------------

os_specific_file(unix,	cunix).
os_specific_file(dos,	cdos).
os_specific_file(macos,	cmac).
os_specific_file(vms,	cvax).

	%-------------------------------------
	% file suffixes.
	%-------------------------------------

inSuffix('spc').
outSuffix('src').

%%------------------------------------------------------------
%% c2pro/0.
%% command line goal:
%% 	alspro c2pro -g c2pro -p file [file..] 
%%		[-os Name]
%%		[-Dflag[=num]]* [-Ipathname]*  
%%		[-d debuglevel] [-b breakitem]*
%% 		[-srcpath Path] [sys_pfx Path]
%%		[-filterFile Path] [-filter FilterSpec]
%%		[-info File]
%%		[-master Name] 
%%------------------------------------------------------------

	%% old:
export ctrans/0.
ctrans :- c2pro.

export c2pro/0.

c2pro
	:-
		%% clean db & load os-specific stuff:
	cleanDB,
/*
	(c2pro_os(_) ->
		true
		;
		builtins:als_system(SysVars),
		dmember(os=OS,SysVars),
		os_specific_file(OS,OS_File),
		reconsult(OS_File)
	),
*/
		%% parse command line & setup options:
	get_cmdline_vals(SwitchVals),
	pull_out_nullswitches(SwitchVals, Files, ReducedSwitchVals),

	makeC2P(DummyState),
	setC2P(inFile, DummyState, command_line),
	setC2P(curLineNum, DummyState, 0),

	parse_options(ReducedSwitchVals, Defines, DummyState),
		%% process the files:
	recheck_defaults([sourcePath(_)]),
	calc_filters,
	c2pro(Files,Defines).

	%-------------------------------------
	%   parse_options/3
	%-------------------------------------

parse_options([],[],State).
parse_options([FirstOpt | RestOpts], Defines, State)
	:-
	install_option(FirstOpt, Defines, RestDefines, State),
	parse_options(RestOpts, RestDefines, State).

/*--------------------------------------------------------------
 |   install_option/4
 |
 |	Options: 
 |	
 |	+Debugging:
 |	1.	Set debugging level (where Level is a number: 1 =< Level =< 9):
 |	 		option:  -d Level
 |	
 |	2.	Set break at decln processing on item:
 |			option:  -b Item  or -b [Item, ....]
 |	
 |	+Force definition of (C) constant:
 |		option:  -DName[=Num]
 |	
 |	+Setup include paths (use either):
 |		option:  -I Pathname
 |		option:  -IPathname
 |	
 |	+Establish a source path:
 |		option:  -srcpath Path
 |
 |	+Establish a prefix for <> includes/excludes
 |		option:  -sys_pfx Path
 |
 |	+Set path to a function filter spec file
 |		option:	 -filterFile Path
 |
 |	+Establish function filter 
 |		option:	 -filter FilterSpec
 |
 |		[ See below for description of function filters].
 |
 |	+Establish master name
 |		option:	 -master Name
 |
 |	+Set miscellaneous flag (Flag must be an atom, not one of above):
 |		option:  -Flag
 |	
 *-------------------------------------------------------------*/
	%% set debugging level:
	%% option:  -d Level[=Num]
install_option(['-d',InitLevel], Defines, Defines, State)
	:-
	set_debugging_level(InitLevel).

set_debugging_level(InitLevel)
	:-
	(number(InitLevel) ->
		Level = InitLevel
		;
		name(InitLevel, ILCs),
		name(Level, ILCs)
	),
		
	abolish(cur_debug_level,1),
	assert(cur_debug_level(Level)).

	%% set break at decln processing on item:
	%% option:  -b Item  or -b [Item, ....]
install_option(['-b',BreakItem], Defines, Defines, State)
	:-
	set_break_items(BreakItem).

	%% option:  -DName[=Num]
install_option([Opt], [define(Id,Val)|RestDefines], RestDefines, State)
	:-
	name(Opt, [0'-,0'D|DefStr] ),
	!,
	getIdentifier(DefStr,IdStr,RestStr,State),
	name(Id,IdStr),
		%% Is -D in the form -D<Nam>=<Val>   ???
	getValueOpt(RestStr,Val).

	% option:  -I Pathname
install_option(['-I',PathAtm], Defines, Defines, State)
	:- !,
	name(PathAtm,PathStr),
	addIncludePath(PathStr,State).

	% option:  -T FileName 		(full path to file)
install_option(['-T',PathAtm], Defines, Defines, State)
	:- !,
	assert(trace_enter_file(PathAtm)).

	% option:  -IPathname
install_option([Opt], Defines, Defines, State)
	:-
	name(Opt,[0'-,0'I|PathStr]),
	!,
	addIncludePath(PathStr,State).

	% option: -srcpath Path
install_option(['-srcpath',Path], Defines, Defines, State)
	:-
	assert(sourcePath(Path)).

	% option: -sys_pfx Path
install_option(['-sys_pfx',Path], Defines, Defines, State)
	:-
	subPath(PathList, Path),
	(sysPathPrefix(Old) ->
		retract(sysPathPrefix(Old))
		;
		true
	),
	assert(sysPathPrefix(PathList)).

 	% option:	 -filterFile Path
install_option(['-filterFile',Path], Defines, Defines, State)
	:-
	set_filter_file(Path).

 	% option:	 -filter Filter
install_option(['-filter', Filter], Defines, Defines, State)
	:-
	set_filter_expr(Filter).

	%% option: -info File -- must appear rightwards of -srcpath
install_option(['-info', File], Defines, Defines, State)
	:-
	filePlusExt(File,pro,FilePro),
	((exists_file(File) ; exists_file(FilePro))
		->
		FullFile = File
		;
		sourcePath(SrcPath),
		extendPath(SrcPath,File,FullFile),
		filePlusExt(FullFile,pro,FullFilePro),
		((exists_file(FullFile) ; exists_file(FullFilePro))
			-> 
			true ;
			printf('!Error (-info): Can''t find file: %t or %t\n',
				[File, FullFile])
		)
	),
	assert(info_file(FullFile)),
	consult_to(c2pro, FullFile).

install_option(['-master', MasterName], Defines, Defines, State)
	:-
	assert(master_name(MasterName)).

 	% option:	 -os OS
install_option(['-os', OS], Defines, Defines, State)
	:-
	assert(tgt_os(OS)),
	setC2P(tgt_os, State, OS).

install_option([Opt], Defines, Defines, State)
	:-
	name(Opt,[0'- | OptStr]),
	name(Flag,OptStr),
	output:assert(Flag).

	%% Skip anything else:
install_option(Opt, Defines, Defines, State)
	:-
	error('c2pro: Warning: unknown option: %t\n',[Opt],0).

		%% Is -D in the form -D<Nam>=<Val>   ???
getValueOpt([0'=|ValStr],[number(Num)])
	:-
	name(Num,ValStr),
	number(Num),
	!.
getValueOpt([0'=|ValStr],[string(Val)])
	:-
	atom_codes(Val, ValStr),
	!.
getValueOpt(_,[number(1)]).		% default value of -D flag is 1

recheck_defaults([]).
recheck_defaults([Item | Rest])
	:-
	recheck_default(Item),
	recheck_defaults(Rest).

:-dynamic(sourcePath/1).

recheck_default(sourcePath(_))
	:-
	(sourcePath(_) ->
		true
		;
		assert(sourcePath('.'))
	).

set_break_items(BreakItem)
	:-
	name(BreakItem, BICs),
	bufread(BICs, BItms0),
	(var(BItms0) ->
			%% BreakItem was a quoted var:
		BItms = BreakItem
		;
		BItms = BItms0
	),
	sbis(BItms).

:-dynamic(decln_break_on/1).

sbis([]).
sbis([BI | BItms])
	:-
	assert(decln_break_on(BI)),
	sbis(BItms).
sbis(BItms)
	:-
	assert(decln_break_on(BItms)).

/*-----------------------------------------
 |	Function filters:
 |
 |	Allows the specification of interfaces consisting of subsets of 
 |	of the full (source) library.  There are two broad types of 
 |	specifications: basic filters and compound filters.
 |
 |	Basic filters:  
 |	-------------
 |	These are terms of one of the following forms:
 |
 |		all  			 -	(default) include all functions from the library;
 |		all_except(List) -	include all functions from the library
 |							except the members of List
 | - New - being added:
 |		all_xcpt_pat(String) -	include all functions from the library
 |							except those for which String is an
 |
 |		all_xcpt_pat(SL) - SL is a Prolog list of atoms;
 |							include all functions from the library
 |							except those matching (initial seg) any
 |							atom on list SL; ie, exclude Name if 
 |							_any_ atom on SL is an initial seg of Name.
 |
 |							an initial segment of their name
 |		List 			 - 	include just the elements of List
 |
 |	Here list consists of atoms naming functions, or expressions F/N,
 |	where F is an atom naming a function. [The N is ignored; allowing
 |	its presence is a convenience.]
 |
 |	Basic filters are specified by equations: 
 |
 |		FiltName = FiltTerm.
 |
 |	Here FiltName is an atom naming the filter and FiltTerm is one of
 |	the basic filter expressions described above. Typically these occur
 |	in specification files (see below).
 |
 |	Compound filters:
 |	----------------
 |	These are combinations of basic filters.  Abstractly,
 |	
 |		F1 + F2 + ... + Fn
 |	
 |	The result of the combination is evalutated to another basic filter.
 |	
 |	The rules for for evaluating these combinations are:
 |	
 |		all + <anything> 				= all;
 |		all_except(L1) + all_except(L2) = all_except(L1 intersect L2);
 |		List1 + List2 					= List1 union List2;
 |		List1 + all_except(List2) 		= all_except(List2 diff List1).
 |
 |	Here 'union' is 'set union' and diff is 'set difference'.
 |
 |	The rationale of this approach runs as follows.  In most settings, 
 |	the interfacing process involves several layers and files of code:
 |
 |		mylibxx.pro		<- a "smoothing/convenience" layer of code
 |		mylib.pro		<- the generated immediate dispatch layer code
 |		mylibinterf.a	<- the generated interface C code archived;
 |		mylib.a			<- the external C code archived as a library
 |
 |	One needs to co-ordinate the selection of function/predicate subsets
 |	at all levels.  The mechanism here controls the selection of functions
 |	included in mylib.pro and mylibinterf.a, and ultimately, those selected
 |	by the linker from mylib.a.  Since mylibxx.pro (which may really be
 |	a collection of files) is not generated, there is no immediate control
 |	of what is selected from it. However, a useful approach is to utilize
 |	the preprocessor mechanism to group the elements of mylibxx.pro into
 |	segments corresponding to the basic filters (which can be overlapping).
 |	by using expressions
 |
 |	#ifdef (syscfg:BFi)
 |	...
 |	#endif % BFi
 |
 |	The -a command line switch is used to pass a compound filter which
 |	an image is being made:
 |
 |	alspro -a	'BF1+BF2+...+BFn'
 |
 |	This causes each of the following facts to be asserted:
 |
 |		syscfg:BFi
 |
 |	This will select the appropriate units from mylibxx.pro, while the action
 |	of the mechanism here will make the approprate selections for
 |	mylib.pro and mylibinterf.a.
 *-------------------------------------------*/
set_filter_file(Path)
	:-
	exists_file(Path),
	!,
	assert(filter_file(Path)).

set_filter_file(Path)
	:-
	error('Error: Can''t find filter file: %t\n', [Path], 0).


set_filter_expr(FiltExpr)
	:-
	assert(raw_filter_expr(FiltExpr)).
	
:- dynamic(raw_filter_expr/1).

calc_filters
	:-
	raw_filter_expr(FiltExprAtm),
	abolish(raw_filter_expr,1),
	!,
	atomread(FiltExprAtm, FiltExpr, [attach_fullstop(true),
									 syntax_errors(quiet)]),
	calc_filters(FiltExpr).

calc_filters
	:-
	filter_file(Path),
	get_filter_info(Path,[FiltExpr]),
	calc_filters(FiltExpr).
	
calc_filters.

	%% Incoming is 'all':
calc_filters(all)
	:-!,
	assert(fcn_filter(all)).

	%% Incoming is all_except(Excl):
calc_filters(all_except(Excl))
	:-
	assert(fcn_filter(all_except(Excl))).

	%% Incoming is all_xcpt_pat(Pat):
calc_filters(all_xcpt_pat(Pat))
	:-
	assert(fcn_filter(all_xcpt_pat(Pat))).

	%% Incoming is explicit list of fcns to include:
calc_filters(FiltExpr)
	:-
	FiltExpr = [_|_],
	!,
	assert(fcn_filter(FiltExpr)).

	%% Incoming is an atom or A+B:
calc_filters(Expr)
	:-
	(atom(Expr); functor(Expr,+,2)),
	!,
	filter_file_path(Path),
	get_filter_info(Path,BasicFilters),
	calc_filters(Expr,BasicFilters,FinalFilter),
	assert(fcn_filter(FinalFilter)).

calc_filters(Expr)
	:-
	error('Error: Improper filter: %t\n', [Expr], 0),
	!,
	fail.

:-dynamic(filter_file/1).

filter_file_path(Path)
	:-
	filter_file(Path),
	!.

filter_file_path(Path)
	:-
	Path = './filters', 
	exists_file(Path),!.

filter_file_path(Path)
	:-
	Path = '../../syscfg',
	exists_file(Path),!.

filter_file_path(Path)
	:-
	error('Error: Can''t find filter file: %t\n', [Path], 0),
	!,
	fail.

get_filter_info(Path,Filters)
	:-
	open(Path,read,PS,[]),
	read_terms(PS,Filters),
	close(PS).

calc_filters(E+F,Filters,FinalFilter)
	:-!,
	calc_filters(E,Filters,E_Filter),
	calc_filters(F,Filters,F_Filter),
	filter_combine(E_Filter, F_Filter, FinalFilter).

calc_filters(Expr,Filters,FinalFilter)
	:-
	dmember(Expr=NextFilter, Filters),
	(NextFilter = (_ + _) ->
		calc_filters(NextFilter,Filters,FinalFilter)
		;
		FinalFilter = NextFilter
	).

/*-----------------------------------------------------------------
 |	all + <anything> 				= all;
 |	all_except(L1) + all_except(L2) = all_except(L1 intersect L2);
 |	List1 + List2 					= List1 union List2;
 |	List1 + all_except(List2)		= all_except(List2 diff List1)
 *----------------------------------------------------------------*/

filter_combine(all, _, all) :-!.
filter_combine(_, all, all) :-!.

filter_combine(all_except(L1), all_except(L2),all_except(L3))
	:-!,
	intersect(L1, L2, L3).

filter_combine(all_except(L1), L2, Result)
	:-!,
	filter_combine(L2, all_except(L1), Result).

filter_combine(L1, all_except(L2), all_except(L2, L3))
	:-!,
	list_diff(L2, L1, L3).

filter_combine(L1, L2, L3)
	:-
	union(L1, L2, L3).

	%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	%%
	%% 		c2pro/2.
	%%
	%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

c2pro([],_)
	:- !.

c2pro([FirstFile | Rest], Defines) 
	:-
	sourcePath(SrcPath),
	setup_the_input_file(FirstFile, SrcPath, InName, BaseName),
	outSuffix(OutSufx),
	filePlusExt(BaseName,OutSufx,OutName),
	(tgt_os(OS) -> true ; OS = unix),
	init_state(InName, OutName, OS, State),
	fcn_filter(FcnFilter),
	setC2P(fcn_filter, State, FcnFilter),
	do_c2pro(InName, State, Defines),
	!,
	c2pro(Rest, Defines).

c2pro([_ | Rest], Defines) 
	:-
	c2pro(Rest, Defines).

	%---------------------------------
	%  input_file_setup/3
	%---------------------------------

setup_the_input_file(FirstFile, SrcPath, InName, BaseName)
	:-
	input_file_setup(FirstFile, SrcPath, InName, BaseName),
	exists_file(InName),
	!.
setup_the_input_file(FirstFile, SrcPath, InName, BaseName)
	:-
	master_name(MasterName),
	inSuffix(IS), 
	filePlusExt(MasterName,IS,FileExt),
	pathPlusFile(SrcPath,FileExt,InName),
	exists_file(InName),
	!,
	BaseName = FirstFile.

setup_the_input_file(FirstFile, SrcPath, InName, BaseName)
	:-
	error('Can''t find source file: %t -- skipping\n',[FirstFile], 0).

input_file_setup(File, SrcPath, InName, BaseName)
	:-
	filePlusExt(BaseName,Ext,File),
	!,
	inSuffix(IS), 
	(IS = Ext ->
		InName = File
		;
		error('Bad source file: %t -- skipping\n',[File], 0)
	).

	%% Finding a path attached to a particular file
	%% overrides the source path specified with a switch:
input_file_setup(File, SrcPath, InName, BaseName)
	:-
	pathPlusFile(Path,BaseName,File),
	Path \= '',
	!,
	inSuffix(IS), 
	filePlusExt(File,IS,InName).

	%% File is a pure, unadorned name (no path, no ext); 
	%% use the SrcPath:
input_file_setup(File, SrcPath, InName, File)
	:-
	inSuffix(IS), 
	filePlusExt(File,IS,FileExt),
	pathPlusFile(SrcPath,FileExt,InName).

	%---------------------------------
	%  init_state/3
	%---------------------------------

init_state(InName, OutName, OS, State)
	:-
	makeC2P(State),
	setC2P(inFile, State, InName),
	setC2P(outFile, State, OutName),
	setC2P(tgt_os, State, OS),
	open(OutName,write,OutStream,[]),
	setC2P(outStream, State, OutStream),
	gen_file_header(OutStream,InName,OutName),
	avl_create(Table),
%	setC2P(info_table, State, Table).
	setInfoTable(Table).

	%---------------------------------
	% do_c2pro/3.
	%---------------------------------


do_c2pro(InName, State, Defines) 
	:-
	read_file(InName, State, Defines),
	closeFile(State),
	!.
do_c2pro(InName, State,_)
	:-
	closeFile(State),
	printf('\n>>>-->>> c2pro halted prematurely processing %t<<<---<<<\n',[InName]).

endmod.
