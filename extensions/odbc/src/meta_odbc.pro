/* meta-odbc interface *//*example: sql_init.sql_open_connection(C, 'sdk21-Access32', '', ''),sql_open_statement(C, 'select * from customer', S),sql_execute_statement(S),sql_fetch_row(S, R),sql_close_statement(S),sql_close_connection(C).sql_shutdown.R = ['bob', '203 Main St.', ...]*//*init - sets a global for the enironment - books says it is global for each app.*/test :- test('select * from Customer').test(Query, Values) :-	sql_open_connection('PrologData', '', '', C),	sql_open_statement(C, Query, S),	put_all(S, Values),	sql_execute_statement(S),	fetch_all(S),	sql_commit(C), 	sql_close_statement(S),	sql_close_connection(C).test(Query) :- test(Query, []).fetch_all(statement(_, [])).fetch_all(S) :-	sql_fetch_row(S, R),	writeq(R), nl,	fetch_all(S).fetch_all(_).put_all(S, []).put_all(S, Values) :-	sql_bind_row(S, Values).sql_shell :-	sql_open_connection(C, ConnectionString),	printf('Connected to %t\n', [ConnectionString]),	catch (sql_read_eval_print_loop(C), LoopError, (sql_close_connection(C), throw(LoopError))),	sql_close_connection(C).sql_read_eval_print_loop(C) :-	catch ((	printf('\nSQL> '),	get_line(Line),	Line \= end_of_file,	sql_open_statement(C, Line, S),	sql_execute_statement(S),	fetch_all(S),	sql_commit(C),	sql_close_statement(S)	), error(sql_error(_, ErrorList), _),	(	   printf('SQL Error:\n'),	   print_errors(ErrorList)	)),	sql_read_eval_print_loop(C).sql_read_eval_print_loop(_).print_errors([]).print_errors([error(Code, _, Desc) | Rest]) :-	printf('%t: %t\n', [Code, Desc]).:- [-odbc, -'prolog odbc'].:- make_gv('_odbc_environment').sql_init :-	sql_alloc_env(Environment),	set_odbc_environment(Environment).sql_shutdown :-	get_odbc_environment(Environment),	sql_free_env(Environment),	set_odbc_environment(0)./* sql_alloc_connect/2 is already defined */sql_open_connection(DataSource, User, Password, Connection) :-	get_odbc_environment(Environment),	sql_alloc_connect(Environment, Connection),	catch ((		sql_connect(Connection, DataSource, User, Password)	), ConnectError, (		sql_free_connect(Connection),		throw(ConnectError)	)).sql_open_connection(Connection, ConnectionString) :-	get_odbc_environment(Environment),	sql_alloc_connect(Environment, Connection),	catch ((		o_GetForegroundWindow(X),		sql_driver_connect(Connection, X, '', ConnectionString, 512, 'SQL_DRIVER_PROMPT')	), ConnectError, (		sql_free_connect(Connection),		throw(ConnectError)	)).sql_close_connection(Connection) :-	catch ((		sql_disconnect(Connection)	), DisconnectError, (		sql_free_connect(DBConnection),		throw(DisconnectError)	)),	sql_free_connect(Connection).sql_commit(Connection) :-	get_odbc_environment(Environment),	sql_transact(Environment, Connection, 'SQL_COMMIT').	sql_open_statement(Connection, SQLQuery, StatementTerm) :-	sql_alloc_stmt(Connection, StatementHandle),	catch ((		sql_prepare(StatementHandle, SQLQuery),		sql_num_result_cols(StatementHandle, NumColumns),		alloc_col_info(StatementHandle, 1, NumColumns, ColumnInfoList),		StatementTerm = statement(StatementHandle, ColumnInfoList)	), StatementError, (		sql_free_stmt(StatementHandle, 'SQL_DROP'),		throw(StatementError)	)).alloc_col_info(Statement, N, MaxCols, []) :- N > MaxCols.alloc_col_info(Statement, N, MaxCols, [Col | RestData]) :-	sql_describe_col(Statement, N, Name, 255, ODBCType, _, _, _),	simple_type(ODBCType, Type),	alloc_datum(Type, Datum),	c_alloc_abs(int, Len),	simple_c_type_param(Type, TypeParam),	sql_bind_col(Statement, N, TypeParam, Datum, 255, Len),	simple_sql_type_param(Type, SQLTypeParam),	sql_bind_parameters(Statement, N, 'SQL_PARAM_INPUT', TypeParam, , Datum, 255, Len),	Col = col_info(Name, Type, Datum, Len),	NextN is N + 1,	alloc_col_info(Statement, NextN, MaxCols, RestData).simple_type('SQL_BIGINT', number).simple_type('SQL_BIT', number).simple_type('SQL_DECIMAL', number).simple_type('SQL_DOUBLE', number).simple_type('SQL_FLOAT', number).simple_type('SQL_INTEGER', number).simple_type('SQL_NUMERIC', number).simple_type('SQL_REAL', number).simple_type('SQL_SMALLINT', number).simple_type('SQL_VARCHAR', text).simple_type('SQL_LONGVARCHAR', text).simple_type('SQL_CHAR', text).simple_type('SQL_DATE', date).simple_type('SQL_TIME', time).simple_type('SQL_TIMESTAMP', timestamp).simple_c_type_param(number, 'SQL_C_DOUBLE').simple_c_type_param(text, 'SQL_C_CHAR').simple_c_type_param(date, 'SQL_C_DATA').simple_c_type_param(time, 'SQL_C_TIME').simple_c_type_param(timestamp, 'SQL_C_TIMESTAMP').simple_sql_type_param(number, 'SQL_DOUBLE').simple_sql_type_param(text, 'SQL_CHAR').simple_sql_type_param(date, 'SQL_DATA').simple_sql_type_param(time, 'SQL_TIME').simple_sql_type_param(timestamp, 'SQL_TIMESTAMP').alloc_datum(text, Datum) :-	c_allocn_abs(char, 256, Datum).alloc_datum(number, Datum) :-	c_alloc_abs(double, Datum).alloc_datum(date, Datum) :-	c_alloc_abs('DATE_STRUCT', Datum).alloc_datum(time, Datum) :-	c_alloc_abs('TIME_STRUCT', Datum).alloc_datum(timestamp, Datum) :-	c_alloc_abs('TIMESTAMP_STRUCT', Datum).sql_close_statement(statement(StatementHandle, ColumnInfoList)) :-		catch ((			sql_free_stmt(StatementHandle, 'SQL_DROP')		), FreeError, (			free_col_info(ColumnInfoList),			throw(FreeError)		)),		free_col_info(ColumnInfoList).free_col_info([]).free_col_info([col_info(_, _, Datum, Len) | Rest]) :-	c_free(Datum), c_free(Len),	free_col_info(Rest).	sql_execute_statement(statement(StatementHandle, _)) :-	sql_execute(StatementHandle).sql_bind_row(statement(StatementHandle, ColumnInfoList), Row) :-	bind_item(Row, ColumnInfoList).bind_item(_, []).bind_item([Item | ItemTail], [col_info(_, Type, Datum, _) | InfoTail]) :-	put_data(Type, Item, Datum),	bind_item(ItemTail, InfoTail).put_data(text, PrologData, Datum) :-	c_set(Datum, str, PrologData).put_data(number, PrologData, Datum) :-	c_set(Datum, double, PrologData).put_data(date, date(Year, Month, Day), Datum) :-	c_set(Datum, 'DATE_STRUCT', [year, Year, month, Month, day, Day]).put_data(time, time(Hour, Minute, Second), Datum) :-	c_set(Datum, 'TIME_STRUCT', [hour, Hour, minute, Minute, second, Second]).put_data(timestamp, timestamp(Year, Month, Day, Hour, Minute, Second, Fraction), Datum) :-	c_set(Datum, 'TIMESTAMP_STRUCT',		[year, Year, month, Month, day, Day,	    hour, Hour, minute, Minute, second, Second, fraction, Fraction]).sql_fetch_row(statement(StatementHandle, ColumnInfoList), Row) :-	sql_fetch(StatementHandle),	collect_results(ColumnInfoList, Row).collect_results([], []).collect_results([col_info(_, Type, Datum, _) | ColRest], [Result | ResultRest]) :-	get_data(Type, Datum, Result),	collect_results(ColRest, ResultRest).	get_data(text, Datum, PrologData) :-	!,	c_examine(Datum, str, PrologData).get_data(number, Datum, PrologData) :-	!,	c_examine(Datum, double, PrologData).get_data(date, Datum, PrologData) :-	!,	c_examine(Datum, 'DATE_STRUCT', [year, Year, month, Month, day, Day]),	PrologData = date(Year, Month, Day).get_data(time, Datum, PrlogData) :-	!,	c_examine(Datum, 'TIME_STRUCT', [hour, Hour, minute, Minute, second, Second]),	PrologData = time(Hour, Minute, Second).get_data(timestamp, Datum, PrologData) :-	!,	c_examine(Datum, 'TIMESTAMP_STRUCT',	   [year, Year, month, Month, day, Day,	    hour, Hour, minute, Minute, second, Second, fraction, Fraction]),	PrologData = timestamp(Year, Month, Day, Hour, Minute, Second, Fraction).